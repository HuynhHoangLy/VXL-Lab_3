
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002990  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a9c  08002a9c  00012a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002abc  08002abc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002abc  08002abc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002abc  08002abc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002abc  08002abc  00012abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ac0  08002ac0  00012ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  08002b34  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08002b34  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bbe  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c57  00000000  00000000  00028c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002a8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002b338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f52  00000000  00000000  0002bca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c253  00000000  00000000  00042bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082273  00000000  00000000  0004ee45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d10b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002944  00000000  00000000  000d1108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a84 	.word	0x08002a84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002a84 	.word	0x08002a84

0800014c <isButtonPressed>:
int KeyReg2[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg3[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

uint16_t Pin[3] = {button0_Pin, button1_Pin, button2_Pin};

int isButtonPressed(int i) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[i]) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d006      	beq.n	800016e <isButtonPressed+0x22>
		button_flag[i] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000008c 	.word	0x2000008c

08000180 <isButtonLPressed>:

int isButtonLPressed(int i) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if (flagForLPress[i]) {
 8000188:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <isButtonLPressed+0x30>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d006      	beq.n	80001a2 <isButtonLPressed+0x22>
		flagForLPress[i] = 0;
 8000194:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <isButtonLPressed+0x30>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2100      	movs	r1, #0
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800019e:	2301      	movs	r3, #1
 80001a0:	e000      	b.n	80001a4 <isButtonLPressed+0x24>
	}
	return 0;
 80001a2:	2300      	movs	r3, #0
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000098 	.word	0x20000098

080001b4 <subKeyProcess>:

void subKeyProcess(int i) {
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	// Set value
	button_flag[i] = 1;
 80001bc:	4a04      	ldr	r2, [pc, #16]	; (80001d0 <subKeyProcess+0x1c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2101      	movs	r1, #1
 80001c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001c6:	bf00      	nop
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	2000008c 	.word	0x2000008c

080001d4 <getKeyInput>:

void getKeyInput() {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	// Pressed
	for (int i = 0; i < 3; i++) {
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e08c      	b.n	80002fa <getKeyInput+0x126>
		KeyReg0[i] = KeyReg1[i];
 80001e0:	4a4a      	ldr	r2, [pc, #296]	; (800030c <getKeyInput+0x138>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	4949      	ldr	r1, [pc, #292]	; (8000310 <getKeyInput+0x13c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001f0:	4a48      	ldr	r2, [pc, #288]	; (8000314 <getKeyInput+0x140>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4944      	ldr	r1, [pc, #272]	; (800030c <getKeyInput+0x138>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(GPIOB, Pin[i]);
 8000200:	4a45      	ldr	r2, [pc, #276]	; (8000318 <getKeyInput+0x144>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000208:	4619      	mov	r1, r3
 800020a:	4844      	ldr	r0, [pc, #272]	; (800031c <getKeyInput+0x148>)
 800020c:	f001 fbfa 	bl	8001a04 <HAL_GPIO_ReadPin>
 8000210:	4603      	mov	r3, r0
 8000212:	4619      	mov	r1, r3
 8000214:	4a3f      	ldr	r2, [pc, #252]	; (8000314 <getKeyInput+0x140>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 800021c:	4a3c      	ldr	r2, [pc, #240]	; (8000310 <getKeyInput+0x13c>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4939      	ldr	r1, [pc, #228]	; (800030c <getKeyInput+0x138>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022c:	429a      	cmp	r2, r3
 800022e:	d161      	bne.n	80002f4 <getKeyInput+0x120>
 8000230:	4a36      	ldr	r2, [pc, #216]	; (800030c <getKeyInput+0x138>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000238:	4936      	ldr	r1, [pc, #216]	; (8000314 <getKeyInput+0x140>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000240:	429a      	cmp	r2, r3
 8000242:	d157      	bne.n	80002f4 <getKeyInput+0x120>
			if (KeyReg3[i] != KeyReg2[i]) {
 8000244:	4a36      	ldr	r2, [pc, #216]	; (8000320 <getKeyInput+0x14c>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024c:	4931      	ldr	r1, [pc, #196]	; (8000314 <getKeyInput+0x140>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000254:	429a      	cmp	r2, r3
 8000256:	d029      	beq.n	80002ac <getKeyInput+0xd8>
				KeyReg3[i] = KeyReg2[i];
 8000258:	4a2e      	ldr	r2, [pc, #184]	; (8000314 <getKeyInput+0x140>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000260:	492f      	ldr	r1, [pc, #188]	; (8000320 <getKeyInput+0x14c>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE) {
 8000268:	4a2a      	ldr	r2, [pc, #168]	; (8000314 <getKeyInput+0x140>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d115      	bne.n	80002a0 <getKeyInput+0xcc>
					if (!flagForLPress[i]) {
 8000274:	4a2b      	ldr	r2, [pc, #172]	; (8000324 <getKeyInput+0x150>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d109      	bne.n	8000294 <getKeyInput+0xc0>
						TimeOutForKeyPress[i] = 300;
 8000280:	4a29      	ldr	r2, [pc, #164]	; (8000328 <getKeyInput+0x154>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000288:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						subKeyProcess(i);
 800028c:	6878      	ldr	r0, [r7, #4]
 800028e:	f7ff ff91 	bl	80001b4 <subKeyProcess>
 8000292:	e02f      	b.n	80002f4 <getKeyInput+0x120>
					}
					else TimeOutForKeyPress[i] = 100;
 8000294:	4a24      	ldr	r2, [pc, #144]	; (8000328 <getKeyInput+0x154>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2164      	movs	r1, #100	; 0x64
 800029a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800029e:	e029      	b.n	80002f4 <getKeyInput+0x120>
				}
				else flagForLPress[i] = 0;
 80002a0:	4a20      	ldr	r2, [pc, #128]	; (8000324 <getKeyInput+0x150>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2100      	movs	r1, #0
 80002a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002aa:	e023      	b.n	80002f4 <getKeyInput+0x120>
			}
			else {
				TimeOutForKeyPress[i]--;
 80002ac:	4a1e      	ldr	r2, [pc, #120]	; (8000328 <getKeyInput+0x154>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b4:	1e5a      	subs	r2, r3, #1
 80002b6:	491c      	ldr	r1, [pc, #112]	; (8000328 <getKeyInput+0x154>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 80002be:	4a1a      	ldr	r2, [pc, #104]	; (8000328 <getKeyInput+0x154>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d114      	bne.n	80002f4 <getKeyInput+0x120>
					if (KeyReg2[i] == PRESSED_STATE) {
 80002ca:	4a12      	ldr	r2, [pc, #72]	; (8000314 <getKeyInput+0x140>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d10e      	bne.n	80002f4 <getKeyInput+0x120>
						flagForLPress[i] = 1;
 80002d6:	4a13      	ldr	r2, [pc, #76]	; (8000324 <getKeyInput+0x150>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2101      	movs	r1, #1
 80002dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						TimeOutForKeyPress[i] = 0;
 80002e0:	4a11      	ldr	r2, [pc, #68]	; (8000328 <getKeyInput+0x154>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2100      	movs	r1, #0
 80002e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						KeyReg3[i] = NORMAL_STATE;
 80002ea:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <getKeyInput+0x14c>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2101      	movs	r1, #1
 80002f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3301      	adds	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b02      	cmp	r3, #2
 80002fe:	f77f af6f 	ble.w	80001e0 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000018 	.word	0x20000018
 8000310:	2000000c 	.word	0x2000000c
 8000314:	20000024 	.word	0x20000024
 8000318:	2000003c 	.word	0x2000003c
 800031c:	40010c00 	.word	0x40010c00
 8000320:	20000030 	.word	0x20000030
 8000324:	20000098 	.word	0x20000098
 8000328:	20000000 	.word	0x20000000

0800032c <fsm_automatic_run>:

#include "fsm_automatic.h"

int time4Run[3] = {3, 2, 5}; // do->xanh , xanh->vang, vang->do

void fsm_automatic_run() {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0

	switch (status) {
 8000330:	4b98      	ldr	r3, [pc, #608]	; (8000594 <fsm_automatic_run+0x268>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b03      	cmp	r3, #3
 8000336:	f200 80a4 	bhi.w	8000482 <fsm_automatic_run+0x156>
 800033a:	a201      	add	r2, pc, #4	; (adr r2, 8000340 <fsm_automatic_run+0x14>)
 800033c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000340:	08000351 	.word	0x08000351
 8000344:	0800036f 	.word	0x0800036f
 8000348:	080003cb 	.word	0x080003cb
 800034c:	08000427 	.word	0x08000427
		case INIT:
			clearLight();
 8000350:	f001 f82e 	bl	80013b0 <clearLight>
			status = AUTO_RED;
 8000354:	4b8f      	ldr	r3, [pc, #572]	; (8000594 <fsm_automatic_run+0x268>)
 8000356:	2201      	movs	r2, #1
 8000358:	601a      	str	r2, [r3, #0]
			setTimer1((time4Run[2])*1000);
 800035a:	4b8f      	ldr	r3, [pc, #572]	; (8000598 <fsm_automatic_run+0x26c>)
 800035c:	689b      	ldr	r3, [r3, #8]
 800035e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000362:	fb02 f303 	mul.w	r3, r2, r3
 8000366:	4618      	mov	r0, r3
 8000368:	f000 fe44 	bl	8000ff4 <setTimer1>
			break;
 800036c:	e090      	b.n	8000490 <fsm_automatic_run+0x164>

		case AUTO_RED:
			turnLightOn(LED_RED);
 800036e:	2000      	movs	r0, #0
 8000370:	f000 ffaa 	bl	80012c8 <turnLightOn>
			if (isButtonPressed(0)) {
 8000374:	2000      	movs	r0, #0
 8000376:	f7ff fee9 	bl	800014c <isButtonPressed>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d009      	beq.n	8000394 <fsm_automatic_run+0x68>
				status = MAN_RED;
 8000380:	4b84      	ldr	r3, [pc, #528]	; (8000594 <fsm_automatic_run+0x268>)
 8000382:	220c      	movs	r2, #12
 8000384:	601a      	str	r2, [r3, #0]
				clearLight();
 8000386:	f001 f813 	bl	80013b0 <clearLight>
				anotherstatus = MAN_RED;
 800038a:	4b84      	ldr	r3, [pc, #528]	; (800059c <fsm_automatic_run+0x270>)
 800038c:	220c      	movs	r2, #12
 800038e:	601a      	str	r2, [r3, #0]
				anotherclearLight();
 8000390:	f001 f81a 	bl	80013c8 <anotherclearLight>
			}
			updateVal7SEG();
 8000394:	f000 fd6a 	bl	8000e6c <updateVal7SEG>
			if (timer1_flag == 1) {
 8000398:	4b81      	ldr	r3, [pc, #516]	; (80005a0 <fsm_automatic_run+0x274>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b01      	cmp	r3, #1
 800039e:	d172      	bne.n	8000486 <fsm_automatic_run+0x15a>
				status = AUTO_GREEN;
 80003a0:	4b7c      	ldr	r3, [pc, #496]	; (8000594 <fsm_automatic_run+0x268>)
 80003a2:	2202      	movs	r2, #2
 80003a4:	601a      	str	r2, [r3, #0]
				led_buffer[0] = led_buffer[3] = time4Run[0];
 80003a6:	4b7c      	ldr	r3, [pc, #496]	; (8000598 <fsm_automatic_run+0x26c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a7e      	ldr	r2, [pc, #504]	; (80005a4 <fsm_automatic_run+0x278>)
 80003ac:	60d3      	str	r3, [r2, #12]
 80003ae:	4b7d      	ldr	r3, [pc, #500]	; (80005a4 <fsm_automatic_run+0x278>)
 80003b0:	68db      	ldr	r3, [r3, #12]
 80003b2:	4a7c      	ldr	r2, [pc, #496]	; (80005a4 <fsm_automatic_run+0x278>)
 80003b4:	6013      	str	r3, [r2, #0]
				setTimer1((time4Run[0])*1000);
 80003b6:	4b78      	ldr	r3, [pc, #480]	; (8000598 <fsm_automatic_run+0x26c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003be:	fb02 f303 	mul.w	r3, r2, r3
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 fe16 	bl	8000ff4 <setTimer1>
			}
			break;
 80003c8:	e05d      	b.n	8000486 <fsm_automatic_run+0x15a>

		case AUTO_GREEN:
			turnLightOn(LED_GREEN);
 80003ca:	2001      	movs	r0, #1
 80003cc:	f000 ff7c 	bl	80012c8 <turnLightOn>
			if (isButtonPressed(0)) {
 80003d0:	2000      	movs	r0, #0
 80003d2:	f7ff febb 	bl	800014c <isButtonPressed>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d009      	beq.n	80003f0 <fsm_automatic_run+0xc4>
				status = MAN_RED;
 80003dc:	4b6d      	ldr	r3, [pc, #436]	; (8000594 <fsm_automatic_run+0x268>)
 80003de:	220c      	movs	r2, #12
 80003e0:	601a      	str	r2, [r3, #0]
				clearLight();
 80003e2:	f000 ffe5 	bl	80013b0 <clearLight>
				anotherclearLight();
 80003e6:	f000 ffef 	bl	80013c8 <anotherclearLight>
				anotherstatus = MAN_RED;
 80003ea:	4b6c      	ldr	r3, [pc, #432]	; (800059c <fsm_automatic_run+0x270>)
 80003ec:	220c      	movs	r2, #12
 80003ee:	601a      	str	r2, [r3, #0]
			}
			updateVal7SEG();
 80003f0:	f000 fd3c 	bl	8000e6c <updateVal7SEG>
			if (timer1_flag == 1) {
 80003f4:	4b6a      	ldr	r3, [pc, #424]	; (80005a0 <fsm_automatic_run+0x274>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d146      	bne.n	800048a <fsm_automatic_run+0x15e>
				status = AUTO_YELLOW;
 80003fc:	4b65      	ldr	r3, [pc, #404]	; (8000594 <fsm_automatic_run+0x268>)
 80003fe:	2203      	movs	r2, #3
 8000400:	601a      	str	r2, [r3, #0]
				led_buffer[0] = led_buffer[3] = time4Run[1];
 8000402:	4b65      	ldr	r3, [pc, #404]	; (8000598 <fsm_automatic_run+0x26c>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	4a67      	ldr	r2, [pc, #412]	; (80005a4 <fsm_automatic_run+0x278>)
 8000408:	60d3      	str	r3, [r2, #12]
 800040a:	4b66      	ldr	r3, [pc, #408]	; (80005a4 <fsm_automatic_run+0x278>)
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	4a65      	ldr	r2, [pc, #404]	; (80005a4 <fsm_automatic_run+0x278>)
 8000410:	6013      	str	r3, [r2, #0]
				setTimer1((time4Run[1])*1000);
 8000412:	4b61      	ldr	r3, [pc, #388]	; (8000598 <fsm_automatic_run+0x26c>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800041a:	fb02 f303 	mul.w	r3, r2, r3
 800041e:	4618      	mov	r0, r3
 8000420:	f000 fde8 	bl	8000ff4 <setTimer1>
			}
			break;
 8000424:	e031      	b.n	800048a <fsm_automatic_run+0x15e>

		case AUTO_YELLOW:
			turnLightOn(LED_YELLOW);
 8000426:	2002      	movs	r0, #2
 8000428:	f000 ff4e 	bl	80012c8 <turnLightOn>
			if (isButtonPressed(0)) {
 800042c:	2000      	movs	r0, #0
 800042e:	f7ff fe8d 	bl	800014c <isButtonPressed>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d009      	beq.n	800044c <fsm_automatic_run+0x120>
				status = MAN_RED;
 8000438:	4b56      	ldr	r3, [pc, #344]	; (8000594 <fsm_automatic_run+0x268>)
 800043a:	220c      	movs	r2, #12
 800043c:	601a      	str	r2, [r3, #0]
				clearLight();
 800043e:	f000 ffb7 	bl	80013b0 <clearLight>
				anotherclearLight();
 8000442:	f000 ffc1 	bl	80013c8 <anotherclearLight>
				anotherstatus = MAN_RED;
 8000446:	4b55      	ldr	r3, [pc, #340]	; (800059c <fsm_automatic_run+0x270>)
 8000448:	220c      	movs	r2, #12
 800044a:	601a      	str	r2, [r3, #0]
			}
			updateVal7SEG();
 800044c:	f000 fd0e 	bl	8000e6c <updateVal7SEG>
			if (timer1_flag == 1) {
 8000450:	4b53      	ldr	r3, [pc, #332]	; (80005a0 <fsm_automatic_run+0x274>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d11a      	bne.n	800048e <fsm_automatic_run+0x162>
				status = AUTO_RED;
 8000458:	4b4e      	ldr	r3, [pc, #312]	; (8000594 <fsm_automatic_run+0x268>)
 800045a:	2201      	movs	r2, #1
 800045c:	601a      	str	r2, [r3, #0]
				led_buffer[0] = led_buffer[3] = time4Run[2];
 800045e:	4b4e      	ldr	r3, [pc, #312]	; (8000598 <fsm_automatic_run+0x26c>)
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	4a50      	ldr	r2, [pc, #320]	; (80005a4 <fsm_automatic_run+0x278>)
 8000464:	60d3      	str	r3, [r2, #12]
 8000466:	4b4f      	ldr	r3, [pc, #316]	; (80005a4 <fsm_automatic_run+0x278>)
 8000468:	68db      	ldr	r3, [r3, #12]
 800046a:	4a4e      	ldr	r2, [pc, #312]	; (80005a4 <fsm_automatic_run+0x278>)
 800046c:	6013      	str	r3, [r2, #0]
				setTimer1((time4Run[2])*1000);
 800046e:	4b4a      	ldr	r3, [pc, #296]	; (8000598 <fsm_automatic_run+0x26c>)
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000476:	fb02 f303 	mul.w	r3, r2, r3
 800047a:	4618      	mov	r0, r3
 800047c:	f000 fdba 	bl	8000ff4 <setTimer1>
			}
			break;
 8000480:	e005      	b.n	800048e <fsm_automatic_run+0x162>

		default:
			break;
 8000482:	bf00      	nop
 8000484:	e004      	b.n	8000490 <fsm_automatic_run+0x164>
			break;
 8000486:	bf00      	nop
 8000488:	e002      	b.n	8000490 <fsm_automatic_run+0x164>
			break;
 800048a:	bf00      	nop
 800048c:	e000      	b.n	8000490 <fsm_automatic_run+0x164>
			break;
 800048e:	bf00      	nop
	}

	switch (anotherstatus) {
 8000490:	4b42      	ldr	r3, [pc, #264]	; (800059c <fsm_automatic_run+0x270>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b03      	cmp	r3, #3
 8000496:	d874      	bhi.n	8000582 <fsm_automatic_run+0x256>
 8000498:	a201      	add	r2, pc, #4	; (adr r2, 80004a0 <fsm_automatic_run+0x174>)
 800049a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800049e:	bf00      	nop
 80004a0:	080004b1 	.word	0x080004b1
 80004a4:	080004cf 	.word	0x080004cf
 80004a8:	0800050b 	.word	0x0800050b
 80004ac:	08000547 	.word	0x08000547
		case INIT:
			anotherclearLight();
 80004b0:	f000 ff8a 	bl	80013c8 <anotherclearLight>
			anotherstatus = AUTO_GREEN;
 80004b4:	4b39      	ldr	r3, [pc, #228]	; (800059c <fsm_automatic_run+0x270>)
 80004b6:	2202      	movs	r2, #2
 80004b8:	601a      	str	r2, [r3, #0]
			setTimer3(time4Run[0]*1000);
 80004ba:	4b37      	ldr	r3, [pc, #220]	; (8000598 <fsm_automatic_run+0x26c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004c2:	fb02 f303 	mul.w	r3, r2, r3
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 fdc8 	bl	800105c <setTimer3>
			break;
 80004cc:	e060      	b.n	8000590 <fsm_automatic_run+0x264>

		case AUTO_RED:
			anotherturnLightOn(LED_RED);
 80004ce:	2000      	movs	r0, #0
 80004d0:	f000 ff34 	bl	800133c <anotherturnLightOn>
			updateVal7SEG();
 80004d4:	f000 fcca 	bl	8000e6c <updateVal7SEG>
			if (timer3_flag == 1) {
 80004d8:	4b33      	ldr	r3, [pc, #204]	; (80005a8 <fsm_automatic_run+0x27c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d152      	bne.n	8000586 <fsm_automatic_run+0x25a>
				anotherstatus = AUTO_GREEN;
 80004e0:	4b2e      	ldr	r3, [pc, #184]	; (800059c <fsm_automatic_run+0x270>)
 80004e2:	2202      	movs	r2, #2
 80004e4:	601a      	str	r2, [r3, #0]
				led_buffer[1] = led_buffer[2] = time4Run[0];
 80004e6:	4b2c      	ldr	r3, [pc, #176]	; (8000598 <fsm_automatic_run+0x26c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a2e      	ldr	r2, [pc, #184]	; (80005a4 <fsm_automatic_run+0x278>)
 80004ec:	6093      	str	r3, [r2, #8]
 80004ee:	4b2d      	ldr	r3, [pc, #180]	; (80005a4 <fsm_automatic_run+0x278>)
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	4a2c      	ldr	r2, [pc, #176]	; (80005a4 <fsm_automatic_run+0x278>)
 80004f4:	6053      	str	r3, [r2, #4]
				setTimer3(time4Run[0]*1000);
 80004f6:	4b28      	ldr	r3, [pc, #160]	; (8000598 <fsm_automatic_run+0x26c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004fe:	fb02 f303 	mul.w	r3, r2, r3
 8000502:	4618      	mov	r0, r3
 8000504:	f000 fdaa 	bl	800105c <setTimer3>
			}
			break;
 8000508:	e03d      	b.n	8000586 <fsm_automatic_run+0x25a>

		case AUTO_GREEN:
			anotherturnLightOn(LED_GREEN);
 800050a:	2001      	movs	r0, #1
 800050c:	f000 ff16 	bl	800133c <anotherturnLightOn>
			updateVal7SEG();
 8000510:	f000 fcac 	bl	8000e6c <updateVal7SEG>
			if (timer3_flag == 1) {
 8000514:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <fsm_automatic_run+0x27c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d136      	bne.n	800058a <fsm_automatic_run+0x25e>
				anotherstatus = AUTO_YELLOW;
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <fsm_automatic_run+0x270>)
 800051e:	2203      	movs	r2, #3
 8000520:	601a      	str	r2, [r3, #0]
				led_buffer[1] = led_buffer[2] = time4Run[1];
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <fsm_automatic_run+0x26c>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	4a1f      	ldr	r2, [pc, #124]	; (80005a4 <fsm_automatic_run+0x278>)
 8000528:	6093      	str	r3, [r2, #8]
 800052a:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <fsm_automatic_run+0x278>)
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	4a1d      	ldr	r2, [pc, #116]	; (80005a4 <fsm_automatic_run+0x278>)
 8000530:	6053      	str	r3, [r2, #4]
				setTimer3(time4Run[1]*1000);
 8000532:	4b19      	ldr	r3, [pc, #100]	; (8000598 <fsm_automatic_run+0x26c>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800053a:	fb02 f303 	mul.w	r3, r2, r3
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fd8c 	bl	800105c <setTimer3>
			}
			break;
 8000544:	e021      	b.n	800058a <fsm_automatic_run+0x25e>

		case AUTO_YELLOW:
			anotherturnLightOn(LED_YELLOW);
 8000546:	2002      	movs	r0, #2
 8000548:	f000 fef8 	bl	800133c <anotherturnLightOn>
			updateVal7SEG();
 800054c:	f000 fc8e 	bl	8000e6c <updateVal7SEG>
			if (timer3_flag == 1) {
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <fsm_automatic_run+0x27c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d11a      	bne.n	800058e <fsm_automatic_run+0x262>
				anotherstatus = AUTO_RED;
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <fsm_automatic_run+0x270>)
 800055a:	2201      	movs	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
				led_buffer[1] = led_buffer[2] = time4Run[2];
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <fsm_automatic_run+0x26c>)
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <fsm_automatic_run+0x278>)
 8000564:	6093      	str	r3, [r2, #8]
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <fsm_automatic_run+0x278>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <fsm_automatic_run+0x278>)
 800056c:	6053      	str	r3, [r2, #4]
				setTimer3(time4Run[2]*1000);
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <fsm_automatic_run+0x26c>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000576:	fb02 f303 	mul.w	r3, r2, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fd6e 	bl	800105c <setTimer3>
			}
			break;
 8000580:	e005      	b.n	800058e <fsm_automatic_run+0x262>

		default:
			break;
 8000582:	bf00      	nop
 8000584:	e004      	b.n	8000590 <fsm_automatic_run+0x264>
			break;
 8000586:	bf00      	nop
 8000588:	e002      	b.n	8000590 <fsm_automatic_run+0x264>
			break;
 800058a:	bf00      	nop
 800058c:	e000      	b.n	8000590 <fsm_automatic_run+0x264>
			break;
 800058e:	bf00      	nop
	}
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200000a4 	.word	0x200000a4
 8000598:	20000044 	.word	0x20000044
 800059c:	200000a8 	.word	0x200000a8
 80005a0:	2000011c 	.word	0x2000011c
 80005a4:	20000050 	.word	0x20000050
 80005a8:	2000012c 	.word	0x2000012c

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 ff3c 	bl	800142c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f822 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f8a8 	bl	800070c <MX_GPIO_Init>
  MX_TIM2_Init();
 80005bc:	f000 f85a 	bl	8000674 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <main+0x44>)
 80005c2:	f001 fe9f 	bl	8002304 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  status = INIT;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <main+0x48>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
  anotherstatus = INIT;
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <main+0x4c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]

  setTimer4(10);
 80005d2:	200a      	movs	r0, #10
 80005d4:	f000 fd5c 	bl	8001090 <setTimer4>
  setTimer5(1000);
 80005d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005dc:	f000 fd72 	bl	80010c4 <setTimer5>

  while (1)
  {
	  mode2();
 80005e0:	f000 f908 	bl	80007f4 <mode2>
	  scan7SEG();
 80005e4:	f000 fc86 	bl	8000ef4 <scan7SEG>
	  fsm_automatic_run();
 80005e8:	f7ff fea0 	bl	800032c <fsm_automatic_run>
	  mode2();
 80005ec:	e7f8      	b.n	80005e0 <main+0x34>
 80005ee:	bf00      	nop
 80005f0:	200000ac 	.word	0x200000ac
 80005f4:	200000a4 	.word	0x200000a4
 80005f8:	200000a8 	.word	0x200000a8

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b090      	sub	sp, #64	; 0x40
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0318 	add.w	r3, r7, #24
 8000606:	2228      	movs	r2, #40	; 0x28
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fa32 	bl	8002a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061e:	2302      	movs	r3, #2
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000622:	2301      	movs	r3, #1
 8000624:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000626:	2310      	movs	r3, #16
 8000628:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062a:	2300      	movs	r3, #0
 800062c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	4618      	mov	r0, r3
 8000634:	f001 fa2e 	bl	8001a94 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800063e:	f000 f8d3 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fc9c 	bl	8001f98 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000666:	f000 f8bf 	bl	80007e8 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3740      	adds	r7, #64	; 0x40
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_TIM2_Init+0x94>)
 8000692:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000696:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_TIM2_Init+0x94>)
 800069a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800069e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <MX_TIM2_Init+0x94>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_TIM2_Init+0x94>)
 80006a8:	2209      	movs	r2, #9
 80006aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_TIM2_Init+0x94>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_TIM2_Init+0x94>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006b8:	4813      	ldr	r0, [pc, #76]	; (8000708 <MX_TIM2_Init+0x94>)
 80006ba:	f001 fdd3 	bl	8002264 <HAL_TIM_Base_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006c4:	f000 f890 	bl	80007e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4619      	mov	r1, r3
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <MX_TIM2_Init+0x94>)
 80006d6:	f001 ff69 	bl	80025ac <HAL_TIM_ConfigClockSource>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006e0:	f000 f882 	bl	80007e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_TIM2_Init+0x94>)
 80006f2:	f002 f931 	bl	8002958 <HAL_TIMEx_MasterConfigSynchronization>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006fc:	f000 f874 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000ac 	.word	0x200000ac

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <MX_GPIO_Init+0xb8>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a27      	ldr	r2, [pc, #156]	; (80007c4 <MX_GPIO_Init+0xb8>)
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <MX_GPIO_Init+0xb8>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0304 	and.w	r3, r3, #4
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <MX_GPIO_Init+0xb8>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <MX_GPIO_Init+0xb8>)
 800073e:	f043 0308 	orr.w	r3, r3, #8
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_GPIO_Init+0xb8>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0308 	and.w	r3, r3, #8
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, output0_Pin|output1_Pin|output2_Pin|output3_Pin
 8000750:	2200      	movs	r2, #0
 8000752:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000756:	481c      	ldr	r0, [pc, #112]	; (80007c8 <MX_GPIO_Init+0xbc>)
 8000758:	f001 f96b 	bl	8001a32 <HAL_GPIO_WritePin>
                          |output4_Pin|output5_Pin|q0_Pin|q1_Pin
                          |seg0_Pin|seg1_Pin|seg2_Pin|seg3_Pin
                          |seg4_Pin|seg5_Pin|seg6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, aseg5_Pin|aseg6_Pin|q2_Pin|q3_Pin
 800075c:	2200      	movs	r2, #0
 800075e:	f640 71f8 	movw	r1, #4088	; 0xff8
 8000762:	481a      	ldr	r0, [pc, #104]	; (80007cc <MX_GPIO_Init+0xc0>)
 8000764:	f001 f965 	bl	8001a32 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : output0_Pin output1_Pin output2_Pin output3_Pin
                           output4_Pin output5_Pin q0_Pin q1_Pin
                           seg0_Pin seg1_Pin seg2_Pin seg3_Pin
                           seg4_Pin seg5_Pin seg6_Pin */
  GPIO_InitStruct.Pin = output0_Pin|output1_Pin|output2_Pin|output3_Pin
 8000768:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800076c:	60bb      	str	r3, [r7, #8]
                          |output4_Pin|output5_Pin|q0_Pin|q1_Pin
                          |seg0_Pin|seg1_Pin|seg2_Pin|seg3_Pin
                          |seg4_Pin|seg5_Pin|seg6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2302      	movs	r3, #2
 8000778:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	4619      	mov	r1, r3
 8000780:	4811      	ldr	r0, [pc, #68]	; (80007c8 <MX_GPIO_Init+0xbc>)
 8000782:	f000 ffc3 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : button0_Pin button1_Pin button2_Pin */
  GPIO_InitStruct.Pin = button0_Pin|button1_Pin|button2_Pin;
 8000786:	2307      	movs	r3, #7
 8000788:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	4619      	mov	r1, r3
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <MX_GPIO_Init+0xc0>)
 800079a:	f000 ffb7 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : aseg5_Pin aseg6_Pin q2_Pin q3_Pin
                           aseg0_Pin aseg1_Pin aseg2_Pin aseg3_Pin
                           aseg4_Pin */
  GPIO_InitStruct.Pin = aseg5_Pin|aseg6_Pin|q2_Pin|q3_Pin
 800079e:	f640 73f8 	movw	r3, #4088	; 0xff8
 80007a2:	60bb      	str	r3, [r7, #8]
                          |aseg0_Pin|aseg1_Pin|aseg2_Pin|aseg3_Pin
                          |aseg4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2302      	movs	r3, #2
 80007ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	4619      	mov	r1, r3
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_GPIO_Init+0xc0>)
 80007b8:	f000 ffa8 	bl	800170c <HAL_GPIO_Init>

}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010800 	.word	0x40010800
 80007cc:	40010c00 	.word	0x40010c00

080007d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	timerRun();
 80007d8:	f000 fc8e 	bl	80010f8 <timerRun>
	getKeyInput();
 80007dc:	f7ff fcfa 	bl	80001d4 <getKeyInput>
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <Error_Handler+0x8>
	...

080007f4 <mode2>:
 *      Author: LENOVO
 */

#include "mode2.h"

void mode2() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
	switch (status) {
 80007fa:	4b97      	ldr	r3, [pc, #604]	; (8000a58 <mode2+0x264>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b0e      	cmp	r3, #14
 8000800:	f000 8156 	beq.w	8000ab0 <mode2+0x2bc>
 8000804:	2b0e      	cmp	r3, #14
 8000806:	f300 81f3 	bgt.w	8000bf0 <mode2+0x3fc>
 800080a:	2b0c      	cmp	r3, #12
 800080c:	d003      	beq.n	8000816 <mode2+0x22>
 800080e:	2b0d      	cmp	r3, #13
 8000810:	f000 80a0 	beq.w	8000954 <mode2+0x160>
				led_buffer[1] = led_buffer[2] = time4Run[0];
			}
			break;

		default:
			break;
 8000814:	e1ec      	b.n	8000bf0 <mode2+0x3fc>
			setTimer2(10);
 8000816:	200a      	movs	r0, #10
 8000818:	f000 fc06 	bl	8001028 <setTimer2>
			updateVal7SEG();
 800081c:	f000 fb26 	bl	8000e6c <updateVal7SEG>
			blinkyLed(LED_RED);
 8000820:	2000      	movs	r0, #0
 8000822:	f000 fbb3 	bl	8000f8c <blinkyLed>
			led_buffer[1] = led_fake[1] = 2;
 8000826:	4b8d      	ldr	r3, [pc, #564]	; (8000a5c <mode2+0x268>)
 8000828:	2202      	movs	r2, #2
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	4b8b      	ldr	r3, [pc, #556]	; (8000a5c <mode2+0x268>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a8b      	ldr	r2, [pc, #556]	; (8000a60 <mode2+0x26c>)
 8000832:	6053      	str	r3, [r2, #4]
			if (isButtonPressed(0) || isButtonLPressed(0)) status = MAN_YELLOW;
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff fc89 	bl	800014c <isButtonPressed>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d105      	bne.n	800084c <mode2+0x58>
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff fc9d 	bl	8000180 <isButtonLPressed>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d002      	beq.n	8000852 <mode2+0x5e>
 800084c:	4b82      	ldr	r3, [pc, #520]	; (8000a58 <mode2+0x264>)
 800084e:	220e      	movs	r2, #14
 8000850:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(1) || isButtonLPressed(1)) {
 8000852:	2001      	movs	r0, #1
 8000854:	f7ff fc7a 	bl	800014c <isButtonPressed>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d105      	bne.n	800086a <mode2+0x76>
 800085e:	2001      	movs	r0, #1
 8000860:	f7ff fc8e 	bl	8000180 <isButtonLPressed>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d01b      	beq.n	80008a2 <mode2+0xae>
				if (led_fake[3] >= 9) {
 800086a:	4b7c      	ldr	r3, [pc, #496]	; (8000a5c <mode2+0x268>)
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	2b08      	cmp	r3, #8
 8000870:	dd07      	ble.n	8000882 <mode2+0x8e>
					++led_fake[2];
 8000872:	4b7a      	ldr	r3, [pc, #488]	; (8000a5c <mode2+0x268>)
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	3301      	adds	r3, #1
 8000878:	4a78      	ldr	r2, [pc, #480]	; (8000a5c <mode2+0x268>)
 800087a:	6093      	str	r3, [r2, #8]
					led_fake[3] = 0;
 800087c:	4b77      	ldr	r3, [pc, #476]	; (8000a5c <mode2+0x268>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
				if (led_fake[2] >= 9) {
 8000882:	4b76      	ldr	r3, [pc, #472]	; (8000a5c <mode2+0x268>)
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	2b08      	cmp	r3, #8
 8000888:	dd06      	ble.n	8000898 <mode2+0xa4>
					led_fake[2] = 0;
 800088a:	4b74      	ldr	r3, [pc, #464]	; (8000a5c <mode2+0x268>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
					led_fake[3] = 1;
 8000890:	4b72      	ldr	r3, [pc, #456]	; (8000a5c <mode2+0x268>)
 8000892:	2201      	movs	r2, #1
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	e004      	b.n	80008a2 <mode2+0xae>
				else ++led_fake[3];
 8000898:	4b70      	ldr	r3, [pc, #448]	; (8000a5c <mode2+0x268>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	3301      	adds	r3, #1
 800089e:	4a6f      	ldr	r2, [pc, #444]	; (8000a5c <mode2+0x268>)
 80008a0:	60d3      	str	r3, [r2, #12]
			if (led_fake[2] != 0) led_buffer[2] = led_fake[2];
 80008a2:	4b6e      	ldr	r3, [pc, #440]	; (8000a5c <mode2+0x268>)
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d003      	beq.n	80008b2 <mode2+0xbe>
 80008aa:	4b6c      	ldr	r3, [pc, #432]	; (8000a5c <mode2+0x268>)
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	4a6c      	ldr	r2, [pc, #432]	; (8000a60 <mode2+0x26c>)
 80008b0:	6093      	str	r3, [r2, #8]
			if (led_fake[3] != 0) led_buffer[3] = led_fake[3];
 80008b2:	4b6a      	ldr	r3, [pc, #424]	; (8000a5c <mode2+0x268>)
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d003      	beq.n	80008c2 <mode2+0xce>
 80008ba:	4b68      	ldr	r3, [pc, #416]	; (8000a5c <mode2+0x268>)
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	4a68      	ldr	r2, [pc, #416]	; (8000a60 <mode2+0x26c>)
 80008c0:	60d3      	str	r3, [r2, #12]
			if (isButtonPressed(2) || isButtonLPressed(2)) {
 80008c2:	2002      	movs	r0, #2
 80008c4:	f7ff fc42 	bl	800014c <isButtonPressed>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d106      	bne.n	80008dc <mode2+0xe8>
 80008ce:	2002      	movs	r0, #2
 80008d0:	f7ff fc56 	bl	8000180 <isButtonLPressed>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	f000 818c 	beq.w	8000bf4 <mode2+0x400>
				status = INIT;
 80008dc:	4b5e      	ldr	r3, [pc, #376]	; (8000a58 <mode2+0x264>)
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
				if (led_fake[2] != 0 && led_fake[3] != 0) time4Run[2] = led_fake[2]*10 + led_fake[3];
 80008e2:	4b5e      	ldr	r3, [pc, #376]	; (8000a5c <mode2+0x268>)
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00f      	beq.n	800090a <mode2+0x116>
 80008ea:	4b5c      	ldr	r3, [pc, #368]	; (8000a5c <mode2+0x268>)
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d00b      	beq.n	800090a <mode2+0x116>
 80008f2:	4b5a      	ldr	r3, [pc, #360]	; (8000a5c <mode2+0x268>)
 80008f4:	689a      	ldr	r2, [r3, #8]
 80008f6:	4613      	mov	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	461a      	mov	r2, r3
 8000900:	4b56      	ldr	r3, [pc, #344]	; (8000a5c <mode2+0x268>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	4413      	add	r3, r2
 8000906:	4a57      	ldr	r2, [pc, #348]	; (8000a64 <mode2+0x270>)
 8000908:	6093      	str	r3, [r2, #8]
				for (int i = 0; i < 4; i++) led_fake[i] = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	e007      	b.n	8000920 <mode2+0x12c>
 8000910:	4a52      	ldr	r2, [pc, #328]	; (8000a5c <mode2+0x268>)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2100      	movs	r1, #0
 8000916:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3301      	adds	r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b03      	cmp	r3, #3
 8000924:	ddf4      	ble.n	8000910 <mode2+0x11c>
				status = INIT;
 8000926:	4b4c      	ldr	r3, [pc, #304]	; (8000a58 <mode2+0x264>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
				anotherstatus = INIT;
 800092c:	4b4e      	ldr	r3, [pc, #312]	; (8000a68 <mode2+0x274>)
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
				led_buffer[0] = led_buffer[3] = time4Run[2];
 8000932:	4b4c      	ldr	r3, [pc, #304]	; (8000a64 <mode2+0x270>)
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	4a4a      	ldr	r2, [pc, #296]	; (8000a60 <mode2+0x26c>)
 8000938:	60d3      	str	r3, [r2, #12]
 800093a:	4b49      	ldr	r3, [pc, #292]	; (8000a60 <mode2+0x26c>)
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	4a48      	ldr	r2, [pc, #288]	; (8000a60 <mode2+0x26c>)
 8000940:	6013      	str	r3, [r2, #0]
				led_buffer[1] = led_buffer[2] = time4Run[0];
 8000942:	4b48      	ldr	r3, [pc, #288]	; (8000a64 <mode2+0x270>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a46      	ldr	r2, [pc, #280]	; (8000a60 <mode2+0x26c>)
 8000948:	6093      	str	r3, [r2, #8]
 800094a:	4b45      	ldr	r3, [pc, #276]	; (8000a60 <mode2+0x26c>)
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	4a44      	ldr	r2, [pc, #272]	; (8000a60 <mode2+0x26c>)
 8000950:	6053      	str	r3, [r2, #4]
			break;
 8000952:	e14f      	b.n	8000bf4 <mode2+0x400>
			setTimer2(10);
 8000954:	200a      	movs	r0, #10
 8000956:	f000 fb67 	bl	8001028 <setTimer2>
			clearLight();
 800095a:	f000 fd29 	bl	80013b0 <clearLight>
			updateVal7SEG();
 800095e:	f000 fa85 	bl	8000e6c <updateVal7SEG>
			anotherclearLight();
 8000962:	f000 fd31 	bl	80013c8 <anotherclearLight>
			blinkyLed(LED_GREEN);
 8000966:	2001      	movs	r0, #1
 8000968:	f000 fb10 	bl	8000f8c <blinkyLed>
			led_buffer[1] = led_fake[1] = 4;
 800096c:	4b3b      	ldr	r3, [pc, #236]	; (8000a5c <mode2+0x268>)
 800096e:	2204      	movs	r2, #4
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	4b3a      	ldr	r3, [pc, #232]	; (8000a5c <mode2+0x268>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4a3a      	ldr	r2, [pc, #232]	; (8000a60 <mode2+0x26c>)
 8000978:	6053      	str	r3, [r2, #4]
			if (isButtonPressed(0) || isButtonLPressed(0)) status = INIT;
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff fbe6 	bl	800014c <isButtonPressed>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d105      	bne.n	8000992 <mode2+0x19e>
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff fbfa 	bl	8000180 <isButtonLPressed>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d002      	beq.n	8000998 <mode2+0x1a4>
 8000992:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <mode2+0x264>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(1) || isButtonLPressed(1)) {
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff fbd7 	bl	800014c <isButtonPressed>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d105      	bne.n	80009b0 <mode2+0x1bc>
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff fbeb 	bl	8000180 <isButtonLPressed>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d01b      	beq.n	80009e8 <mode2+0x1f4>
				if (led_fake[3] >= 9) {
 80009b0:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <mode2+0x268>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	2b08      	cmp	r3, #8
 80009b6:	dd07      	ble.n	80009c8 <mode2+0x1d4>
					++led_fake[2];
 80009b8:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <mode2+0x268>)
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	3301      	adds	r3, #1
 80009be:	4a27      	ldr	r2, [pc, #156]	; (8000a5c <mode2+0x268>)
 80009c0:	6093      	str	r3, [r2, #8]
					led_fake[3] = 0;
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <mode2+0x268>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
				if (led_fake[2] >= 9) {
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <mode2+0x268>)
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	2b08      	cmp	r3, #8
 80009ce:	dd06      	ble.n	80009de <mode2+0x1ea>
					led_fake[2] = 0;
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <mode2+0x268>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
					led_fake[3] = 1;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <mode2+0x268>)
 80009d8:	2201      	movs	r2, #1
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	e004      	b.n	80009e8 <mode2+0x1f4>
				else ++led_fake[3];
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <mode2+0x268>)
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	3301      	adds	r3, #1
 80009e4:	4a1d      	ldr	r2, [pc, #116]	; (8000a5c <mode2+0x268>)
 80009e6:	60d3      	str	r3, [r2, #12]
			if (led_fake[2] != 0) led_buffer[2] = led_fake[2];
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <mode2+0x268>)
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d003      	beq.n	80009f8 <mode2+0x204>
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <mode2+0x268>)
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	4a1a      	ldr	r2, [pc, #104]	; (8000a60 <mode2+0x26c>)
 80009f6:	6093      	str	r3, [r2, #8]
			if (led_fake[3] != 0) led_buffer[3] = led_fake[3];
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <mode2+0x268>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d003      	beq.n	8000a08 <mode2+0x214>
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <mode2+0x268>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	4a16      	ldr	r2, [pc, #88]	; (8000a60 <mode2+0x26c>)
 8000a06:	60d3      	str	r3, [r2, #12]
			if (isButtonPressed(2) || isButtonLPressed(2)) {
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f7ff fb9f 	bl	800014c <isButtonPressed>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d106      	bne.n	8000a22 <mode2+0x22e>
 8000a14:	2002      	movs	r0, #2
 8000a16:	f7ff fbb3 	bl	8000180 <isButtonLPressed>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	f000 80eb 	beq.w	8000bf8 <mode2+0x404>
				status = INIT;
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <mode2+0x264>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
				if (led_fake[2] != 0 && led_fake[3] != 0) time4Run[0] = led_fake[2]*10 + led_fake[3];
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <mode2+0x268>)
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00f      	beq.n	8000a50 <mode2+0x25c>
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <mode2+0x268>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d00b      	beq.n	8000a50 <mode2+0x25c>
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <mode2+0x268>)
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	4413      	add	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <mode2+0x268>)
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <mode2+0x270>)
 8000a4e:	6013      	str	r3, [r2, #0]
				for (int i = 0; i < 4; i++) led_fake[i] = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	e012      	b.n	8000a7c <mode2+0x288>
 8000a56:	bf00      	nop
 8000a58:	200000a4 	.word	0x200000a4
 8000a5c:	200000f4 	.word	0x200000f4
 8000a60:	20000050 	.word	0x20000050
 8000a64:	20000044 	.word	0x20000044
 8000a68:	200000a8 	.word	0x200000a8
 8000a6c:	4a66      	ldr	r2, [pc, #408]	; (8000c08 <mode2+0x414>)
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	2100      	movs	r1, #0
 8000a72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	ddf4      	ble.n	8000a6c <mode2+0x278>
				status = INIT;
 8000a82:	4b62      	ldr	r3, [pc, #392]	; (8000c0c <mode2+0x418>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
				anotherstatus = INIT;
 8000a88:	4b61      	ldr	r3, [pc, #388]	; (8000c10 <mode2+0x41c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
				led_buffer[0] = led_buffer[3] = time4Run[2];
 8000a8e:	4b61      	ldr	r3, [pc, #388]	; (8000c14 <mode2+0x420>)
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	4a61      	ldr	r2, [pc, #388]	; (8000c18 <mode2+0x424>)
 8000a94:	60d3      	str	r3, [r2, #12]
 8000a96:	4b60      	ldr	r3, [pc, #384]	; (8000c18 <mode2+0x424>)
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	4a5f      	ldr	r2, [pc, #380]	; (8000c18 <mode2+0x424>)
 8000a9c:	6013      	str	r3, [r2, #0]
				led_buffer[1] = led_buffer[2] = time4Run[0];
 8000a9e:	4b5d      	ldr	r3, [pc, #372]	; (8000c14 <mode2+0x420>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a5d      	ldr	r2, [pc, #372]	; (8000c18 <mode2+0x424>)
 8000aa4:	6093      	str	r3, [r2, #8]
 8000aa6:	4b5c      	ldr	r3, [pc, #368]	; (8000c18 <mode2+0x424>)
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	4a5b      	ldr	r2, [pc, #364]	; (8000c18 <mode2+0x424>)
 8000aac:	6053      	str	r3, [r2, #4]
			break;
 8000aae:	e0a3      	b.n	8000bf8 <mode2+0x404>
			setTimer2(10);
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	f000 fab9 	bl	8001028 <setTimer2>
			clearLight();
 8000ab6:	f000 fc7b 	bl	80013b0 <clearLight>
			anotherclearLight();
 8000aba:	f000 fc85 	bl	80013c8 <anotherclearLight>
			blinkyLed(LED_YELLOW);
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f000 fa64 	bl	8000f8c <blinkyLed>
			led_buffer[1] = led_fake[1] = 3;
 8000ac4:	4b50      	ldr	r3, [pc, #320]	; (8000c08 <mode2+0x414>)
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	4b4f      	ldr	r3, [pc, #316]	; (8000c08 <mode2+0x414>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	4a52      	ldr	r2, [pc, #328]	; (8000c18 <mode2+0x424>)
 8000ad0:	6053      	str	r3, [r2, #4]
			if (isButtonPressed(0) || isButtonLPressed(0)) status = MAN_GREEN;
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff fb3a 	bl	800014c <isButtonPressed>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d105      	bne.n	8000aea <mode2+0x2f6>
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f7ff fb4e 	bl	8000180 <isButtonLPressed>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d002      	beq.n	8000af0 <mode2+0x2fc>
 8000aea:	4b48      	ldr	r3, [pc, #288]	; (8000c0c <mode2+0x418>)
 8000aec:	220d      	movs	r2, #13
 8000aee:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(1) || isButtonLPressed(1)) {
 8000af0:	2001      	movs	r0, #1
 8000af2:	f7ff fb2b 	bl	800014c <isButtonPressed>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d105      	bne.n	8000b08 <mode2+0x314>
 8000afc:	2001      	movs	r0, #1
 8000afe:	f7ff fb3f 	bl	8000180 <isButtonLPressed>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d01b      	beq.n	8000b40 <mode2+0x34c>
				if (led_fake[3] >= 9) {
 8000b08:	4b3f      	ldr	r3, [pc, #252]	; (8000c08 <mode2+0x414>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	2b08      	cmp	r3, #8
 8000b0e:	dd07      	ble.n	8000b20 <mode2+0x32c>
					++led_fake[2];
 8000b10:	4b3d      	ldr	r3, [pc, #244]	; (8000c08 <mode2+0x414>)
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	3301      	adds	r3, #1
 8000b16:	4a3c      	ldr	r2, [pc, #240]	; (8000c08 <mode2+0x414>)
 8000b18:	6093      	str	r3, [r2, #8]
					led_fake[3] = 0;
 8000b1a:	4b3b      	ldr	r3, [pc, #236]	; (8000c08 <mode2+0x414>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
				if (led_fake[2] >= 9) {
 8000b20:	4b39      	ldr	r3, [pc, #228]	; (8000c08 <mode2+0x414>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	2b08      	cmp	r3, #8
 8000b26:	dd06      	ble.n	8000b36 <mode2+0x342>
					led_fake[2] = 0;
 8000b28:	4b37      	ldr	r3, [pc, #220]	; (8000c08 <mode2+0x414>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
					led_fake[3] = 1;
 8000b2e:	4b36      	ldr	r3, [pc, #216]	; (8000c08 <mode2+0x414>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	e004      	b.n	8000b40 <mode2+0x34c>
				else ++led_fake[3];
 8000b36:	4b34      	ldr	r3, [pc, #208]	; (8000c08 <mode2+0x414>)
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	4a32      	ldr	r2, [pc, #200]	; (8000c08 <mode2+0x414>)
 8000b3e:	60d3      	str	r3, [r2, #12]
			if (led_fake[2] != 0) led_buffer[2] = led_fake[2];
 8000b40:	4b31      	ldr	r3, [pc, #196]	; (8000c08 <mode2+0x414>)
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d003      	beq.n	8000b50 <mode2+0x35c>
 8000b48:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <mode2+0x414>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	4a32      	ldr	r2, [pc, #200]	; (8000c18 <mode2+0x424>)
 8000b4e:	6093      	str	r3, [r2, #8]
			if (led_fake[3] != 0) led_buffer[3] = led_fake[3];
 8000b50:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <mode2+0x414>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <mode2+0x36c>
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <mode2+0x414>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	4a2e      	ldr	r2, [pc, #184]	; (8000c18 <mode2+0x424>)
 8000b5e:	60d3      	str	r3, [r2, #12]
			if (isButtonPressed(2) || isButtonLPressed(2)) {
 8000b60:	2002      	movs	r0, #2
 8000b62:	f7ff faf3 	bl	800014c <isButtonPressed>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d105      	bne.n	8000b78 <mode2+0x384>
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f7ff fb07 	bl	8000180 <isButtonLPressed>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d041      	beq.n	8000bfc <mode2+0x408>
				status = INIT;
 8000b78:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <mode2+0x418>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
				if (led_fake[2] != 0 && led_fake[3] != 0) time4Run[1] = led_fake[2]*10 + led_fake[3];
 8000b7e:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <mode2+0x414>)
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00f      	beq.n	8000ba6 <mode2+0x3b2>
 8000b86:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <mode2+0x414>)
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d00b      	beq.n	8000ba6 <mode2+0x3b2>
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <mode2+0x414>)
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	4613      	mov	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <mode2+0x414>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <mode2+0x420>)
 8000ba4:	6053      	str	r3, [r2, #4]
				for (int i = 0; i < 4; i++) led_fake[i] = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	e007      	b.n	8000bbc <mode2+0x3c8>
 8000bac:	4a16      	ldr	r2, [pc, #88]	; (8000c08 <mode2+0x414>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	ddf4      	ble.n	8000bac <mode2+0x3b8>
				status = INIT;
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <mode2+0x418>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
				anotherstatus = INIT;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <mode2+0x41c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
				led_buffer[0] = led_buffer[3] = time4Run[2];
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <mode2+0x420>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <mode2+0x424>)
 8000bd4:	60d3      	str	r3, [r2, #12]
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <mode2+0x424>)
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <mode2+0x424>)
 8000bdc:	6013      	str	r3, [r2, #0]
				led_buffer[1] = led_buffer[2] = time4Run[0];
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <mode2+0x420>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <mode2+0x424>)
 8000be4:	6093      	str	r3, [r2, #8]
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <mode2+0x424>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <mode2+0x424>)
 8000bec:	6053      	str	r3, [r2, #4]
			break;
 8000bee:	e005      	b.n	8000bfc <mode2+0x408>
			break;
 8000bf0:	bf00      	nop
 8000bf2:	e004      	b.n	8000bfe <mode2+0x40a>
			break;
 8000bf4:	bf00      	nop
 8000bf6:	e002      	b.n	8000bfe <mode2+0x40a>
			break;
 8000bf8:	bf00      	nop
 8000bfa:	e000      	b.n	8000bfe <mode2+0x40a>
			break;
 8000bfc:	bf00      	nop
	}
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000f4 	.word	0x200000f4
 8000c0c:	200000a4 	.word	0x200000a4
 8000c10:	200000a8 	.word	0x200000a8
 8000c14:	20000044 	.word	0x20000044
 8000c18:	20000050 	.word	0x20000050

08000c1c <display7SEG>:
int led_fake[4] = {0,0,0,0};
int index_led = 0;
int mem = 3;
int remember[4] = {0,0,0,0};

void display7SEG(int num) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b09      	cmp	r3, #9
 8000c28:	f200 8094 	bhi.w	8000d54 <display7SEG+0x138>
 8000c2c:	a201      	add	r2, pc, #4	; (adr r2, 8000c34 <display7SEG+0x18>)
 8000c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c32:	bf00      	nop
 8000c34:	08000c5d 	.word	0x08000c5d
 8000c38:	08000c77 	.word	0x08000c77
 8000c3c:	08000c91 	.word	0x08000c91
 8000c40:	08000cab 	.word	0x08000cab
 8000c44:	08000cc5 	.word	0x08000cc5
 8000c48:	08000cdf 	.word	0x08000cdf
 8000c4c:	08000cf9 	.word	0x08000cf9
 8000c50:	08000d13 	.word	0x08000d13
 8000c54:	08000d2d 	.word	0x08000d2d
 8000c58:	08000d3b 	.word	0x08000d3b
		case 0:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg1_Pin|seg2_Pin|seg3_Pin|seg4_Pin|seg5_Pin, RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 8000c62:	483e      	ldr	r0, [pc, #248]	; (8000d5c <display7SEG+0x140>)
 8000c64:	f000 fee5 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c6e:	483b      	ldr	r0, [pc, #236]	; (8000d5c <display7SEG+0x140>)
 8000c70:	f000 fedf 	bl	8001a32 <HAL_GPIO_WritePin>
			break;
 8000c74:	e06e      	b.n	8000d54 <display7SEG+0x138>
		case 1:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg3_Pin|seg4_Pin|seg5_Pin|seg6_Pin, SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	f44f 41f2 	mov.w	r1, #30976	; 0x7900
 8000c7c:	4837      	ldr	r0, [pc, #220]	; (8000d5c <display7SEG+0x140>)
 8000c7e:	f000 fed8 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, seg1_Pin|seg2_Pin, RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000c88:	4834      	ldr	r0, [pc, #208]	; (8000d5c <display7SEG+0x140>)
 8000c8a:	f000 fed2 	bl	8001a32 <HAL_GPIO_WritePin>
			break;
 8000c8e:	e061      	b.n	8000d54 <display7SEG+0x138>
		case 2:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg3_Pin|seg4_Pin|seg1_Pin|seg6_Pin, RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8000c96:	4831      	ldr	r0, [pc, #196]	; (8000d5c <display7SEG+0x140>)
 8000c98:	f000 fecb 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, seg5_Pin|seg2_Pin, SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000ca2:	482e      	ldr	r0, [pc, #184]	; (8000d5c <display7SEG+0x140>)
 8000ca4:	f000 fec5 	bl	8001a32 <HAL_GPIO_WritePin>
			break;
 8000ca8:	e054      	b.n	8000d54 <display7SEG+0x138>
		case 3:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg3_Pin|seg1_Pin|seg2_Pin|seg6_Pin, RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 419e 	mov.w	r1, #20224	; 0x4f00
 8000cb0:	482a      	ldr	r0, [pc, #168]	; (8000d5c <display7SEG+0x140>)
 8000cb2:	f000 febe 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, seg4_Pin|seg5_Pin, SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000cbc:	4827      	ldr	r0, [pc, #156]	; (8000d5c <display7SEG+0x140>)
 8000cbe:	f000 feb8 	bl	8001a32 <HAL_GPIO_WritePin>
			break;
 8000cc2:	e047      	b.n	8000d54 <display7SEG+0x138>
		case 4:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg3_Pin|seg4_Pin, SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8000cca:	4824      	ldr	r0, [pc, #144]	; (8000d5c <display7SEG+0x140>)
 8000ccc:	f000 feb1 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, seg1_Pin|seg2_Pin|seg5_Pin|seg6_Pin, RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 41cc 	mov.w	r1, #26112	; 0x6600
 8000cd6:	4821      	ldr	r0, [pc, #132]	; (8000d5c <display7SEG+0x140>)
 8000cd8:	f000 feab 	bl	8001a32 <HAL_GPIO_WritePin>
			break;
 8000cdc:	e03a      	b.n	8000d54 <display7SEG+0x138>
		case 5:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg3_Pin|seg2_Pin|seg5_Pin|seg6_Pin, RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 41da 	mov.w	r1, #27904	; 0x6d00
 8000ce4:	481d      	ldr	r0, [pc, #116]	; (8000d5c <display7SEG+0x140>)
 8000ce6:	f000 fea4 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, seg1_Pin|seg4_Pin, SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000cf0:	481a      	ldr	r0, [pc, #104]	; (8000d5c <display7SEG+0x140>)
 8000cf2:	f000 fe9e 	bl	8001a32 <HAL_GPIO_WritePin>
			break;
 8000cf6:	e02d      	b.n	8000d54 <display7SEG+0x138>
		case 6:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg2_Pin|seg3_Pin|seg4_Pin|seg5_Pin|seg6_Pin, RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8000cfe:	4817      	ldr	r0, [pc, #92]	; (8000d5c <display7SEG+0x140>)
 8000d00:	f000 fe97 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d0a:	4814      	ldr	r0, [pc, #80]	; (8000d5c <display7SEG+0x140>)
 8000d0c:	f000 fe91 	bl	8001a32 <HAL_GPIO_WritePin>
			break;
 8000d10:	e020      	b.n	8000d54 <display7SEG+0x138>
		case 7:
			HAL_GPIO_WritePin(GPIOA, seg3_Pin|seg4_Pin|seg5_Pin|seg6_Pin, SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8000d18:	4810      	ldr	r0, [pc, #64]	; (8000d5c <display7SEG+0x140>)
 8000d1a:	f000 fe8a 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg1_Pin|seg2_Pin, RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <display7SEG+0x140>)
 8000d26:	f000 fe84 	bl	8001a32 <HAL_GPIO_WritePin>
			break;
 8000d2a:	e013      	b.n	8000d54 <display7SEG+0x138>
		case 8:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg1_Pin|seg2_Pin|seg3_Pin|seg4_Pin|seg5_Pin|seg6_Pin, RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8000d32:	480a      	ldr	r0, [pc, #40]	; (8000d5c <display7SEG+0x140>)
 8000d34:	f000 fe7d 	bl	8001a32 <HAL_GPIO_WritePin>
			break;
 8000d38:	e00c      	b.n	8000d54 <display7SEG+0x138>
		case 9:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg1_Pin|seg2_Pin|seg3_Pin|seg5_Pin|seg6_Pin, RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 8000d40:	4806      	ldr	r0, [pc, #24]	; (8000d5c <display7SEG+0x140>)
 8000d42:	f000 fe76 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <display7SEG+0x140>)
 8000d4e:	f000 fe70 	bl	8001a32 <HAL_GPIO_WritePin>
			break;
 8000d52:	bf00      	nop
	}
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40010800 	.word	0x40010800

08000d60 <update7SEG>:
			HAL_GPIO_WritePin(aseg4_GPIO_Port, aseg4_Pin, SET);
			break;
	}
}

void update7SEG (int index) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	switch (index) {
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d872      	bhi.n	8000e54 <update7SEG+0xf4>
 8000d6e:	a201      	add	r2, pc, #4	; (adr r2, 8000d74 <update7SEG+0x14>)
 8000d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d74:	08000d85 	.word	0x08000d85
 8000d78:	08000db9 	.word	0x08000db9
 8000d7c:	08000ded 	.word	0x08000ded
 8000d80:	08000e21 	.word	0x08000e21
		case 0:
			HAL_GPIO_WritePin(q0_GPIO_Port, q0_Pin, RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2140      	movs	r1, #64	; 0x40
 8000d88:	4835      	ldr	r0, [pc, #212]	; (8000e60 <update7SEG+0x100>)
 8000d8a:	f000 fe52 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q1_GPIO_Port, q1_Pin, SET);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	4833      	ldr	r0, [pc, #204]	; (8000e60 <update7SEG+0x100>)
 8000d94:	f000 fe4d 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q2_GPIO_Port, q2_Pin, SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2108      	movs	r1, #8
 8000d9c:	4831      	ldr	r0, [pc, #196]	; (8000e64 <update7SEG+0x104>)
 8000d9e:	f000 fe48 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q3_GPIO_Port, q3_Pin, SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2110      	movs	r1, #16
 8000da6:	482f      	ldr	r0, [pc, #188]	; (8000e64 <update7SEG+0x104>)
 8000da8:	f000 fe43 	bl	8001a32 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000dac:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <update7SEG+0x108>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff33 	bl	8000c1c <display7SEG>
			break;
 8000db6:	e04e      	b.n	8000e56 <update7SEG+0xf6>
		case 1:
			HAL_GPIO_WritePin(q0_GPIO_Port, q0_Pin, SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2140      	movs	r1, #64	; 0x40
 8000dbc:	4828      	ldr	r0, [pc, #160]	; (8000e60 <update7SEG+0x100>)
 8000dbe:	f000 fe38 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q1_GPIO_Port, q1_Pin, RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	4826      	ldr	r0, [pc, #152]	; (8000e60 <update7SEG+0x100>)
 8000dc8:	f000 fe33 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q2_GPIO_Port, q2_Pin, SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2108      	movs	r1, #8
 8000dd0:	4824      	ldr	r0, [pc, #144]	; (8000e64 <update7SEG+0x104>)
 8000dd2:	f000 fe2e 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q3_GPIO_Port, q3_Pin, SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2110      	movs	r1, #16
 8000dda:	4822      	ldr	r0, [pc, #136]	; (8000e64 <update7SEG+0x104>)
 8000ddc:	f000 fe29 	bl	8001a32 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000de0:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <update7SEG+0x108>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff19 	bl	8000c1c <display7SEG>
			break;
 8000dea:	e034      	b.n	8000e56 <update7SEG+0xf6>
		case 2:
			HAL_GPIO_WritePin(q0_GPIO_Port, q0_Pin, SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2140      	movs	r1, #64	; 0x40
 8000df0:	481b      	ldr	r0, [pc, #108]	; (8000e60 <update7SEG+0x100>)
 8000df2:	f000 fe1e 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q1_GPIO_Port, q1_Pin, SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	4819      	ldr	r0, [pc, #100]	; (8000e60 <update7SEG+0x100>)
 8000dfc:	f000 fe19 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q2_GPIO_Port, q2_Pin, RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2108      	movs	r1, #8
 8000e04:	4817      	ldr	r0, [pc, #92]	; (8000e64 <update7SEG+0x104>)
 8000e06:	f000 fe14 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q3_GPIO_Port, q3_Pin, SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4815      	ldr	r0, [pc, #84]	; (8000e64 <update7SEG+0x104>)
 8000e10:	f000 fe0f 	bl	8001a32 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <update7SEG+0x108>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff feff 	bl	8000c1c <display7SEG>
			break;
 8000e1e:	e01a      	b.n	8000e56 <update7SEG+0xf6>
		case 3:
			HAL_GPIO_WritePin(q0_GPIO_Port, q0_Pin, SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2140      	movs	r1, #64	; 0x40
 8000e24:	480e      	ldr	r0, [pc, #56]	; (8000e60 <update7SEG+0x100>)
 8000e26:	f000 fe04 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q1_GPIO_Port, q1_Pin, SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	480c      	ldr	r0, [pc, #48]	; (8000e60 <update7SEG+0x100>)
 8000e30:	f000 fdff 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q2_GPIO_Port, q2_Pin,	SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2108      	movs	r1, #8
 8000e38:	480a      	ldr	r0, [pc, #40]	; (8000e64 <update7SEG+0x104>)
 8000e3a:	f000 fdfa 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q3_GPIO_Port, q3_Pin, RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2110      	movs	r1, #16
 8000e42:	4808      	ldr	r0, [pc, #32]	; (8000e64 <update7SEG+0x104>)
 8000e44:	f000 fdf5 	bl	8001a32 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <update7SEG+0x108>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fee5 	bl	8000c1c <display7SEG>
			break;
 8000e52:	e000      	b.n	8000e56 <update7SEG+0xf6>
		default:
			break;
 8000e54:	bf00      	nop
	}
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40010800 	.word	0x40010800
 8000e64:	40010c00 	.word	0x40010c00
 8000e68:	20000050 	.word	0x20000050

08000e6c <updateVal7SEG>:

void updateVal7SEG() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
	  if (timer5_flag == 1) {
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <updateVal7SEG+0x7c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d131      	bne.n	8000ede <updateVal7SEG+0x72>
		  if (status == MAN_RED || status == MAN_GREEN || status == MAN_YELLOW || status == INIT) {
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <updateVal7SEG+0x80>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b0c      	cmp	r3, #12
 8000e80:	d00b      	beq.n	8000e9a <updateVal7SEG+0x2e>
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <updateVal7SEG+0x80>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b0d      	cmp	r3, #13
 8000e88:	d007      	beq.n	8000e9a <updateVal7SEG+0x2e>
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <updateVal7SEG+0x80>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b0e      	cmp	r3, #14
 8000e90:	d003      	beq.n	8000e9a <updateVal7SEG+0x2e>
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <updateVal7SEG+0x80>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10b      	bne.n	8000eb2 <updateVal7SEG+0x46>
			  led_buffer[0] = led_buffer[2] = led_buffer[3] = 0;
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <updateVal7SEG+0x84>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <updateVal7SEG+0x84>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <updateVal7SEG+0x84>)
 8000ea6:	6093      	str	r3, [r2, #8]
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <updateVal7SEG+0x84>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <updateVal7SEG+0x84>)
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	e011      	b.n	8000ed6 <updateVal7SEG+0x6a>
		  }
		  else for (int i = 0; i < 4; i++) --led_buffer[i];
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	e00b      	b.n	8000ed0 <updateVal7SEG+0x64>
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <updateVal7SEG+0x84>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec0:	1e5a      	subs	r2, r3, #1
 8000ec2:	490b      	ldr	r1, [pc, #44]	; (8000ef0 <updateVal7SEG+0x84>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	ddf0      	ble.n	8000eb8 <updateVal7SEG+0x4c>
//			  if (led_buffer[i] > 1) --led_buffer[i];
//			  else led_buffer[i] = 1;
		  setTimer5(1000);
 8000ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eda:	f000 f8f3 	bl	80010c4 <setTimer5>
	  }
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000013c 	.word	0x2000013c
 8000eec:	200000a4 	.word	0x200000a4
 8000ef0:	20000050 	.word	0x20000050

08000ef4 <scan7SEG>:

void scan7SEG() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	  if (timer4_flag == 1) {
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <scan7SEG+0x84>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d139      	bne.n	8000f74 <scan7SEG+0x80>
		  if (index_led >= 4) index_led = 0;
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <scan7SEG+0x88>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	dd02      	ble.n	8000f0e <scan7SEG+0x1a>
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <scan7SEG+0x88>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
		  remember[index_led] = led_buffer[index_led]%10;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <scan7SEG+0x88>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a1b      	ldr	r2, [pc, #108]	; (8000f80 <scan7SEG+0x8c>)
 8000f14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <scan7SEG+0x88>)
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <scan7SEG+0x90>)
 8000f1e:	fb83 2301 	smull	r2, r3, r3, r1
 8000f22:	109a      	asrs	r2, r3, #2
 8000f24:	17cb      	asrs	r3, r1, #31
 8000f26:	1ad2      	subs	r2, r2, r3
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	1aca      	subs	r2, r1, r3
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <scan7SEG+0x94>)
 8000f34:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		  led_buffer[index_led] > 9 ? display7SEG(remember[index_led++]): update7SEG(index_led++);
 8000f38:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <scan7SEG+0x88>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <scan7SEG+0x8c>)
 8000f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f42:	2b09      	cmp	r3, #9
 8000f44:	dd0b      	ble.n	8000f5e <scan7SEG+0x6a>
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <scan7SEG+0x88>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	490b      	ldr	r1, [pc, #44]	; (8000f7c <scan7SEG+0x88>)
 8000f4e:	600a      	str	r2, [r1, #0]
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <scan7SEG+0x94>)
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fe60 	bl	8000c1c <display7SEG>
 8000f5c:	e007      	b.n	8000f6e <scan7SEG+0x7a>
 8000f5e:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <scan7SEG+0x88>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	4905      	ldr	r1, [pc, #20]	; (8000f7c <scan7SEG+0x88>)
 8000f66:	600a      	str	r2, [r1, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fef9 	bl	8000d60 <update7SEG>
		  setTimer4(200);
 8000f6e:	20c8      	movs	r0, #200	; 0xc8
 8000f70:	f000 f88e 	bl	8001090 <setTimer4>
	  }
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000134 	.word	0x20000134
 8000f7c:	20000104 	.word	0x20000104
 8000f80:	20000050 	.word	0x20000050
 8000f84:	66666667 	.word	0x66666667
 8000f88:	20000108 	.word	0x20000108

08000f8c <blinkyLed>:

void blinkyLed(int led) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	if (timer2_flag) {
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <blinkyLed+0x60>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d01b      	beq.n	8000fd4 <blinkyLed+0x48>
		switch (led) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d013      	beq.n	8000fca <blinkyLed+0x3e>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	dc17      	bgt.n	8000fd8 <blinkyLed+0x4c>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <blinkyLed+0x2a>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d005      	beq.n	8000fc0 <blinkyLed+0x34>
			case LED_YELLOW:
				HAL_GPIO_TogglePin(GPIOA, output1_Pin | output4_Pin);
				break;

			default:
				break;
 8000fb4:	e010      	b.n	8000fd8 <blinkyLed+0x4c>
				HAL_GPIO_TogglePin(GPIOA, output0_Pin | output3_Pin);
 8000fb6:	2109      	movs	r1, #9
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <blinkyLed+0x64>)
 8000fba:	f000 fd52 	bl	8001a62 <HAL_GPIO_TogglePin>
				break;
 8000fbe:	e00c      	b.n	8000fda <blinkyLed+0x4e>
				HAL_GPIO_TogglePin(GPIOA, output2_Pin | output5_Pin);
 8000fc0:	2124      	movs	r1, #36	; 0x24
 8000fc2:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <blinkyLed+0x64>)
 8000fc4:	f000 fd4d 	bl	8001a62 <HAL_GPIO_TogglePin>
				break;
 8000fc8:	e007      	b.n	8000fda <blinkyLed+0x4e>
				HAL_GPIO_TogglePin(GPIOA, output1_Pin | output4_Pin);
 8000fca:	2112      	movs	r1, #18
 8000fcc:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <blinkyLed+0x64>)
 8000fce:	f000 fd48 	bl	8001a62 <HAL_GPIO_TogglePin>
				break;
 8000fd2:	e002      	b.n	8000fda <blinkyLed+0x4e>
		}
	}
 8000fd4:	bf00      	nop
 8000fd6:	e000      	b.n	8000fda <blinkyLed+0x4e>
				break;
 8000fd8:	bf00      	nop
	setTimer2(500);
 8000fda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fde:	f000 f823 	bl	8001028 <setTimer2>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000124 	.word	0x20000124
 8000ff0:	40010800 	.word	0x40010800

08000ff4 <setTimer1>:
int timer4_flag = 0;
int timer5_counter = 0;
int timer5_flag = 0;
int TIMER_CYCLE = 10;

void setTimer1(int duration) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <setTimer1+0x28>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	fb92 f3f3 	sdiv	r3, r2, r3
 8001006:	4a06      	ldr	r2, [pc, #24]	; (8001020 <setTimer1+0x2c>)
 8001008:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <setTimer1+0x30>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000060 	.word	0x20000060
 8001020:	20000118 	.word	0x20000118
 8001024:	2000011c 	.word	0x2000011c

08001028 <setTimer2>:

void setTimer2(int duration) {
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <setTimer2+0x28>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	fb92 f3f3 	sdiv	r3, r2, r3
 800103a:	4a06      	ldr	r2, [pc, #24]	; (8001054 <setTimer2+0x2c>)
 800103c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <setTimer2+0x30>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000060 	.word	0x20000060
 8001054:	20000120 	.word	0x20000120
 8001058:	20000124 	.word	0x20000124

0800105c <setTimer3>:

void setTimer3(int duration) {
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <setTimer3+0x28>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	fb92 f3f3 	sdiv	r3, r2, r3
 800106e:	4a06      	ldr	r2, [pc, #24]	; (8001088 <setTimer3+0x2c>)
 8001070:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <setTimer3+0x30>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000060 	.word	0x20000060
 8001088:	20000128 	.word	0x20000128
 800108c:	2000012c 	.word	0x2000012c

08001090 <setTimer4>:

void setTimer4(int duration) {
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <setTimer4+0x28>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	fb92 f3f3 	sdiv	r3, r2, r3
 80010a2:	4a06      	ldr	r2, [pc, #24]	; (80010bc <setTimer4+0x2c>)
 80010a4:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <setTimer4+0x30>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000060 	.word	0x20000060
 80010bc:	20000130 	.word	0x20000130
 80010c0:	20000134 	.word	0x20000134

080010c4 <setTimer5>:

void setTimer5(int duration) {
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TIMER_CYCLE;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <setTimer5+0x28>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80010d6:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <setTimer5+0x2c>)
 80010d8:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <setTimer5+0x30>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000060 	.word	0x20000060
 80010f0:	20000138 	.word	0x20000138
 80010f4:	2000013c 	.word	0x2000013c

080010f8 <timerRun>:

void timerRun() {
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 80010fc:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <timerRun+0xac>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	dd0b      	ble.n	800111c <timerRun+0x24>
		timer1_counter--;
 8001104:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <timerRun+0xac>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3b01      	subs	r3, #1
 800110a:	4a26      	ldr	r2, [pc, #152]	; (80011a4 <timerRun+0xac>)
 800110c:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) timer1_flag = 1;
 800110e:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <timerRun+0xac>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	dc02      	bgt.n	800111c <timerRun+0x24>
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <timerRun+0xb0>)
 8001118:	2201      	movs	r2, #1
 800111a:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <timerRun+0xb4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	dd0b      	ble.n	800113c <timerRun+0x44>
		timer2_counter--;
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <timerRun+0xb4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3b01      	subs	r3, #1
 800112a:	4a20      	ldr	r2, [pc, #128]	; (80011ac <timerRun+0xb4>)
 800112c:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) timer2_flag = 1;
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <timerRun+0xb4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	dc02      	bgt.n	800113c <timerRun+0x44>
 8001136:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <timerRun+0xb8>)
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <timerRun+0xbc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	dd0b      	ble.n	800115c <timerRun+0x64>
		timer3_counter--;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <timerRun+0xbc>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3b01      	subs	r3, #1
 800114a:	4a1a      	ldr	r2, [pc, #104]	; (80011b4 <timerRun+0xbc>)
 800114c:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) timer3_flag = 1;
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <timerRun+0xbc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	dc02      	bgt.n	800115c <timerRun+0x64>
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <timerRun+0xc0>)
 8001158:	2201      	movs	r2, #1
 800115a:	601a      	str	r2, [r3, #0]
	}
	if (timer4_counter > 0) {
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <timerRun+0xc4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	dd0b      	ble.n	800117c <timerRun+0x84>
		timer4_counter--;
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <timerRun+0xc4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3b01      	subs	r3, #1
 800116a:	4a14      	ldr	r2, [pc, #80]	; (80011bc <timerRun+0xc4>)
 800116c:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) timer4_flag = 1;
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <timerRun+0xc4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	dc02      	bgt.n	800117c <timerRun+0x84>
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <timerRun+0xc8>)
 8001178:	2201      	movs	r2, #1
 800117a:	601a      	str	r2, [r3, #0]
	}
	if (timer5_counter > 0) {
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <timerRun+0xcc>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	dd0b      	ble.n	800119c <timerRun+0xa4>
		timer5_counter--;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <timerRun+0xcc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	3b01      	subs	r3, #1
 800118a:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <timerRun+0xcc>)
 800118c:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) timer5_flag = 1;
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <timerRun+0xcc>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	dc02      	bgt.n	800119c <timerRun+0xa4>
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <timerRun+0xd0>)
 8001198:	2201      	movs	r2, #1
 800119a:	601a      	str	r2, [r3, #0]
	}
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	20000118 	.word	0x20000118
 80011a8:	2000011c 	.word	0x2000011c
 80011ac:	20000120 	.word	0x20000120
 80011b0:	20000124 	.word	0x20000124
 80011b4:	20000128 	.word	0x20000128
 80011b8:	2000012c 	.word	0x2000012c
 80011bc:	20000130 	.word	0x20000130
 80011c0:	20000134 	.word	0x20000134
 80011c4:	20000138 	.word	0x20000138
 80011c8:	2000013c 	.word	0x2000013c

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_MspInit+0x40>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	4a0d      	ldr	r2, [pc, #52]	; (800120c <HAL_MspInit+0x40>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6193      	str	r3, [r2, #24]
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_MspInit+0x40>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_MspInit+0x40>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_MspInit+0x40>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	61d3      	str	r3, [r2, #28]
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_MspInit+0x40>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	40021000 	.word	0x40021000

08001210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001220:	d113      	bne.n	800124a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_TIM_Base_MspInit+0x44>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <HAL_TIM_Base_MspInit+0x44>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	61d3      	str	r3, [r2, #28]
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_TIM_Base_MspInit+0x44>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	201c      	movs	r0, #28
 8001240:	f000 fa2d 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001244:	201c      	movs	r0, #28
 8001246:	f000 fa46 	bl	80016d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000

08001258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800125c:	e7fe      	b.n	800125c <NMI_Handler+0x4>

0800125e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <HardFault_Handler+0x4>

08001264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <MemManage_Handler+0x4>

0800126a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <UsageFault_Handler+0x4>

08001276 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129e:	f000 f90b 	bl	80014b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <TIM2_IRQHandler+0x10>)
 80012ae:	f001 f875 	bl	800239c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200000ac 	.word	0x200000ac

080012bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <turnLightOn>:
 *  Created on: Oct 14, 2022
 *      Author: LENOVO
 */
#include "traffic.h"

void turnLightOn(int led){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	switch(led){
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d01f      	beq.n	8001316 <turnLightOn+0x4e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	dc27      	bgt.n	800132c <turnLightOn+0x64>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <turnLightOn+0x22>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d00b      	beq.n	8001300 <turnLightOn+0x38>
		case LED_YELLOW:
			HAL_GPIO_WritePin(output1_GPIO_Port, output1_Pin, RESET);
			HAL_GPIO_WritePin(output2_GPIO_Port, output2_Pin, SET);
			break;
		default:
			break;
 80012e8:	e020      	b.n	800132c <turnLightOn+0x64>
			HAL_GPIO_WritePin(output1_GPIO_Port, output1_Pin, SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	2102      	movs	r1, #2
 80012ee:	4812      	ldr	r0, [pc, #72]	; (8001338 <turnLightOn+0x70>)
 80012f0:	f000 fb9f 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(output0_GPIO_Port, output0_Pin, RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2101      	movs	r1, #1
 80012f8:	480f      	ldr	r0, [pc, #60]	; (8001338 <turnLightOn+0x70>)
 80012fa:	f000 fb9a 	bl	8001a32 <HAL_GPIO_WritePin>
			break;
 80012fe:	e016      	b.n	800132e <turnLightOn+0x66>
			HAL_GPIO_WritePin(output2_GPIO_Port, output2_Pin, RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	2104      	movs	r1, #4
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <turnLightOn+0x70>)
 8001306:	f000 fb94 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(output0_GPIO_Port, output0_Pin, SET);
 800130a:	2201      	movs	r2, #1
 800130c:	2101      	movs	r1, #1
 800130e:	480a      	ldr	r0, [pc, #40]	; (8001338 <turnLightOn+0x70>)
 8001310:	f000 fb8f 	bl	8001a32 <HAL_GPIO_WritePin>
			break;
 8001314:	e00b      	b.n	800132e <turnLightOn+0x66>
			HAL_GPIO_WritePin(output1_GPIO_Port, output1_Pin, RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	2102      	movs	r1, #2
 800131a:	4807      	ldr	r0, [pc, #28]	; (8001338 <turnLightOn+0x70>)
 800131c:	f000 fb89 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(output2_GPIO_Port, output2_Pin, SET);
 8001320:	2201      	movs	r2, #1
 8001322:	2104      	movs	r1, #4
 8001324:	4804      	ldr	r0, [pc, #16]	; (8001338 <turnLightOn+0x70>)
 8001326:	f000 fb84 	bl	8001a32 <HAL_GPIO_WritePin>
			break;
 800132a:	e000      	b.n	800132e <turnLightOn+0x66>
			break;
 800132c:	bf00      	nop
	}
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40010800 	.word	0x40010800

0800133c <anotherturnLightOn>:

void anotherturnLightOn(int led) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	switch(led){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d01f      	beq.n	800138a <anotherturnLightOn+0x4e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b02      	cmp	r3, #2
 800134e:	dc27      	bgt.n	80013a0 <anotherturnLightOn+0x64>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <anotherturnLightOn+0x22>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d00b      	beq.n	8001374 <anotherturnLightOn+0x38>
		case LED_YELLOW:
			HAL_GPIO_WritePin(output4_GPIO_Port, output4_Pin, RESET);
			HAL_GPIO_WritePin(output5_GPIO_Port, output5_Pin, SET);
			break;
		default:
			break;
 800135c:	e020      	b.n	80013a0 <anotherturnLightOn+0x64>
			HAL_GPIO_WritePin(output4_GPIO_Port, output4_Pin, SET);
 800135e:	2201      	movs	r2, #1
 8001360:	2110      	movs	r1, #16
 8001362:	4812      	ldr	r0, [pc, #72]	; (80013ac <anotherturnLightOn+0x70>)
 8001364:	f000 fb65 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(output3_GPIO_Port, output3_Pin, RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2108      	movs	r1, #8
 800136c:	480f      	ldr	r0, [pc, #60]	; (80013ac <anotherturnLightOn+0x70>)
 800136e:	f000 fb60 	bl	8001a32 <HAL_GPIO_WritePin>
			break;
 8001372:	e016      	b.n	80013a2 <anotherturnLightOn+0x66>
			HAL_GPIO_WritePin(output5_GPIO_Port, output5_Pin, RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2120      	movs	r1, #32
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <anotherturnLightOn+0x70>)
 800137a:	f000 fb5a 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(output3_GPIO_Port, output3_Pin, SET);
 800137e:	2201      	movs	r2, #1
 8001380:	2108      	movs	r1, #8
 8001382:	480a      	ldr	r0, [pc, #40]	; (80013ac <anotherturnLightOn+0x70>)
 8001384:	f000 fb55 	bl	8001a32 <HAL_GPIO_WritePin>
			break;
 8001388:	e00b      	b.n	80013a2 <anotherturnLightOn+0x66>
			HAL_GPIO_WritePin(output4_GPIO_Port, output4_Pin, RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2110      	movs	r1, #16
 800138e:	4807      	ldr	r0, [pc, #28]	; (80013ac <anotherturnLightOn+0x70>)
 8001390:	f000 fb4f 	bl	8001a32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(output5_GPIO_Port, output5_Pin, SET);
 8001394:	2201      	movs	r2, #1
 8001396:	2120      	movs	r1, #32
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <anotherturnLightOn+0x70>)
 800139a:	f000 fb4a 	bl	8001a32 <HAL_GPIO_WritePin>
			break;
 800139e:	e000      	b.n	80013a2 <anotherturnLightOn+0x66>
			break;
 80013a0:	bf00      	nop
	}
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40010800 	.word	0x40010800

080013b0 <clearLight>:

void clearLight(){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, output0_Pin|output1_Pin|output2_Pin, SET);
 80013b4:	2201      	movs	r2, #1
 80013b6:	2107      	movs	r1, #7
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <clearLight+0x14>)
 80013ba:	f000 fb3a 	bl	8001a32 <HAL_GPIO_WritePin>
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40010800 	.word	0x40010800

080013c8 <anotherclearLight>:

void anotherclearLight(){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, output3_Pin|output4_Pin|output5_Pin, SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	2138      	movs	r1, #56	; 0x38
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <anotherclearLight+0x14>)
 80013d2:	f000 fb2e 	bl	8001a32 <HAL_GPIO_WritePin>
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40010800 	.word	0x40010800

080013e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013e2:	490d      	ldr	r1, [pc, #52]	; (8001418 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f8:	4c0a      	ldr	r4, [pc, #40]	; (8001424 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001406:	f7ff ff59 	bl	80012bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140a:	f001 fb0f 	bl	8002a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800140e:	f7ff f8cd 	bl	80005ac <main>
  bx lr
 8001412:	4770      	bx	lr
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800141c:	08002ac4 	.word	0x08002ac4
  ldr r2, =_sbss
 8001420:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001424:	20000144 	.word	0x20000144

08001428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC1_2_IRQHandler>
	...

0800142c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_Init+0x28>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a07      	ldr	r2, [pc, #28]	; (8001454 <HAL_Init+0x28>)
 8001436:	f043 0310 	orr.w	r3, r3, #16
 800143a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143c:	2003      	movs	r0, #3
 800143e:	f000 f923 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001442:	200f      	movs	r0, #15
 8001444:	f000 f808 	bl	8001458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001448:	f7ff fec0 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40022000 	.word	0x40022000

08001458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_InitTick+0x54>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_InitTick+0x58>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4619      	mov	r1, r3
 800146a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001472:	fbb2 f3f3 	udiv	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f93b 	bl	80016f2 <HAL_SYSTICK_Config>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e00e      	b.n	80014a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b0f      	cmp	r3, #15
 800148a:	d80a      	bhi.n	80014a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148c:	2200      	movs	r2, #0
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f000 f903 	bl	800169e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <HAL_InitTick+0x5c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e000      	b.n	80014a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000064 	.word	0x20000064
 80014b0:	2000006c 	.word	0x2000006c
 80014b4:	20000068 	.word	0x20000068

080014b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_IncTick+0x1c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_IncTick+0x20>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	4a03      	ldr	r2, [pc, #12]	; (80014d8 <HAL_IncTick+0x20>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	2000006c 	.word	0x2000006c
 80014d8:	20000140 	.word	0x20000140

080014dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return uwTick;
 80014e0:	4b02      	ldr	r3, [pc, #8]	; (80014ec <HAL_GetTick+0x10>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	20000140 	.word	0x20000140

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db0b      	blt.n	800157e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4906      	ldr	r1, [pc, #24]	; (8001588 <__NVIC_EnableIRQ+0x34>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	; (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	; (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
         );
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	; 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001654:	d301      	bcc.n	800165a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <SysTick_Config+0x40>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001662:	210f      	movs	r1, #15
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f7ff ff90 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <SysTick_Config+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <SysTick_Config+0x40>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff2d 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b0:	f7ff ff42 	bl	8001538 <__NVIC_GetPriorityGrouping>
 80016b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	6978      	ldr	r0, [r7, #20]
 80016bc:	f7ff ff90 	bl	80015e0 <NVIC_EncodePriority>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff5f 	bl	800158c <__NVIC_SetPriority>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff35 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffa2 	bl	8001644 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b08b      	sub	sp, #44	; 0x2c
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171e:	e161      	b.n	80019e4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001720:	2201      	movs	r2, #1
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	429a      	cmp	r2, r3
 800173a:	f040 8150 	bne.w	80019de <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4a97      	ldr	r2, [pc, #604]	; (80019a0 <HAL_GPIO_Init+0x294>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d05e      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 8001748:	4a95      	ldr	r2, [pc, #596]	; (80019a0 <HAL_GPIO_Init+0x294>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d875      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 800174e:	4a95      	ldr	r2, [pc, #596]	; (80019a4 <HAL_GPIO_Init+0x298>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d058      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 8001754:	4a93      	ldr	r2, [pc, #588]	; (80019a4 <HAL_GPIO_Init+0x298>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d86f      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 800175a:	4a93      	ldr	r2, [pc, #588]	; (80019a8 <HAL_GPIO_Init+0x29c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d052      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 8001760:	4a91      	ldr	r2, [pc, #580]	; (80019a8 <HAL_GPIO_Init+0x29c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d869      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 8001766:	4a91      	ldr	r2, [pc, #580]	; (80019ac <HAL_GPIO_Init+0x2a0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d04c      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 800176c:	4a8f      	ldr	r2, [pc, #572]	; (80019ac <HAL_GPIO_Init+0x2a0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d863      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 8001772:	4a8f      	ldr	r2, [pc, #572]	; (80019b0 <HAL_GPIO_Init+0x2a4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d046      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 8001778:	4a8d      	ldr	r2, [pc, #564]	; (80019b0 <HAL_GPIO_Init+0x2a4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d85d      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 800177e:	2b12      	cmp	r3, #18
 8001780:	d82a      	bhi.n	80017d8 <HAL_GPIO_Init+0xcc>
 8001782:	2b12      	cmp	r3, #18
 8001784:	d859      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 8001786:	a201      	add	r2, pc, #4	; (adr r2, 800178c <HAL_GPIO_Init+0x80>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	08001807 	.word	0x08001807
 8001790:	080017e1 	.word	0x080017e1
 8001794:	080017f3 	.word	0x080017f3
 8001798:	08001835 	.word	0x08001835
 800179c:	0800183b 	.word	0x0800183b
 80017a0:	0800183b 	.word	0x0800183b
 80017a4:	0800183b 	.word	0x0800183b
 80017a8:	0800183b 	.word	0x0800183b
 80017ac:	0800183b 	.word	0x0800183b
 80017b0:	0800183b 	.word	0x0800183b
 80017b4:	0800183b 	.word	0x0800183b
 80017b8:	0800183b 	.word	0x0800183b
 80017bc:	0800183b 	.word	0x0800183b
 80017c0:	0800183b 	.word	0x0800183b
 80017c4:	0800183b 	.word	0x0800183b
 80017c8:	0800183b 	.word	0x0800183b
 80017cc:	0800183b 	.word	0x0800183b
 80017d0:	080017e9 	.word	0x080017e9
 80017d4:	080017fd 	.word	0x080017fd
 80017d8:	4a76      	ldr	r2, [pc, #472]	; (80019b4 <HAL_GPIO_Init+0x2a8>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d013      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017de:	e02c      	b.n	800183a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	623b      	str	r3, [r7, #32]
          break;
 80017e6:	e029      	b.n	800183c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	3304      	adds	r3, #4
 80017ee:	623b      	str	r3, [r7, #32]
          break;
 80017f0:	e024      	b.n	800183c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	3308      	adds	r3, #8
 80017f8:	623b      	str	r3, [r7, #32]
          break;
 80017fa:	e01f      	b.n	800183c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	330c      	adds	r3, #12
 8001802:	623b      	str	r3, [r7, #32]
          break;
 8001804:	e01a      	b.n	800183c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800180e:	2304      	movs	r3, #4
 8001810:	623b      	str	r3, [r7, #32]
          break;
 8001812:	e013      	b.n	800183c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d105      	bne.n	8001828 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800181c:	2308      	movs	r3, #8
 800181e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	611a      	str	r2, [r3, #16]
          break;
 8001826:	e009      	b.n	800183c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001828:	2308      	movs	r3, #8
 800182a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	615a      	str	r2, [r3, #20]
          break;
 8001832:	e003      	b.n	800183c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
          break;
 8001838:	e000      	b.n	800183c <HAL_GPIO_Init+0x130>
          break;
 800183a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2bff      	cmp	r3, #255	; 0xff
 8001840:	d801      	bhi.n	8001846 <HAL_GPIO_Init+0x13a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	e001      	b.n	800184a <HAL_GPIO_Init+0x13e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3304      	adds	r3, #4
 800184a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2bff      	cmp	r3, #255	; 0xff
 8001850:	d802      	bhi.n	8001858 <HAL_GPIO_Init+0x14c>
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	e002      	b.n	800185e <HAL_GPIO_Init+0x152>
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	3b08      	subs	r3, #8
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	210f      	movs	r1, #15
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	401a      	ands	r2, r3
 8001870:	6a39      	ldr	r1, [r7, #32]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	431a      	orrs	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80a9 	beq.w	80019de <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800188c:	4b4a      	ldr	r3, [pc, #296]	; (80019b8 <HAL_GPIO_Init+0x2ac>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a49      	ldr	r2, [pc, #292]	; (80019b8 <HAL_GPIO_Init+0x2ac>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b47      	ldr	r3, [pc, #284]	; (80019b8 <HAL_GPIO_Init+0x2ac>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018a4:	4a45      	ldr	r2, [pc, #276]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a3d      	ldr	r2, [pc, #244]	; (80019c0 <HAL_GPIO_Init+0x2b4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d00d      	beq.n	80018ec <HAL_GPIO_Init+0x1e0>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a3c      	ldr	r2, [pc, #240]	; (80019c4 <HAL_GPIO_Init+0x2b8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d007      	beq.n	80018e8 <HAL_GPIO_Init+0x1dc>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <HAL_GPIO_Init+0x2bc>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d101      	bne.n	80018e4 <HAL_GPIO_Init+0x1d8>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e004      	b.n	80018ee <HAL_GPIO_Init+0x1e2>
 80018e4:	2303      	movs	r3, #3
 80018e6:	e002      	b.n	80018ee <HAL_GPIO_Init+0x1e2>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_GPIO_Init+0x1e2>
 80018ec:	2300      	movs	r3, #0
 80018ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f0:	f002 0203 	and.w	r2, r2, #3
 80018f4:	0092      	lsls	r2, r2, #2
 80018f6:	4093      	lsls	r3, r2
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018fe:	492f      	ldr	r1, [pc, #188]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3302      	adds	r3, #2
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001918:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <HAL_GPIO_Init+0x2c0>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	492b      	ldr	r1, [pc, #172]	; (80019cc <HAL_GPIO_Init+0x2c0>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001926:	4b29      	ldr	r3, [pc, #164]	; (80019cc <HAL_GPIO_Init+0x2c0>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	43db      	mvns	r3, r3
 800192e:	4927      	ldr	r1, [pc, #156]	; (80019cc <HAL_GPIO_Init+0x2c0>)
 8001930:	4013      	ands	r3, r2
 8001932:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_GPIO_Init+0x2c0>)
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4921      	ldr	r1, [pc, #132]	; (80019cc <HAL_GPIO_Init+0x2c0>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800194e:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <HAL_GPIO_Init+0x2c0>)
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	43db      	mvns	r3, r3
 8001956:	491d      	ldr	r1, [pc, #116]	; (80019cc <HAL_GPIO_Init+0x2c0>)
 8001958:	4013      	ands	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d006      	beq.n	8001976 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001968:	4b18      	ldr	r3, [pc, #96]	; (80019cc <HAL_GPIO_Init+0x2c0>)
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	4917      	ldr	r1, [pc, #92]	; (80019cc <HAL_GPIO_Init+0x2c0>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_GPIO_Init+0x2c0>)
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	43db      	mvns	r3, r3
 800197e:	4913      	ldr	r1, [pc, #76]	; (80019cc <HAL_GPIO_Init+0x2c0>)
 8001980:	4013      	ands	r3, r2
 8001982:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01f      	beq.n	80019d0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_GPIO_Init+0x2c0>)
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	490d      	ldr	r1, [pc, #52]	; (80019cc <HAL_GPIO_Init+0x2c0>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	60cb      	str	r3, [r1, #12]
 800199c:	e01f      	b.n	80019de <HAL_GPIO_Init+0x2d2>
 800199e:	bf00      	nop
 80019a0:	10320000 	.word	0x10320000
 80019a4:	10310000 	.word	0x10310000
 80019a8:	10220000 	.word	0x10220000
 80019ac:	10210000 	.word	0x10210000
 80019b0:	10120000 	.word	0x10120000
 80019b4:	10110000 	.word	0x10110000
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010000 	.word	0x40010000
 80019c0:	40010800 	.word	0x40010800
 80019c4:	40010c00 	.word	0x40010c00
 80019c8:	40011000 	.word	0x40011000
 80019cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_GPIO_Init+0x2f4>)
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	4909      	ldr	r1, [pc, #36]	; (8001a00 <HAL_GPIO_Init+0x2f4>)
 80019da:	4013      	ands	r3, r2
 80019dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	3301      	adds	r3, #1
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	fa22 f303 	lsr.w	r3, r2, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f47f ae96 	bne.w	8001720 <HAL_GPIO_Init+0x14>
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	372c      	adds	r7, #44	; 0x2c
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	40010400 	.word	0x40010400

08001a04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	e001      	b.n	8001a26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	807b      	strh	r3, [r7, #2]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a42:	787b      	ldrb	r3, [r7, #1]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a48:	887a      	ldrh	r2, [r7, #2]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a4e:	e003      	b.n	8001a58 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a50:	887b      	ldrh	r3, [r7, #2]
 8001a52:	041a      	lsls	r2, r3, #16
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	611a      	str	r2, [r3, #16]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a74:	887a      	ldrh	r2, [r7, #2]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	041a      	lsls	r2, r3, #16
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	400b      	ands	r3, r1
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	611a      	str	r2, [r3, #16]
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e272      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8087 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab4:	4b92      	ldr	r3, [pc, #584]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d00c      	beq.n	8001ada <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac0:	4b8f      	ldr	r3, [pc, #572]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d112      	bne.n	8001af2 <HAL_RCC_OscConfig+0x5e>
 8001acc:	4b8c      	ldr	r3, [pc, #560]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad8:	d10b      	bne.n	8001af2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ada:	4b89      	ldr	r3, [pc, #548]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d06c      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x12c>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d168      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e24c      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x76>
 8001afc:	4b80      	ldr	r3, [pc, #512]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a7f      	ldr	r2, [pc, #508]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	e02e      	b.n	8001b68 <HAL_RCC_OscConfig+0xd4>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x98>
 8001b12:	4b7b      	ldr	r3, [pc, #492]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a7a      	ldr	r2, [pc, #488]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	4b78      	ldr	r3, [pc, #480]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a77      	ldr	r2, [pc, #476]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e01d      	b.n	8001b68 <HAL_RCC_OscConfig+0xd4>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0xbc>
 8001b36:	4b72      	ldr	r3, [pc, #456]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a71      	ldr	r2, [pc, #452]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b6f      	ldr	r3, [pc, #444]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a6e      	ldr	r2, [pc, #440]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e00b      	b.n	8001b68 <HAL_RCC_OscConfig+0xd4>
 8001b50:	4b6b      	ldr	r3, [pc, #428]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a6a      	ldr	r2, [pc, #424]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b68      	ldr	r3, [pc, #416]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a67      	ldr	r2, [pc, #412]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff fcb4 	bl	80014dc <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff fcb0 	bl	80014dc <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e200      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	4b5d      	ldr	r3, [pc, #372]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0xe4>
 8001b96:	e014      	b.n	8001bc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fca0 	bl	80014dc <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fc9c 	bl	80014dc <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e1ec      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb2:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x10c>
 8001bbe:	e000      	b.n	8001bc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d063      	beq.n	8001c96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bce:	4b4c      	ldr	r3, [pc, #304]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bda:	4b49      	ldr	r3, [pc, #292]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d11c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x18c>
 8001be6:	4b46      	ldr	r3, [pc, #280]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d116      	bne.n	8001c20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf2:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_RCC_OscConfig+0x176>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e1c0      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4939      	ldr	r1, [pc, #228]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	e03a      	b.n	8001c96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d020      	beq.n	8001c6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c28:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7ff fc55 	bl	80014dc <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c36:	f7ff fc51 	bl	80014dc <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e1a1      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c48:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c54:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4927      	ldr	r1, [pc, #156]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	600b      	str	r3, [r1, #0]
 8001c68:	e015      	b.n	8001c96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff fc34 	bl	80014dc <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c78:	f7ff fc30 	bl	80014dc <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e180      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d03a      	beq.n	8001d18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d019      	beq.n	8001cde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb0:	f7ff fc14 	bl	80014dc <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb8:	f7ff fc10 	bl	80014dc <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e160      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	f000 faa6 	bl	8002228 <RCC_Delay>
 8001cdc:	e01c      	b.n	8001d18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fbfa 	bl	80014dc <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cea:	e00f      	b.n	8001d0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff fbf6 	bl	80014dc <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d908      	bls.n	8001d0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e146      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	42420000 	.word	0x42420000
 8001d08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	4b92      	ldr	r3, [pc, #584]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e9      	bne.n	8001cec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80a6 	beq.w	8001e72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2a:	4b8b      	ldr	r3, [pc, #556]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10d      	bne.n	8001d52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b88      	ldr	r3, [pc, #544]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a87      	ldr	r2, [pc, #540]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	61d3      	str	r3, [r2, #28]
 8001d42:	4b85      	ldr	r3, [pc, #532]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d52:	4b82      	ldr	r3, [pc, #520]	; (8001f5c <HAL_RCC_OscConfig+0x4c8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d118      	bne.n	8001d90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5e:	4b7f      	ldr	r3, [pc, #508]	; (8001f5c <HAL_RCC_OscConfig+0x4c8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7e      	ldr	r2, [pc, #504]	; (8001f5c <HAL_RCC_OscConfig+0x4c8>)
 8001d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff fbb7 	bl	80014dc <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d72:	f7ff fbb3 	bl	80014dc <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b64      	cmp	r3, #100	; 0x64
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e103      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	4b75      	ldr	r3, [pc, #468]	; (8001f5c <HAL_RCC_OscConfig+0x4c8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x312>
 8001d98:	4b6f      	ldr	r3, [pc, #444]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	4a6e      	ldr	r2, [pc, #440]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6213      	str	r3, [r2, #32]
 8001da4:	e02d      	b.n	8001e02 <HAL_RCC_OscConfig+0x36e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x334>
 8001dae:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a69      	ldr	r2, [pc, #420]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6213      	str	r3, [r2, #32]
 8001dba:	4b67      	ldr	r3, [pc, #412]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a66      	ldr	r2, [pc, #408]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	f023 0304 	bic.w	r3, r3, #4
 8001dc4:	6213      	str	r3, [r2, #32]
 8001dc6:	e01c      	b.n	8001e02 <HAL_RCC_OscConfig+0x36e>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d10c      	bne.n	8001dea <HAL_RCC_OscConfig+0x356>
 8001dd0:	4b61      	ldr	r3, [pc, #388]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4a60      	ldr	r2, [pc, #384]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6213      	str	r3, [r2, #32]
 8001ddc:	4b5e      	ldr	r3, [pc, #376]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4a5d      	ldr	r2, [pc, #372]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6213      	str	r3, [r2, #32]
 8001de8:	e00b      	b.n	8001e02 <HAL_RCC_OscConfig+0x36e>
 8001dea:	4b5b      	ldr	r3, [pc, #364]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a5a      	ldr	r2, [pc, #360]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6213      	str	r3, [r2, #32]
 8001df6:	4b58      	ldr	r3, [pc, #352]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	4a57      	ldr	r2, [pc, #348]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d015      	beq.n	8001e36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fb67 	bl	80014dc <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7ff fb63 	bl	80014dc <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e0b1      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	4b4b      	ldr	r3, [pc, #300]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0ee      	beq.n	8001e12 <HAL_RCC_OscConfig+0x37e>
 8001e34:	e014      	b.n	8001e60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7ff fb51 	bl	80014dc <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7ff fb4d 	bl	80014dc <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e09b      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e54:	4b40      	ldr	r3, [pc, #256]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1ee      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d105      	bne.n	8001e72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e66:	4b3c      	ldr	r3, [pc, #240]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	4a3b      	ldr	r2, [pc, #236]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8087 	beq.w	8001f8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e7c:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d061      	beq.n	8001f4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d146      	bne.n	8001f1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e90:	4b33      	ldr	r3, [pc, #204]	; (8001f60 <HAL_RCC_OscConfig+0x4cc>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e96:	f7ff fb21 	bl	80014dc <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7ff fb1d 	bl	80014dc <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e06d      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb0:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f0      	bne.n	8001e9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec4:	d108      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	4921      	ldr	r1, [pc, #132]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a19      	ldr	r1, [r3, #32]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	491b      	ldr	r1, [pc, #108]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <HAL_RCC_OscConfig+0x4cc>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef6:	f7ff faf1 	bl	80014dc <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efe:	f7ff faed 	bl	80014dc <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e03d      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x46a>
 8001f1c:	e035      	b.n	8001f8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <HAL_RCC_OscConfig+0x4cc>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff fada 	bl	80014dc <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7ff fad6 	bl	80014dc <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e026      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x498>
 8001f4a:	e01e      	b.n	8001f8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d107      	bne.n	8001f64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e019      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40007000 	.word	0x40007000
 8001f60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_RCC_OscConfig+0x500>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d001      	beq.n	8001f8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0d0      	b.n	800214e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fac:	4b6a      	ldr	r3, [pc, #424]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d910      	bls.n	8001fdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b67      	ldr	r3, [pc, #412]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 0207 	bic.w	r2, r3, #7
 8001fc2:	4965      	ldr	r1, [pc, #404]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b63      	ldr	r3, [pc, #396]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0b8      	b.n	800214e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d020      	beq.n	800202a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff4:	4b59      	ldr	r3, [pc, #356]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4a58      	ldr	r2, [pc, #352]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ffe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800200c:	4b53      	ldr	r3, [pc, #332]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	4a52      	ldr	r2, [pc, #328]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002016:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002018:	4b50      	ldr	r3, [pc, #320]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	494d      	ldr	r1, [pc, #308]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d040      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	4b47      	ldr	r3, [pc, #284]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d115      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e07f      	b.n	800214e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002056:	4b41      	ldr	r3, [pc, #260]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e073      	b.n	800214e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002066:	4b3d      	ldr	r3, [pc, #244]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e06b      	b.n	800214e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b39      	ldr	r3, [pc, #228]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4936      	ldr	r1, [pc, #216]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002088:	f7ff fa28 	bl	80014dc <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7ff fa24 	bl	80014dc <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e053      	b.n	800214e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b2d      	ldr	r3, [pc, #180]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d210      	bcs.n	80020e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 0207 	bic.w	r2, r3, #7
 80020ce:	4922      	ldr	r1, [pc, #136]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e032      	b.n	800214e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d008      	beq.n	8002106 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f4:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4916      	ldr	r1, [pc, #88]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d009      	beq.n	8002126 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002112:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	490e      	ldr	r1, [pc, #56]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	4313      	orrs	r3, r2
 8002124:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002126:	f000 f821 	bl	800216c <HAL_RCC_GetSysClockFreq>
 800212a:	4602      	mov	r2, r0
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	490a      	ldr	r1, [pc, #40]	; (8002160 <HAL_RCC_ClockConfig+0x1c8>)
 8002138:	5ccb      	ldrb	r3, [r1, r3]
 800213a:	fa22 f303 	lsr.w	r3, r2, r3
 800213e:	4a09      	ldr	r2, [pc, #36]	; (8002164 <HAL_RCC_ClockConfig+0x1cc>)
 8002140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_RCC_ClockConfig+0x1d0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff f986 	bl	8001458 <HAL_InitTick>

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40022000 	.word	0x40022000
 800215c:	40021000 	.word	0x40021000
 8002160:	08002aac 	.word	0x08002aac
 8002164:	20000064 	.word	0x20000064
 8002168:	20000068 	.word	0x20000068

0800216c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800216c:	b490      	push	{r4, r7}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002172:	4b29      	ldr	r3, [pc, #164]	; (8002218 <HAL_RCC_GetSysClockFreq+0xac>)
 8002174:	1d3c      	adds	r4, r7, #4
 8002176:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002178:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800217c:	f240 2301 	movw	r3, #513	; 0x201
 8002180:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	2300      	movs	r3, #0
 8002188:	61bb      	str	r3, [r7, #24]
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d002      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0x40>
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d003      	beq.n	80021b2 <HAL_RCC_GetSysClockFreq+0x46>
 80021aa:	e02b      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021ac:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021ae:	623b      	str	r3, [r7, #32]
      break;
 80021b0:	e02b      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	0c9b      	lsrs	r3, r3, #18
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	3328      	adds	r3, #40	; 0x28
 80021bc:	443b      	add	r3, r7
 80021be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d012      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021ce:	4b13      	ldr	r3, [pc, #76]	; (800221c <HAL_RCC_GetSysClockFreq+0xb0>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	0c5b      	lsrs	r3, r3, #17
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	3328      	adds	r3, #40	; 0x28
 80021da:	443b      	add	r3, r7
 80021dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021e6:	fb03 f202 	mul.w	r2, r3, r2
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
 80021f2:	e004      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	623b      	str	r3, [r7, #32]
      break;
 8002202:	e002      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002206:	623b      	str	r3, [r7, #32]
      break;
 8002208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800220a:	6a3b      	ldr	r3, [r7, #32]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3728      	adds	r7, #40	; 0x28
 8002210:	46bd      	mov	sp, r7
 8002212:	bc90      	pop	{r4, r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	08002a9c 	.word	0x08002a9c
 800221c:	40021000 	.word	0x40021000
 8002220:	007a1200 	.word	0x007a1200
 8002224:	003d0900 	.word	0x003d0900

08002228 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <RCC_Delay+0x34>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <RCC_Delay+0x38>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0a5b      	lsrs	r3, r3, #9
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002244:	bf00      	nop
  }
  while (Delay --);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1e5a      	subs	r2, r3, #1
 800224a:	60fa      	str	r2, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f9      	bne.n	8002244 <RCC_Delay+0x1c>
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	20000064 	.word	0x20000064
 8002260:	10624dd3 	.word	0x10624dd3

08002264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e041      	b.n	80022fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe ffc0 	bl	8001210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3304      	adds	r3, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f000 fa6a 	bl	800277c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d001      	beq.n	800231c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e035      	b.n	8002388 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a16      	ldr	r2, [pc, #88]	; (8002394 <HAL_TIM_Base_Start_IT+0x90>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d009      	beq.n	8002352 <HAL_TIM_Base_Start_IT+0x4e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002346:	d004      	beq.n	8002352 <HAL_TIM_Base_Start_IT+0x4e>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a12      	ldr	r2, [pc, #72]	; (8002398 <HAL_TIM_Base_Start_IT+0x94>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d111      	bne.n	8002376 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b06      	cmp	r3, #6
 8002362:	d010      	beq.n	8002386 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002374:	e007      	b.n	8002386 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0201 	orr.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40000400 	.word	0x40000400

0800239c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d122      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d11b      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0202 	mvn.w	r2, #2
 80023c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f9b1 	bl	8002746 <HAL_TIM_IC_CaptureCallback>
 80023e4:	e005      	b.n	80023f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f9a4 	bl	8002734 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f9b3 	bl	8002758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b04      	cmp	r3, #4
 8002404:	d122      	bne.n	800244c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b04      	cmp	r3, #4
 8002412:	d11b      	bne.n	800244c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0204 	mvn.w	r2, #4
 800241c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2202      	movs	r2, #2
 8002422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f987 	bl	8002746 <HAL_TIM_IC_CaptureCallback>
 8002438:	e005      	b.n	8002446 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f97a 	bl	8002734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f989 	bl	8002758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b08      	cmp	r3, #8
 8002458:	d122      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b08      	cmp	r3, #8
 8002466:	d11b      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0208 	mvn.w	r2, #8
 8002470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2204      	movs	r2, #4
 8002476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f95d 	bl	8002746 <HAL_TIM_IC_CaptureCallback>
 800248c:	e005      	b.n	800249a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f950 	bl	8002734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f95f 	bl	8002758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b10      	cmp	r3, #16
 80024ac:	d122      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d11b      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0210 	mvn.w	r2, #16
 80024c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2208      	movs	r2, #8
 80024ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f933 	bl	8002746 <HAL_TIM_IC_CaptureCallback>
 80024e0:	e005      	b.n	80024ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f926 	bl	8002734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f935 	bl	8002758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d10e      	bne.n	8002520 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	d107      	bne.n	8002520 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0201 	mvn.w	r2, #1
 8002518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7fe f958 	bl	80007d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252a:	2b80      	cmp	r3, #128	; 0x80
 800252c:	d10e      	bne.n	800254c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002538:	2b80      	cmp	r3, #128	; 0x80
 800253a:	d107      	bne.n	800254c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fa67 	bl	8002a1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	d10e      	bne.n	8002578 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	d107      	bne.n	8002578 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f8f9 	bl	800276a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b20      	cmp	r3, #32
 8002584:	d10e      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b20      	cmp	r3, #32
 8002592:	d107      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0220 	mvn.w	r2, #32
 800259c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fa32 	bl	8002a08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_TIM_ConfigClockSource+0x18>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e0b3      	b.n	800272c <HAL_TIM_ConfigClockSource+0x180>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fc:	d03e      	beq.n	800267c <HAL_TIM_ConfigClockSource+0xd0>
 80025fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002602:	f200 8087 	bhi.w	8002714 <HAL_TIM_ConfigClockSource+0x168>
 8002606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260a:	f000 8085 	beq.w	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 800260e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002612:	d87f      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x168>
 8002614:	2b70      	cmp	r3, #112	; 0x70
 8002616:	d01a      	beq.n	800264e <HAL_TIM_ConfigClockSource+0xa2>
 8002618:	2b70      	cmp	r3, #112	; 0x70
 800261a:	d87b      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x168>
 800261c:	2b60      	cmp	r3, #96	; 0x60
 800261e:	d050      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x116>
 8002620:	2b60      	cmp	r3, #96	; 0x60
 8002622:	d877      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x168>
 8002624:	2b50      	cmp	r3, #80	; 0x50
 8002626:	d03c      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0xf6>
 8002628:	2b50      	cmp	r3, #80	; 0x50
 800262a:	d873      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x168>
 800262c:	2b40      	cmp	r3, #64	; 0x40
 800262e:	d058      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x136>
 8002630:	2b40      	cmp	r3, #64	; 0x40
 8002632:	d86f      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x168>
 8002634:	2b30      	cmp	r3, #48	; 0x30
 8002636:	d064      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x156>
 8002638:	2b30      	cmp	r3, #48	; 0x30
 800263a:	d86b      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x168>
 800263c:	2b20      	cmp	r3, #32
 800263e:	d060      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x156>
 8002640:	2b20      	cmp	r3, #32
 8002642:	d867      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x168>
 8002644:	2b00      	cmp	r3, #0
 8002646:	d05c      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x156>
 8002648:	2b10      	cmp	r3, #16
 800264a:	d05a      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800264c:	e062      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f000 f95c 	bl	800291a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002670:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	609a      	str	r2, [r3, #8]
      break;
 800267a:	e04e      	b.n	800271a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6899      	ldr	r1, [r3, #8]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f000 f945 	bl	800291a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800269e:	609a      	str	r2, [r3, #8]
      break;
 80026a0:	e03b      	b.n	800271a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f000 f8bc 	bl	800282c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2150      	movs	r1, #80	; 0x50
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f913 	bl	80028e6 <TIM_ITRx_SetConfig>
      break;
 80026c0:	e02b      	b.n	800271a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6859      	ldr	r1, [r3, #4]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	461a      	mov	r2, r3
 80026d0:	f000 f8da 	bl	8002888 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2160      	movs	r1, #96	; 0x60
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 f903 	bl	80028e6 <TIM_ITRx_SetConfig>
      break;
 80026e0:	e01b      	b.n	800271a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	461a      	mov	r2, r3
 80026f0:	f000 f89c 	bl	800282c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2140      	movs	r1, #64	; 0x40
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f8f3 	bl	80028e6 <TIM_ITRx_SetConfig>
      break;
 8002700:	e00b      	b.n	800271a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4619      	mov	r1, r3
 800270c:	4610      	mov	r0, r2
 800270e:	f000 f8ea 	bl	80028e6 <TIM_ITRx_SetConfig>
        break;
 8002712:	e002      	b.n	800271a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002714:	bf00      	nop
 8002716:	e000      	b.n	800271a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002718:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a25      	ldr	r2, [pc, #148]	; (8002824 <TIM_Base_SetConfig+0xa8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d007      	beq.n	80027a4 <TIM_Base_SetConfig+0x28>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279a:	d003      	beq.n	80027a4 <TIM_Base_SetConfig+0x28>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a22      	ldr	r2, [pc, #136]	; (8002828 <TIM_Base_SetConfig+0xac>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d108      	bne.n	80027b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a1a      	ldr	r2, [pc, #104]	; (8002824 <TIM_Base_SetConfig+0xa8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <TIM_Base_SetConfig+0x52>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c4:	d003      	beq.n	80027ce <TIM_Base_SetConfig+0x52>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a17      	ldr	r2, [pc, #92]	; (8002828 <TIM_Base_SetConfig+0xac>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d108      	bne.n	80027e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a07      	ldr	r2, [pc, #28]	; (8002824 <TIM_Base_SetConfig+0xa8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d103      	bne.n	8002814 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	615a      	str	r2, [r3, #20]
}
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40000400 	.word	0x40000400

0800282c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	f023 0201 	bic.w	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f023 030a 	bic.w	r3, r3, #10
 8002868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4313      	orrs	r3, r2
 8002870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	621a      	str	r2, [r3, #32]
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f023 0210 	bic.w	r2, r3, #16
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	031b      	lsls	r3, r3, #12
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	621a      	str	r2, [r3, #32]
}
 80028dc:	bf00      	nop
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b085      	sub	sp, #20
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	f043 0307 	orr.w	r3, r3, #7
 8002908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	609a      	str	r2, [r3, #8]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800291a:	b480      	push	{r7}
 800291c:	b087      	sub	sp, #28
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002934:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	021a      	lsls	r2, r3, #8
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	431a      	orrs	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	4313      	orrs	r3, r2
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	609a      	str	r2, [r3, #8]
}
 800294e:	bf00      	nop
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800296c:	2302      	movs	r3, #2
 800296e:	e041      	b.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a14      	ldr	r2, [pc, #80]	; (8002a00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d009      	beq.n	80029c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029bc:	d004      	beq.n	80029c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a10      	ldr	r2, [pc, #64]	; (8002a04 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d10c      	bne.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40012c00 	.word	0x40012c00
 8002a04:	40000400 	.word	0x40000400

08002a08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <__libc_init_array>:
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	2600      	movs	r6, #0
 8002a30:	4d0c      	ldr	r5, [pc, #48]	; (8002a64 <__libc_init_array+0x38>)
 8002a32:	4c0d      	ldr	r4, [pc, #52]	; (8002a68 <__libc_init_array+0x3c>)
 8002a34:	1b64      	subs	r4, r4, r5
 8002a36:	10a4      	asrs	r4, r4, #2
 8002a38:	42a6      	cmp	r6, r4
 8002a3a:	d109      	bne.n	8002a50 <__libc_init_array+0x24>
 8002a3c:	f000 f822 	bl	8002a84 <_init>
 8002a40:	2600      	movs	r6, #0
 8002a42:	4d0a      	ldr	r5, [pc, #40]	; (8002a6c <__libc_init_array+0x40>)
 8002a44:	4c0a      	ldr	r4, [pc, #40]	; (8002a70 <__libc_init_array+0x44>)
 8002a46:	1b64      	subs	r4, r4, r5
 8002a48:	10a4      	asrs	r4, r4, #2
 8002a4a:	42a6      	cmp	r6, r4
 8002a4c:	d105      	bne.n	8002a5a <__libc_init_array+0x2e>
 8002a4e:	bd70      	pop	{r4, r5, r6, pc}
 8002a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a54:	4798      	blx	r3
 8002a56:	3601      	adds	r6, #1
 8002a58:	e7ee      	b.n	8002a38 <__libc_init_array+0xc>
 8002a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a5e:	4798      	blx	r3
 8002a60:	3601      	adds	r6, #1
 8002a62:	e7f2      	b.n	8002a4a <__libc_init_array+0x1e>
 8002a64:	08002abc 	.word	0x08002abc
 8002a68:	08002abc 	.word	0x08002abc
 8002a6c:	08002abc 	.word	0x08002abc
 8002a70:	08002ac0 	.word	0x08002ac0

08002a74 <memset>:
 8002a74:	4603      	mov	r3, r0
 8002a76:	4402      	add	r2, r0
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d100      	bne.n	8002a7e <memset+0xa>
 8002a7c:	4770      	bx	lr
 8002a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a82:	e7f9      	b.n	8002a78 <memset+0x4>

08002a84 <_init>:
 8002a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a86:	bf00      	nop
 8002a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8a:	bc08      	pop	{r3}
 8002a8c:	469e      	mov	lr, r3
 8002a8e:	4770      	bx	lr

08002a90 <_fini>:
 8002a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a92:	bf00      	nop
 8002a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a96:	bc08      	pop	{r3}
 8002a98:	469e      	mov	lr, r3
 8002a9a:	4770      	bx	lr
