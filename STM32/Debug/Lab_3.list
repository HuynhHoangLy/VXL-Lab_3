
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000295c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a68  08002a68  00012a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a88  08002a88  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002a88  08002a88  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a88  08002a88  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a88  08002a88  00012a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a8c  08002a8c  00012a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000074  08002b04  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08002b04  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bbc  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6a  00000000  00000000  00028c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002a8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002b350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f52  00000000  00000000  0002bcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c15b  00000000  00000000  00042c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082273  00000000  00000000  0004ed65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0fd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002944  00000000  00000000  000d1028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a50 	.word	0x08002a50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002a50 	.word	0x08002a50

0800014c <isButtonPressed>:
int KeyReg2[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg3[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

uint16_t Pin[3] = {button0_Pin, button1_Pin, button2_Pin};

int isButtonPressed(int i) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[i]) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d006      	beq.n	800016e <isButtonPressed+0x22>
		button_flag[i] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000090 	.word	0x20000090

08000180 <isButtonLPressed>:

int isButtonLPressed(int i) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if (flagForLPress[i]) {
 8000188:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <isButtonLPressed+0x30>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d006      	beq.n	80001a2 <isButtonLPressed+0x22>
		flagForLPress[i] = 0;
 8000194:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <isButtonLPressed+0x30>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2100      	movs	r1, #0
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800019e:	2301      	movs	r3, #1
 80001a0:	e000      	b.n	80001a4 <isButtonLPressed+0x24>
	}
	return 0;
 80001a2:	2300      	movs	r3, #0
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	2000009c 	.word	0x2000009c

080001b4 <subKeyProcess>:

void subKeyProcess(int i) {
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	// Set value
	button_flag[i] = 1;
 80001bc:	4a04      	ldr	r2, [pc, #16]	; (80001d0 <subKeyProcess+0x1c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2101      	movs	r1, #1
 80001c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001c6:	bf00      	nop
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	20000090 	.word	0x20000090

080001d4 <getKeyInput>:

void getKeyInput() {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	// Pressed
	for (int i = 0; i < 3; i++) {
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e08c      	b.n	80002fa <getKeyInput+0x126>
		KeyReg0[i] = KeyReg1[i];
 80001e0:	4a4a      	ldr	r2, [pc, #296]	; (800030c <getKeyInput+0x138>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	4949      	ldr	r1, [pc, #292]	; (8000310 <getKeyInput+0x13c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001f0:	4a48      	ldr	r2, [pc, #288]	; (8000314 <getKeyInput+0x140>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4944      	ldr	r1, [pc, #272]	; (800030c <getKeyInput+0x138>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(GPIOB, Pin[i]);
 8000200:	4a45      	ldr	r2, [pc, #276]	; (8000318 <getKeyInput+0x144>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000208:	4619      	mov	r1, r3
 800020a:	4844      	ldr	r0, [pc, #272]	; (800031c <getKeyInput+0x148>)
 800020c:	f001 fbe0 	bl	80019d0 <HAL_GPIO_ReadPin>
 8000210:	4603      	mov	r3, r0
 8000212:	4619      	mov	r1, r3
 8000214:	4a3f      	ldr	r2, [pc, #252]	; (8000314 <getKeyInput+0x140>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 800021c:	4a3c      	ldr	r2, [pc, #240]	; (8000310 <getKeyInput+0x13c>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4939      	ldr	r1, [pc, #228]	; (800030c <getKeyInput+0x138>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022c:	429a      	cmp	r2, r3
 800022e:	d161      	bne.n	80002f4 <getKeyInput+0x120>
 8000230:	4a36      	ldr	r2, [pc, #216]	; (800030c <getKeyInput+0x138>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000238:	4936      	ldr	r1, [pc, #216]	; (8000314 <getKeyInput+0x140>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000240:	429a      	cmp	r2, r3
 8000242:	d157      	bne.n	80002f4 <getKeyInput+0x120>
			if (KeyReg3[i] != KeyReg2[i]) {
 8000244:	4a36      	ldr	r2, [pc, #216]	; (8000320 <getKeyInput+0x14c>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024c:	4931      	ldr	r1, [pc, #196]	; (8000314 <getKeyInput+0x140>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000254:	429a      	cmp	r2, r3
 8000256:	d029      	beq.n	80002ac <getKeyInput+0xd8>
				KeyReg3[i] = KeyReg2[i];
 8000258:	4a2e      	ldr	r2, [pc, #184]	; (8000314 <getKeyInput+0x140>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000260:	492f      	ldr	r1, [pc, #188]	; (8000320 <getKeyInput+0x14c>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE) {
 8000268:	4a2a      	ldr	r2, [pc, #168]	; (8000314 <getKeyInput+0x140>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d115      	bne.n	80002a0 <getKeyInput+0xcc>
					if (!flagForLPress[i]) {
 8000274:	4a2b      	ldr	r2, [pc, #172]	; (8000324 <getKeyInput+0x150>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d109      	bne.n	8000294 <getKeyInput+0xc0>
						TimeOutForKeyPress[i] = 300;
 8000280:	4a29      	ldr	r2, [pc, #164]	; (8000328 <getKeyInput+0x154>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000288:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						subKeyProcess(i);
 800028c:	6878      	ldr	r0, [r7, #4]
 800028e:	f7ff ff91 	bl	80001b4 <subKeyProcess>
 8000292:	e02f      	b.n	80002f4 <getKeyInput+0x120>
					}
					else TimeOutForKeyPress[i] = 100;
 8000294:	4a24      	ldr	r2, [pc, #144]	; (8000328 <getKeyInput+0x154>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2164      	movs	r1, #100	; 0x64
 800029a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800029e:	e029      	b.n	80002f4 <getKeyInput+0x120>
				}
				else flagForLPress[i] = 0;
 80002a0:	4a20      	ldr	r2, [pc, #128]	; (8000324 <getKeyInput+0x150>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2100      	movs	r1, #0
 80002a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002aa:	e023      	b.n	80002f4 <getKeyInput+0x120>
			}
			else {
				TimeOutForKeyPress[i]--;
 80002ac:	4a1e      	ldr	r2, [pc, #120]	; (8000328 <getKeyInput+0x154>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b4:	1e5a      	subs	r2, r3, #1
 80002b6:	491c      	ldr	r1, [pc, #112]	; (8000328 <getKeyInput+0x154>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 80002be:	4a1a      	ldr	r2, [pc, #104]	; (8000328 <getKeyInput+0x154>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d114      	bne.n	80002f4 <getKeyInput+0x120>
					if (KeyReg2[i] == PRESSED_STATE) {
 80002ca:	4a12      	ldr	r2, [pc, #72]	; (8000314 <getKeyInput+0x140>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d10e      	bne.n	80002f4 <getKeyInput+0x120>
						flagForLPress[i] = 1;
 80002d6:	4a13      	ldr	r2, [pc, #76]	; (8000324 <getKeyInput+0x150>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2101      	movs	r1, #1
 80002dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						TimeOutForKeyPress[i] = 0;
 80002e0:	4a11      	ldr	r2, [pc, #68]	; (8000328 <getKeyInput+0x154>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2100      	movs	r1, #0
 80002e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						KeyReg3[i] = NORMAL_STATE;
 80002ea:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <getKeyInput+0x14c>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2101      	movs	r1, #1
 80002f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3301      	adds	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b02      	cmp	r3, #2
 80002fe:	f77f af6f 	ble.w	80001e0 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000018 	.word	0x20000018
 8000310:	2000000c 	.word	0x2000000c
 8000314:	20000024 	.word	0x20000024
 8000318:	2000003c 	.word	0x2000003c
 800031c:	40010c00 	.word	0x40010c00
 8000320:	20000030 	.word	0x20000030
 8000324:	2000009c 	.word	0x2000009c
 8000328:	20000000 	.word	0x20000000

0800032c <fsm_automatic_run>:

#include "fsm_automatic.h"

int time4Run[3] = {3, 2, 5}; // do->xanh , xanh->vang, vang->do

void fsm_automatic_run() {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0

	switch (status) {
 8000330:	4b98      	ldr	r3, [pc, #608]	; (8000594 <fsm_automatic_run+0x268>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b03      	cmp	r3, #3
 8000336:	f200 80a4 	bhi.w	8000482 <fsm_automatic_run+0x156>
 800033a:	a201      	add	r2, pc, #4	; (adr r2, 8000340 <fsm_automatic_run+0x14>)
 800033c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000340:	08000351 	.word	0x08000351
 8000344:	0800036f 	.word	0x0800036f
 8000348:	080003cb 	.word	0x080003cb
 800034c:	08000427 	.word	0x08000427
		case INIT:
			clearLight();
 8000350:	f001 f814 	bl	800137c <clearLight>
			status = AUTO_RED;
 8000354:	4b8f      	ldr	r3, [pc, #572]	; (8000594 <fsm_automatic_run+0x268>)
 8000356:	2201      	movs	r2, #1
 8000358:	601a      	str	r2, [r3, #0]
			setTimer1((time4Run[2])*1000);
 800035a:	4b8f      	ldr	r3, [pc, #572]	; (8000598 <fsm_automatic_run+0x26c>)
 800035c:	689b      	ldr	r3, [r3, #8]
 800035e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000362:	fb02 f303 	mul.w	r3, r2, r3
 8000366:	4618      	mov	r0, r3
 8000368:	f000 fe2a 	bl	8000fc0 <setTimer1>
			break;
 800036c:	e090      	b.n	8000490 <fsm_automatic_run+0x164>

		case AUTO_RED:
			turnLightOn(LED_RED);
 800036e:	2000      	movs	r0, #0
 8000370:	f000 ff90 	bl	8001294 <turnLightOn>
			if (isButtonPressed(0)) {
 8000374:	2000      	movs	r0, #0
 8000376:	f7ff fee9 	bl	800014c <isButtonPressed>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d009      	beq.n	8000394 <fsm_automatic_run+0x68>
				status = MAN_RED;
 8000380:	4b84      	ldr	r3, [pc, #528]	; (8000594 <fsm_automatic_run+0x268>)
 8000382:	220c      	movs	r2, #12
 8000384:	601a      	str	r2, [r3, #0]
				clearLight();
 8000386:	f000 fff9 	bl	800137c <clearLight>
				anotherstatus = MAN_RED;
 800038a:	4b84      	ldr	r3, [pc, #528]	; (800059c <fsm_automatic_run+0x270>)
 800038c:	220c      	movs	r2, #12
 800038e:	601a      	str	r2, [r3, #0]
				anotherclearLight();
 8000390:	f001 f800 	bl	8001394 <anotherclearLight>
			}
			updateVal7SEG();
 8000394:	f000 fd4e 	bl	8000e34 <updateVal7SEG>
			if (timer1_flag == 1) {
 8000398:	4b81      	ldr	r3, [pc, #516]	; (80005a0 <fsm_automatic_run+0x274>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b01      	cmp	r3, #1
 800039e:	d172      	bne.n	8000486 <fsm_automatic_run+0x15a>
				status = AUTO_GREEN;
 80003a0:	4b7c      	ldr	r3, [pc, #496]	; (8000594 <fsm_automatic_run+0x268>)
 80003a2:	2202      	movs	r2, #2
 80003a4:	601a      	str	r2, [r3, #0]
				led_buffer[0] = led_buffer[3] = time4Run[0];
 80003a6:	4b7c      	ldr	r3, [pc, #496]	; (8000598 <fsm_automatic_run+0x26c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a7e      	ldr	r2, [pc, #504]	; (80005a4 <fsm_automatic_run+0x278>)
 80003ac:	60d3      	str	r3, [r2, #12]
 80003ae:	4b7d      	ldr	r3, [pc, #500]	; (80005a4 <fsm_automatic_run+0x278>)
 80003b0:	68db      	ldr	r3, [r3, #12]
 80003b2:	4a7c      	ldr	r2, [pc, #496]	; (80005a4 <fsm_automatic_run+0x278>)
 80003b4:	6013      	str	r3, [r2, #0]
				setTimer1((time4Run[0])*1000);
 80003b6:	4b78      	ldr	r3, [pc, #480]	; (8000598 <fsm_automatic_run+0x26c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003be:	fb02 f303 	mul.w	r3, r2, r3
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 fdfc 	bl	8000fc0 <setTimer1>
			}
			break;
 80003c8:	e05d      	b.n	8000486 <fsm_automatic_run+0x15a>

		case AUTO_GREEN:
			turnLightOn(LED_GREEN);
 80003ca:	2001      	movs	r0, #1
 80003cc:	f000 ff62 	bl	8001294 <turnLightOn>
			if (isButtonPressed(0)) {
 80003d0:	2000      	movs	r0, #0
 80003d2:	f7ff febb 	bl	800014c <isButtonPressed>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d009      	beq.n	80003f0 <fsm_automatic_run+0xc4>
				status = MAN_RED;
 80003dc:	4b6d      	ldr	r3, [pc, #436]	; (8000594 <fsm_automatic_run+0x268>)
 80003de:	220c      	movs	r2, #12
 80003e0:	601a      	str	r2, [r3, #0]
				clearLight();
 80003e2:	f000 ffcb 	bl	800137c <clearLight>
				anotherclearLight();
 80003e6:	f000 ffd5 	bl	8001394 <anotherclearLight>
				anotherstatus = MAN_RED;
 80003ea:	4b6c      	ldr	r3, [pc, #432]	; (800059c <fsm_automatic_run+0x270>)
 80003ec:	220c      	movs	r2, #12
 80003ee:	601a      	str	r2, [r3, #0]
			}
			updateVal7SEG();
 80003f0:	f000 fd20 	bl	8000e34 <updateVal7SEG>
			if (timer1_flag == 1) {
 80003f4:	4b6a      	ldr	r3, [pc, #424]	; (80005a0 <fsm_automatic_run+0x274>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d146      	bne.n	800048a <fsm_automatic_run+0x15e>
				status = AUTO_YELLOW;
 80003fc:	4b65      	ldr	r3, [pc, #404]	; (8000594 <fsm_automatic_run+0x268>)
 80003fe:	2203      	movs	r2, #3
 8000400:	601a      	str	r2, [r3, #0]
				led_buffer[0] = led_buffer[3] = time4Run[1];
 8000402:	4b65      	ldr	r3, [pc, #404]	; (8000598 <fsm_automatic_run+0x26c>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	4a67      	ldr	r2, [pc, #412]	; (80005a4 <fsm_automatic_run+0x278>)
 8000408:	60d3      	str	r3, [r2, #12]
 800040a:	4b66      	ldr	r3, [pc, #408]	; (80005a4 <fsm_automatic_run+0x278>)
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	4a65      	ldr	r2, [pc, #404]	; (80005a4 <fsm_automatic_run+0x278>)
 8000410:	6013      	str	r3, [r2, #0]
				setTimer1((time4Run[1])*1000);
 8000412:	4b61      	ldr	r3, [pc, #388]	; (8000598 <fsm_automatic_run+0x26c>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800041a:	fb02 f303 	mul.w	r3, r2, r3
 800041e:	4618      	mov	r0, r3
 8000420:	f000 fdce 	bl	8000fc0 <setTimer1>
			}
			break;
 8000424:	e031      	b.n	800048a <fsm_automatic_run+0x15e>

		case AUTO_YELLOW:
			turnLightOn(LED_YELLOW);
 8000426:	2002      	movs	r0, #2
 8000428:	f000 ff34 	bl	8001294 <turnLightOn>
			if (isButtonPressed(0)) {
 800042c:	2000      	movs	r0, #0
 800042e:	f7ff fe8d 	bl	800014c <isButtonPressed>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d009      	beq.n	800044c <fsm_automatic_run+0x120>
				status = MAN_RED;
 8000438:	4b56      	ldr	r3, [pc, #344]	; (8000594 <fsm_automatic_run+0x268>)
 800043a:	220c      	movs	r2, #12
 800043c:	601a      	str	r2, [r3, #0]
				clearLight();
 800043e:	f000 ff9d 	bl	800137c <clearLight>
				anotherclearLight();
 8000442:	f000 ffa7 	bl	8001394 <anotherclearLight>
				anotherstatus = MAN_RED;
 8000446:	4b55      	ldr	r3, [pc, #340]	; (800059c <fsm_automatic_run+0x270>)
 8000448:	220c      	movs	r2, #12
 800044a:	601a      	str	r2, [r3, #0]
			}
			updateVal7SEG();
 800044c:	f000 fcf2 	bl	8000e34 <updateVal7SEG>
			if (timer1_flag == 1) {
 8000450:	4b53      	ldr	r3, [pc, #332]	; (80005a0 <fsm_automatic_run+0x274>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d11a      	bne.n	800048e <fsm_automatic_run+0x162>
				status = AUTO_RED;
 8000458:	4b4e      	ldr	r3, [pc, #312]	; (8000594 <fsm_automatic_run+0x268>)
 800045a:	2201      	movs	r2, #1
 800045c:	601a      	str	r2, [r3, #0]
				led_buffer[0] = led_buffer[3] = time4Run[2];
 800045e:	4b4e      	ldr	r3, [pc, #312]	; (8000598 <fsm_automatic_run+0x26c>)
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	4a50      	ldr	r2, [pc, #320]	; (80005a4 <fsm_automatic_run+0x278>)
 8000464:	60d3      	str	r3, [r2, #12]
 8000466:	4b4f      	ldr	r3, [pc, #316]	; (80005a4 <fsm_automatic_run+0x278>)
 8000468:	68db      	ldr	r3, [r3, #12]
 800046a:	4a4e      	ldr	r2, [pc, #312]	; (80005a4 <fsm_automatic_run+0x278>)
 800046c:	6013      	str	r3, [r2, #0]
				setTimer1((time4Run[2])*1000);
 800046e:	4b4a      	ldr	r3, [pc, #296]	; (8000598 <fsm_automatic_run+0x26c>)
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000476:	fb02 f303 	mul.w	r3, r2, r3
 800047a:	4618      	mov	r0, r3
 800047c:	f000 fda0 	bl	8000fc0 <setTimer1>
			}
			break;
 8000480:	e005      	b.n	800048e <fsm_automatic_run+0x162>

		default:
			break;
 8000482:	bf00      	nop
 8000484:	e004      	b.n	8000490 <fsm_automatic_run+0x164>
			break;
 8000486:	bf00      	nop
 8000488:	e002      	b.n	8000490 <fsm_automatic_run+0x164>
			break;
 800048a:	bf00      	nop
 800048c:	e000      	b.n	8000490 <fsm_automatic_run+0x164>
			break;
 800048e:	bf00      	nop
	}

	switch (anotherstatus) {
 8000490:	4b42      	ldr	r3, [pc, #264]	; (800059c <fsm_automatic_run+0x270>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b03      	cmp	r3, #3
 8000496:	d874      	bhi.n	8000582 <fsm_automatic_run+0x256>
 8000498:	a201      	add	r2, pc, #4	; (adr r2, 80004a0 <fsm_automatic_run+0x174>)
 800049a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800049e:	bf00      	nop
 80004a0:	080004b1 	.word	0x080004b1
 80004a4:	080004cf 	.word	0x080004cf
 80004a8:	0800050b 	.word	0x0800050b
 80004ac:	08000547 	.word	0x08000547
		case INIT:
			anotherclearLight();
 80004b0:	f000 ff70 	bl	8001394 <anotherclearLight>
			anotherstatus = AUTO_GREEN;
 80004b4:	4b39      	ldr	r3, [pc, #228]	; (800059c <fsm_automatic_run+0x270>)
 80004b6:	2202      	movs	r2, #2
 80004b8:	601a      	str	r2, [r3, #0]
			setTimer3(time4Run[0]*1000);
 80004ba:	4b37      	ldr	r3, [pc, #220]	; (8000598 <fsm_automatic_run+0x26c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004c2:	fb02 f303 	mul.w	r3, r2, r3
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 fdae 	bl	8001028 <setTimer3>
			break;
 80004cc:	e060      	b.n	8000590 <fsm_automatic_run+0x264>

		case AUTO_RED:
			anotherturnLightOn(LED_RED);
 80004ce:	2000      	movs	r0, #0
 80004d0:	f000 ff1a 	bl	8001308 <anotherturnLightOn>
			updateVal7SEG();
 80004d4:	f000 fcae 	bl	8000e34 <updateVal7SEG>
			if (timer3_flag == 1) {
 80004d8:	4b33      	ldr	r3, [pc, #204]	; (80005a8 <fsm_automatic_run+0x27c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d152      	bne.n	8000586 <fsm_automatic_run+0x25a>
				anotherstatus = AUTO_GREEN;
 80004e0:	4b2e      	ldr	r3, [pc, #184]	; (800059c <fsm_automatic_run+0x270>)
 80004e2:	2202      	movs	r2, #2
 80004e4:	601a      	str	r2, [r3, #0]
				led_buffer[1] = led_buffer[2] = time4Run[0];
 80004e6:	4b2c      	ldr	r3, [pc, #176]	; (8000598 <fsm_automatic_run+0x26c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a2e      	ldr	r2, [pc, #184]	; (80005a4 <fsm_automatic_run+0x278>)
 80004ec:	6093      	str	r3, [r2, #8]
 80004ee:	4b2d      	ldr	r3, [pc, #180]	; (80005a4 <fsm_automatic_run+0x278>)
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	4a2c      	ldr	r2, [pc, #176]	; (80005a4 <fsm_automatic_run+0x278>)
 80004f4:	6053      	str	r3, [r2, #4]
				setTimer3(time4Run[0]*1000);
 80004f6:	4b28      	ldr	r3, [pc, #160]	; (8000598 <fsm_automatic_run+0x26c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004fe:	fb02 f303 	mul.w	r3, r2, r3
 8000502:	4618      	mov	r0, r3
 8000504:	f000 fd90 	bl	8001028 <setTimer3>
			}
			break;
 8000508:	e03d      	b.n	8000586 <fsm_automatic_run+0x25a>

		case AUTO_GREEN:
			anotherturnLightOn(LED_GREEN);
 800050a:	2001      	movs	r0, #1
 800050c:	f000 fefc 	bl	8001308 <anotherturnLightOn>
			updateVal7SEG();
 8000510:	f000 fc90 	bl	8000e34 <updateVal7SEG>
			if (timer3_flag == 1) {
 8000514:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <fsm_automatic_run+0x27c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d136      	bne.n	800058a <fsm_automatic_run+0x25e>
				anotherstatus = AUTO_YELLOW;
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <fsm_automatic_run+0x270>)
 800051e:	2203      	movs	r2, #3
 8000520:	601a      	str	r2, [r3, #0]
				led_buffer[1] = led_buffer[2] = time4Run[1];
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <fsm_automatic_run+0x26c>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	4a1f      	ldr	r2, [pc, #124]	; (80005a4 <fsm_automatic_run+0x278>)
 8000528:	6093      	str	r3, [r2, #8]
 800052a:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <fsm_automatic_run+0x278>)
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	4a1d      	ldr	r2, [pc, #116]	; (80005a4 <fsm_automatic_run+0x278>)
 8000530:	6053      	str	r3, [r2, #4]
				setTimer3(time4Run[1]*1000);
 8000532:	4b19      	ldr	r3, [pc, #100]	; (8000598 <fsm_automatic_run+0x26c>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800053a:	fb02 f303 	mul.w	r3, r2, r3
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fd72 	bl	8001028 <setTimer3>
			}
			break;
 8000544:	e021      	b.n	800058a <fsm_automatic_run+0x25e>

		case AUTO_YELLOW:
			anotherturnLightOn(LED_YELLOW);
 8000546:	2002      	movs	r0, #2
 8000548:	f000 fede 	bl	8001308 <anotherturnLightOn>
			updateVal7SEG();
 800054c:	f000 fc72 	bl	8000e34 <updateVal7SEG>
			if (timer3_flag == 1) {
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <fsm_automatic_run+0x27c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d11a      	bne.n	800058e <fsm_automatic_run+0x262>
				anotherstatus = AUTO_RED;
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <fsm_automatic_run+0x270>)
 800055a:	2201      	movs	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
				led_buffer[1] = led_buffer[2] = time4Run[2];
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <fsm_automatic_run+0x26c>)
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <fsm_automatic_run+0x278>)
 8000564:	6093      	str	r3, [r2, #8]
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <fsm_automatic_run+0x278>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <fsm_automatic_run+0x278>)
 800056c:	6053      	str	r3, [r2, #4]
				setTimer3(time4Run[2]*1000);
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <fsm_automatic_run+0x26c>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000576:	fb02 f303 	mul.w	r3, r2, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fd54 	bl	8001028 <setTimer3>
			}
			break;
 8000580:	e005      	b.n	800058e <fsm_automatic_run+0x262>

		default:
			break;
 8000582:	bf00      	nop
 8000584:	e004      	b.n	8000590 <fsm_automatic_run+0x264>
			break;
 8000586:	bf00      	nop
 8000588:	e002      	b.n	8000590 <fsm_automatic_run+0x264>
			break;
 800058a:	bf00      	nop
 800058c:	e000      	b.n	8000590 <fsm_automatic_run+0x264>
			break;
 800058e:	bf00      	nop
	}
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200000a8 	.word	0x200000a8
 8000598:	20000044 	.word	0x20000044
 800059c:	200000ac 	.word	0x200000ac
 80005a0:	20000120 	.word	0x20000120
 80005a4:	20000050 	.word	0x20000050
 80005a8:	20000130 	.word	0x20000130

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 ff22 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f822 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f8a8 	bl	800070c <MX_GPIO_Init>
  MX_TIM2_Init();
 80005bc:	f000 f85a 	bl	8000674 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <main+0x44>)
 80005c2:	f001 fe85 	bl	80022d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  status = INIT;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <main+0x48>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
  anotherstatus = INIT;
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <main+0x4c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]

  setTimer4(10);
 80005d2:	200a      	movs	r0, #10
 80005d4:	f000 fd42 	bl	800105c <setTimer4>
  setTimer5(1000);
 80005d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005dc:	f000 fd58 	bl	8001090 <setTimer5>

  while (1)
  {
	  scan7SEG();
 80005e0:	f000 fc6e 	bl	8000ec0 <scan7SEG>
	  fsm_automatic_run();
 80005e4:	f7ff fea2 	bl	800032c <fsm_automatic_run>
	  mode2();
 80005e8:	f000 f904 	bl	80007f4 <mode2>
	  scan7SEG();
 80005ec:	e7f8      	b.n	80005e0 <main+0x34>
 80005ee:	bf00      	nop
 80005f0:	200000b0 	.word	0x200000b0
 80005f4:	200000a8 	.word	0x200000a8
 80005f8:	200000ac 	.word	0x200000ac

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b090      	sub	sp, #64	; 0x40
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0318 	add.w	r3, r7, #24
 8000606:	2228      	movs	r2, #40	; 0x28
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fa18 	bl	8002a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061e:	2302      	movs	r3, #2
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000622:	2301      	movs	r3, #1
 8000624:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000626:	2310      	movs	r3, #16
 8000628:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062a:	2300      	movs	r3, #0
 800062c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	4618      	mov	r0, r3
 8000634:	f001 fa14 	bl	8001a60 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800063e:	f000 f8d3 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fc82 	bl	8001f64 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000666:	f000 f8bf 	bl	80007e8 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3740      	adds	r7, #64	; 0x40
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_TIM2_Init+0x94>)
 8000692:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000696:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_TIM2_Init+0x94>)
 800069a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800069e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <MX_TIM2_Init+0x94>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_TIM2_Init+0x94>)
 80006a8:	2209      	movs	r2, #9
 80006aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_TIM2_Init+0x94>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_TIM2_Init+0x94>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006b8:	4813      	ldr	r0, [pc, #76]	; (8000708 <MX_TIM2_Init+0x94>)
 80006ba:	f001 fdb9 	bl	8002230 <HAL_TIM_Base_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006c4:	f000 f890 	bl	80007e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4619      	mov	r1, r3
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <MX_TIM2_Init+0x94>)
 80006d6:	f001 ff4f 	bl	8002578 <HAL_TIM_ConfigClockSource>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006e0:	f000 f882 	bl	80007e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_TIM2_Init+0x94>)
 80006f2:	f002 f917 	bl	8002924 <HAL_TIMEx_MasterConfigSynchronization>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006fc:	f000 f874 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000b0 	.word	0x200000b0

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <MX_GPIO_Init+0xb8>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a27      	ldr	r2, [pc, #156]	; (80007c4 <MX_GPIO_Init+0xb8>)
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <MX_GPIO_Init+0xb8>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0304 	and.w	r3, r3, #4
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <MX_GPIO_Init+0xb8>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <MX_GPIO_Init+0xb8>)
 800073e:	f043 0308 	orr.w	r3, r3, #8
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_GPIO_Init+0xb8>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0308 	and.w	r3, r3, #8
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, output0_Pin|output1_Pin|output2_Pin|output3_Pin
 8000750:	2200      	movs	r2, #0
 8000752:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000756:	481c      	ldr	r0, [pc, #112]	; (80007c8 <MX_GPIO_Init+0xbc>)
 8000758:	f001 f951 	bl	80019fe <HAL_GPIO_WritePin>
                          |output4_Pin|output5_Pin|q0_Pin|q1_Pin
                          |seg0_Pin|seg1_Pin|seg2_Pin|seg3_Pin
                          |seg4_Pin|seg5_Pin|seg6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, aseg5_Pin|aseg6_Pin|q2_Pin|q3_Pin
 800075c:	2200      	movs	r2, #0
 800075e:	f640 71f8 	movw	r1, #4088	; 0xff8
 8000762:	481a      	ldr	r0, [pc, #104]	; (80007cc <MX_GPIO_Init+0xc0>)
 8000764:	f001 f94b 	bl	80019fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : output0_Pin output1_Pin output2_Pin output3_Pin
                           output4_Pin output5_Pin q0_Pin q1_Pin
                           seg0_Pin seg1_Pin seg2_Pin seg3_Pin
                           seg4_Pin seg5_Pin seg6_Pin */
  GPIO_InitStruct.Pin = output0_Pin|output1_Pin|output2_Pin|output3_Pin
 8000768:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800076c:	60bb      	str	r3, [r7, #8]
                          |output4_Pin|output5_Pin|q0_Pin|q1_Pin
                          |seg0_Pin|seg1_Pin|seg2_Pin|seg3_Pin
                          |seg4_Pin|seg5_Pin|seg6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2302      	movs	r3, #2
 8000778:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	4619      	mov	r1, r3
 8000780:	4811      	ldr	r0, [pc, #68]	; (80007c8 <MX_GPIO_Init+0xbc>)
 8000782:	f000 ffa9 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : button0_Pin button1_Pin button2_Pin */
  GPIO_InitStruct.Pin = button0_Pin|button1_Pin|button2_Pin;
 8000786:	2307      	movs	r3, #7
 8000788:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	4619      	mov	r1, r3
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <MX_GPIO_Init+0xc0>)
 800079a:	f000 ff9d 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : aseg5_Pin aseg6_Pin q2_Pin q3_Pin
                           aseg0_Pin aseg1_Pin aseg2_Pin aseg3_Pin
                           aseg4_Pin */
  GPIO_InitStruct.Pin = aseg5_Pin|aseg6_Pin|q2_Pin|q3_Pin
 800079e:	f640 73f8 	movw	r3, #4088	; 0xff8
 80007a2:	60bb      	str	r3, [r7, #8]
                          |aseg0_Pin|aseg1_Pin|aseg2_Pin|aseg3_Pin
                          |aseg4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2302      	movs	r3, #2
 80007ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	4619      	mov	r1, r3
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_GPIO_Init+0xc0>)
 80007b8:	f000 ff8e 	bl	80016d8 <HAL_GPIO_Init>

}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010800 	.word	0x40010800
 80007cc:	40010c00 	.word	0x40010c00

080007d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	timerRun();
 80007d8:	f000 fc74 	bl	80010c4 <timerRun>
	getKeyInput();
 80007dc:	f7ff fcfa 	bl	80001d4 <getKeyInput>
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <Error_Handler+0x8>
	...

080007f4 <mode2>:
 *      Author: LENOVO
 */

#include "mode2.h"

void mode2() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
	setTimer2(10);
 80007fa:	200a      	movs	r0, #10
 80007fc:	f000 fbfa 	bl	8000ff4 <setTimer2>
	switch (status) {
 8000800:	4b96      	ldr	r3, [pc, #600]	; (8000a5c <mode2+0x268>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b0e      	cmp	r3, #14
 8000806:	f000 8141 	beq.w	8000a8c <mode2+0x298>
 800080a:	2b0e      	cmp	r3, #14
 800080c:	f300 81d2 	bgt.w	8000bb4 <mode2+0x3c0>
 8000810:	2b0c      	cmp	r3, #12
 8000812:	d003      	beq.n	800081c <mode2+0x28>
 8000814:	2b0d      	cmp	r3, #13
 8000816:	f000 8097 	beq.w	8000948 <mode2+0x154>
				for (int i = 0; i < 4; i++) led_fake[i] = 0;
			}
			break;

		default:
			break;
 800081a:	e1cb      	b.n	8000bb4 <mode2+0x3c0>
			blinkyLed(LED_RED);
 800081c:	2000      	movs	r0, #0
 800081e:	f000 fb9b 	bl	8000f58 <blinkyLed>
			if (isButtonPressed(0) || isButtonLPressed(0)) status = MAN_YELLOW;
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff fc92 	bl	800014c <isButtonPressed>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d105      	bne.n	800083a <mode2+0x46>
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff fca6 	bl	8000180 <isButtonLPressed>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d002      	beq.n	8000840 <mode2+0x4c>
 800083a:	4b88      	ldr	r3, [pc, #544]	; (8000a5c <mode2+0x268>)
 800083c:	220e      	movs	r2, #14
 800083e:	601a      	str	r2, [r3, #0]
			led_buffer[1] = led_fake[1] = 2;
 8000840:	4b87      	ldr	r3, [pc, #540]	; (8000a60 <mode2+0x26c>)
 8000842:	2202      	movs	r2, #2
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	4b86      	ldr	r3, [pc, #536]	; (8000a60 <mode2+0x26c>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	4a86      	ldr	r2, [pc, #536]	; (8000a64 <mode2+0x270>)
 800084c:	6053      	str	r3, [r2, #4]
			if (isButtonPressed(1)) {
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff fc7c 	bl	800014c <isButtonPressed>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d01b      	beq.n	8000892 <mode2+0x9e>
				if (led_fake[3] >= 9) {
 800085a:	4b81      	ldr	r3, [pc, #516]	; (8000a60 <mode2+0x26c>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	2b08      	cmp	r3, #8
 8000860:	dd07      	ble.n	8000872 <mode2+0x7e>
					++led_fake[2];
 8000862:	4b7f      	ldr	r3, [pc, #508]	; (8000a60 <mode2+0x26c>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	3301      	adds	r3, #1
 8000868:	4a7d      	ldr	r2, [pc, #500]	; (8000a60 <mode2+0x26c>)
 800086a:	6093      	str	r3, [r2, #8]
					led_fake[3] = 0;
 800086c:	4b7c      	ldr	r3, [pc, #496]	; (8000a60 <mode2+0x26c>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
				if (led_fake[2] >= 9) {
 8000872:	4b7b      	ldr	r3, [pc, #492]	; (8000a60 <mode2+0x26c>)
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	2b08      	cmp	r3, #8
 8000878:	dd06      	ble.n	8000888 <mode2+0x94>
					led_fake[2] = 0;
 800087a:	4b79      	ldr	r3, [pc, #484]	; (8000a60 <mode2+0x26c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
					led_fake[3] = 1;
 8000880:	4b77      	ldr	r3, [pc, #476]	; (8000a60 <mode2+0x26c>)
 8000882:	2201      	movs	r2, #1
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	e004      	b.n	8000892 <mode2+0x9e>
				else ++led_fake[3];
 8000888:	4b75      	ldr	r3, [pc, #468]	; (8000a60 <mode2+0x26c>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	3301      	adds	r3, #1
 800088e:	4a74      	ldr	r2, [pc, #464]	; (8000a60 <mode2+0x26c>)
 8000890:	60d3      	str	r3, [r2, #12]
			if (isButtonLPressed(1)) {
 8000892:	2001      	movs	r0, #1
 8000894:	f7ff fc74 	bl	8000180 <isButtonLPressed>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d01f      	beq.n	80008de <mode2+0xea>
				if (timer1_flag) {
 800089e:	4b72      	ldr	r3, [pc, #456]	; (8000a68 <mode2+0x274>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d01b      	beq.n	80008de <mode2+0xea>
					if (led_fake[3] >= 9) {
 80008a6:	4b6e      	ldr	r3, [pc, #440]	; (8000a60 <mode2+0x26c>)
 80008a8:	68db      	ldr	r3, [r3, #12]
 80008aa:	2b08      	cmp	r3, #8
 80008ac:	dd07      	ble.n	80008be <mode2+0xca>
						++led_fake[2];
 80008ae:	4b6c      	ldr	r3, [pc, #432]	; (8000a60 <mode2+0x26c>)
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	3301      	adds	r3, #1
 80008b4:	4a6a      	ldr	r2, [pc, #424]	; (8000a60 <mode2+0x26c>)
 80008b6:	6093      	str	r3, [r2, #8]
						led_fake[3] = 0;
 80008b8:	4b69      	ldr	r3, [pc, #420]	; (8000a60 <mode2+0x26c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
					if (led_fake[2] >= 9) {
 80008be:	4b68      	ldr	r3, [pc, #416]	; (8000a60 <mode2+0x26c>)
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	2b08      	cmp	r3, #8
 80008c4:	dd06      	ble.n	80008d4 <mode2+0xe0>
						led_fake[2] = 0;
 80008c6:	4b66      	ldr	r3, [pc, #408]	; (8000a60 <mode2+0x26c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
						led_fake[3] = 1;
 80008cc:	4b64      	ldr	r3, [pc, #400]	; (8000a60 <mode2+0x26c>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	e004      	b.n	80008de <mode2+0xea>
					else ++led_fake[3];
 80008d4:	4b62      	ldr	r3, [pc, #392]	; (8000a60 <mode2+0x26c>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	3301      	adds	r3, #1
 80008da:	4a61      	ldr	r2, [pc, #388]	; (8000a60 <mode2+0x26c>)
 80008dc:	60d3      	str	r3, [r2, #12]
			led_buffer[2] = led_fake[2];
 80008de:	4b60      	ldr	r3, [pc, #384]	; (8000a60 <mode2+0x26c>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	4a60      	ldr	r2, [pc, #384]	; (8000a64 <mode2+0x270>)
 80008e4:	6093      	str	r3, [r2, #8]
			led_buffer[3] = led_fake[3];
 80008e6:	4b5e      	ldr	r3, [pc, #376]	; (8000a60 <mode2+0x26c>)
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	4a5e      	ldr	r2, [pc, #376]	; (8000a64 <mode2+0x270>)
 80008ec:	60d3      	str	r3, [r2, #12]
			if (isButtonPressed(2)) {
 80008ee:	2002      	movs	r0, #2
 80008f0:	f7ff fc2c 	bl	800014c <isButtonPressed>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f000 815e 	beq.w	8000bb8 <mode2+0x3c4>
				status = INIT;
 80008fc:	4b57      	ldr	r3, [pc, #348]	; (8000a5c <mode2+0x268>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
				led_buffer[1] = led_buffer[2] = mem;
 8000902:	4b5a      	ldr	r3, [pc, #360]	; (8000a6c <mode2+0x278>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a57      	ldr	r2, [pc, #348]	; (8000a64 <mode2+0x270>)
 8000908:	6093      	str	r3, [r2, #8]
 800090a:	4b56      	ldr	r3, [pc, #344]	; (8000a64 <mode2+0x270>)
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	4a55      	ldr	r2, [pc, #340]	; (8000a64 <mode2+0x270>)
 8000910:	6053      	str	r3, [r2, #4]
				time4Run[2] = led_fake[2]*10 + led_fake[3];
 8000912:	4b53      	ldr	r3, [pc, #332]	; (8000a60 <mode2+0x26c>)
 8000914:	689a      	ldr	r2, [r3, #8]
 8000916:	4613      	mov	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4413      	add	r3, r2
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	461a      	mov	r2, r3
 8000920:	4b4f      	ldr	r3, [pc, #316]	; (8000a60 <mode2+0x26c>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	4413      	add	r3, r2
 8000926:	4a52      	ldr	r2, [pc, #328]	; (8000a70 <mode2+0x27c>)
 8000928:	6093      	str	r3, [r2, #8]
				for (int i = 0; i < 4; i++) led_fake[i] = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	e007      	b.n	8000940 <mode2+0x14c>
 8000930:	4a4b      	ldr	r2, [pc, #300]	; (8000a60 <mode2+0x26c>)
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2100      	movs	r1, #0
 8000936:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3301      	adds	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b03      	cmp	r3, #3
 8000944:	ddf4      	ble.n	8000930 <mode2+0x13c>
			break;
 8000946:	e137      	b.n	8000bb8 <mode2+0x3c4>
			clearLight();
 8000948:	f000 fd18 	bl	800137c <clearLight>
			anotherclearLight();
 800094c:	f000 fd22 	bl	8001394 <anotherclearLight>
			blinkyLed(LED_GREEN);
 8000950:	2001      	movs	r0, #1
 8000952:	f000 fb01 	bl	8000f58 <blinkyLed>
			if (isButtonPressed(0)) status = INIT;
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff fbf8 	bl	800014c <isButtonPressed>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d002      	beq.n	8000968 <mode2+0x174>
 8000962:	4b3e      	ldr	r3, [pc, #248]	; (8000a5c <mode2+0x268>)
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
			led_buffer[1] = led_fake[1] = 4;
 8000968:	4b3d      	ldr	r3, [pc, #244]	; (8000a60 <mode2+0x26c>)
 800096a:	2204      	movs	r2, #4
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	4b3c      	ldr	r3, [pc, #240]	; (8000a60 <mode2+0x26c>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	4a3c      	ldr	r2, [pc, #240]	; (8000a64 <mode2+0x270>)
 8000974:	6053      	str	r3, [r2, #4]
			if (isButtonPressed(1)) {
 8000976:	2001      	movs	r0, #1
 8000978:	f7ff fbe8 	bl	800014c <isButtonPressed>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d01b      	beq.n	80009ba <mode2+0x1c6>
				if (led_fake[3] >= 9) {
 8000982:	4b37      	ldr	r3, [pc, #220]	; (8000a60 <mode2+0x26c>)
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	2b08      	cmp	r3, #8
 8000988:	dd07      	ble.n	800099a <mode2+0x1a6>
					++led_fake[2];
 800098a:	4b35      	ldr	r3, [pc, #212]	; (8000a60 <mode2+0x26c>)
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	3301      	adds	r3, #1
 8000990:	4a33      	ldr	r2, [pc, #204]	; (8000a60 <mode2+0x26c>)
 8000992:	6093      	str	r3, [r2, #8]
					led_fake[3] = 0;
 8000994:	4b32      	ldr	r3, [pc, #200]	; (8000a60 <mode2+0x26c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
				if (led_fake[2] >= 9) {
 800099a:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <mode2+0x26c>)
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	2b08      	cmp	r3, #8
 80009a0:	dd06      	ble.n	80009b0 <mode2+0x1bc>
					led_fake[2] = 0;
 80009a2:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <mode2+0x26c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
					led_fake[3] = 1;
 80009a8:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <mode2+0x26c>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	e004      	b.n	80009ba <mode2+0x1c6>
				else ++led_fake[3];
 80009b0:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <mode2+0x26c>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	3301      	adds	r3, #1
 80009b6:	4a2a      	ldr	r2, [pc, #168]	; (8000a60 <mode2+0x26c>)
 80009b8:	60d3      	str	r3, [r2, #12]
			if (isButtonLPressed(1)) {
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff fbe0 	bl	8000180 <isButtonLPressed>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d01f      	beq.n	8000a06 <mode2+0x212>
				if (timer1_flag) {
 80009c6:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <mode2+0x274>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d01b      	beq.n	8000a06 <mode2+0x212>
					if (led_fake[3] >= 9) {
 80009ce:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <mode2+0x26c>)
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	2b08      	cmp	r3, #8
 80009d4:	dd07      	ble.n	80009e6 <mode2+0x1f2>
						++led_fake[2];
 80009d6:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <mode2+0x26c>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	3301      	adds	r3, #1
 80009dc:	4a20      	ldr	r2, [pc, #128]	; (8000a60 <mode2+0x26c>)
 80009de:	6093      	str	r3, [r2, #8]
						led_fake[3] = 0;
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <mode2+0x26c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
					if (led_fake[2] >= 9) {
 80009e6:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <mode2+0x26c>)
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	2b08      	cmp	r3, #8
 80009ec:	dd06      	ble.n	80009fc <mode2+0x208>
						led_fake[2] = 0;
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <mode2+0x26c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
						led_fake[3] = 1;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <mode2+0x26c>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	e004      	b.n	8000a06 <mode2+0x212>
					else ++led_fake[3];
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <mode2+0x26c>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <mode2+0x26c>)
 8000a04:	60d3      	str	r3, [r2, #12]
			led_buffer[2] = led_fake[2];
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <mode2+0x26c>)
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <mode2+0x270>)
 8000a0c:	6093      	str	r3, [r2, #8]
			led_buffer[3] = led_fake[3];
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <mode2+0x26c>)
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	4a14      	ldr	r2, [pc, #80]	; (8000a64 <mode2+0x270>)
 8000a14:	60d3      	str	r3, [r2, #12]
			if (isButtonPressed(2)) {
 8000a16:	2002      	movs	r0, #2
 8000a18:	f7ff fb98 	bl	800014c <isButtonPressed>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f000 80cc 	beq.w	8000bbc <mode2+0x3c8>
				status = INIT;
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <mode2+0x268>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
				led_buffer[1] = led_buffer[2] = mem;
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <mode2+0x278>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <mode2+0x270>)
 8000a30:	6093      	str	r3, [r2, #8]
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <mode2+0x270>)
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <mode2+0x270>)
 8000a38:	6053      	str	r3, [r2, #4]
				time4Run[0] = led_fake[2]*10 + led_fake[3] + 1;
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <mode2+0x26c>)
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4413      	add	r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <mode2+0x26c>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	3301      	adds	r3, #1
 8000a50:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <mode2+0x27c>)
 8000a52:	6013      	str	r3, [r2, #0]
				for (int i = 0; i < 4; i++) led_fake[i] = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	e014      	b.n	8000a84 <mode2+0x290>
 8000a5a:	bf00      	nop
 8000a5c:	200000a8 	.word	0x200000a8
 8000a60:	200000f8 	.word	0x200000f8
 8000a64:	20000050 	.word	0x20000050
 8000a68:	20000120 	.word	0x20000120
 8000a6c:	20000060 	.word	0x20000060
 8000a70:	20000044 	.word	0x20000044
 8000a74:	4a55      	ldr	r2, [pc, #340]	; (8000bcc <mode2+0x3d8>)
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	2100      	movs	r1, #0
 8000a7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	ddf4      	ble.n	8000a74 <mode2+0x280>
			break;
 8000a8a:	e097      	b.n	8000bbc <mode2+0x3c8>
			clearLight();
 8000a8c:	f000 fc76 	bl	800137c <clearLight>
			anotherclearLight();
 8000a90:	f000 fc80 	bl	8001394 <anotherclearLight>
			blinkyLed(LED_YELLOW);
 8000a94:	2002      	movs	r0, #2
 8000a96:	f000 fa5f 	bl	8000f58 <blinkyLed>
			if (isButtonPressed(0)) status = MAN_GREEN;
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fb56 	bl	800014c <isButtonPressed>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <mode2+0x2b8>
 8000aa6:	4b4a      	ldr	r3, [pc, #296]	; (8000bd0 <mode2+0x3dc>)
 8000aa8:	220d      	movs	r2, #13
 8000aaa:	601a      	str	r2, [r3, #0]
			led_buffer[1] = led_fake[1] = 3;
 8000aac:	4b47      	ldr	r3, [pc, #284]	; (8000bcc <mode2+0x3d8>)
 8000aae:	2203      	movs	r2, #3
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	4b46      	ldr	r3, [pc, #280]	; (8000bcc <mode2+0x3d8>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	4a47      	ldr	r2, [pc, #284]	; (8000bd4 <mode2+0x3e0>)
 8000ab8:	6053      	str	r3, [r2, #4]
			if (isButtonPressed(1)) {
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff fb46 	bl	800014c <isButtonPressed>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d01b      	beq.n	8000afe <mode2+0x30a>
				if (led_fake[3] >= 9) {
 8000ac6:	4b41      	ldr	r3, [pc, #260]	; (8000bcc <mode2+0x3d8>)
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	2b08      	cmp	r3, #8
 8000acc:	dd07      	ble.n	8000ade <mode2+0x2ea>
					++led_fake[2];
 8000ace:	4b3f      	ldr	r3, [pc, #252]	; (8000bcc <mode2+0x3d8>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	4a3d      	ldr	r2, [pc, #244]	; (8000bcc <mode2+0x3d8>)
 8000ad6:	6093      	str	r3, [r2, #8]
					led_fake[3] = 0;
 8000ad8:	4b3c      	ldr	r3, [pc, #240]	; (8000bcc <mode2+0x3d8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
				if (led_fake[2] >= 9) {
 8000ade:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <mode2+0x3d8>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	2b08      	cmp	r3, #8
 8000ae4:	dd06      	ble.n	8000af4 <mode2+0x300>
					led_fake[2] = 0;
 8000ae6:	4b39      	ldr	r3, [pc, #228]	; (8000bcc <mode2+0x3d8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
					led_fake[3] = 1;
 8000aec:	4b37      	ldr	r3, [pc, #220]	; (8000bcc <mode2+0x3d8>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	e004      	b.n	8000afe <mode2+0x30a>
				else ++led_fake[3];
 8000af4:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <mode2+0x3d8>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	3301      	adds	r3, #1
 8000afa:	4a34      	ldr	r2, [pc, #208]	; (8000bcc <mode2+0x3d8>)
 8000afc:	60d3      	str	r3, [r2, #12]
			if (isButtonLPressed(1)) {
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff fb3e 	bl	8000180 <isButtonLPressed>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d01f      	beq.n	8000b4a <mode2+0x356>
				if (timer1_flag) {
 8000b0a:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <mode2+0x3e4>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d01b      	beq.n	8000b4a <mode2+0x356>
					if (led_fake[3] >= 9) {
 8000b12:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <mode2+0x3d8>)
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	2b08      	cmp	r3, #8
 8000b18:	dd07      	ble.n	8000b2a <mode2+0x336>
						++led_fake[2];
 8000b1a:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <mode2+0x3d8>)
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	4a2a      	ldr	r2, [pc, #168]	; (8000bcc <mode2+0x3d8>)
 8000b22:	6093      	str	r3, [r2, #8]
						led_fake[3] = 0;
 8000b24:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <mode2+0x3d8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
					if (led_fake[2] >= 9) {
 8000b2a:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <mode2+0x3d8>)
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	2b08      	cmp	r3, #8
 8000b30:	dd06      	ble.n	8000b40 <mode2+0x34c>
						led_fake[2] = 0;
 8000b32:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <mode2+0x3d8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
						led_fake[3] = 1;
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <mode2+0x3d8>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	e004      	b.n	8000b4a <mode2+0x356>
					else ++led_fake[3];
 8000b40:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <mode2+0x3d8>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	3301      	adds	r3, #1
 8000b46:	4a21      	ldr	r2, [pc, #132]	; (8000bcc <mode2+0x3d8>)
 8000b48:	60d3      	str	r3, [r2, #12]
			led_buffer[2] = led_fake[2];
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <mode2+0x3d8>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <mode2+0x3e0>)
 8000b50:	6093      	str	r3, [r2, #8]
			led_buffer[3] = led_fake[3];
 8000b52:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <mode2+0x3d8>)
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	4a1f      	ldr	r2, [pc, #124]	; (8000bd4 <mode2+0x3e0>)
 8000b58:	60d3      	str	r3, [r2, #12]
			if (isButtonPressed(2)) {
 8000b5a:	2002      	movs	r0, #2
 8000b5c:	f7ff faf6 	bl	800014c <isButtonPressed>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d02c      	beq.n	8000bc0 <mode2+0x3cc>
				status = INIT;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <mode2+0x3dc>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
				led_buffer[1] = led_buffer[2] = mem;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <mode2+0x3e8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <mode2+0x3e0>)
 8000b72:	6093      	str	r3, [r2, #8]
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <mode2+0x3e0>)
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	4a16      	ldr	r2, [pc, #88]	; (8000bd4 <mode2+0x3e0>)
 8000b7a:	6053      	str	r3, [r2, #4]
				time4Run[1] = led_fake[2]*10 + led_fake[3] + 1;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <mode2+0x3d8>)
 8000b7e:	689a      	ldr	r2, [r3, #8]
 8000b80:	4613      	mov	r3, r2
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	4413      	add	r3, r2
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <mode2+0x3d8>)
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	4413      	add	r3, r2
 8000b90:	3301      	adds	r3, #1
 8000b92:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <mode2+0x3ec>)
 8000b94:	6053      	str	r3, [r2, #4]
				for (int i = 0; i < 4; i++) led_fake[i] = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	e007      	b.n	8000bac <mode2+0x3b8>
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <mode2+0x3d8>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	ddf4      	ble.n	8000b9c <mode2+0x3a8>
			break;
 8000bb2:	e005      	b.n	8000bc0 <mode2+0x3cc>
			break;
 8000bb4:	bf00      	nop
 8000bb6:	e004      	b.n	8000bc2 <mode2+0x3ce>
			break;
 8000bb8:	bf00      	nop
 8000bba:	e002      	b.n	8000bc2 <mode2+0x3ce>
			break;
 8000bbc:	bf00      	nop
 8000bbe:	e000      	b.n	8000bc2 <mode2+0x3ce>
			break;
 8000bc0:	bf00      	nop
	}
}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200000f8 	.word	0x200000f8
 8000bd0:	200000a8 	.word	0x200000a8
 8000bd4:	20000050 	.word	0x20000050
 8000bd8:	20000120 	.word	0x20000120
 8000bdc:	20000060 	.word	0x20000060
 8000be0:	20000044 	.word	0x20000044

08000be4 <display7SEG>:
int led_fake[4] = {0,0,0,0};
int index_led = 0;
int mem = 3;
int remember[4] = {0,0,0,0};

void display7SEG(int num) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b09      	cmp	r3, #9
 8000bf0:	f200 8094 	bhi.w	8000d1c <display7SEG+0x138>
 8000bf4:	a201      	add	r2, pc, #4	; (adr r2, 8000bfc <display7SEG+0x18>)
 8000bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfa:	bf00      	nop
 8000bfc:	08000c25 	.word	0x08000c25
 8000c00:	08000c3f 	.word	0x08000c3f
 8000c04:	08000c59 	.word	0x08000c59
 8000c08:	08000c73 	.word	0x08000c73
 8000c0c:	08000c8d 	.word	0x08000c8d
 8000c10:	08000ca7 	.word	0x08000ca7
 8000c14:	08000cc1 	.word	0x08000cc1
 8000c18:	08000cdb 	.word	0x08000cdb
 8000c1c:	08000cf5 	.word	0x08000cf5
 8000c20:	08000d03 	.word	0x08000d03
		case 0:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg1_Pin|seg2_Pin|seg3_Pin|seg4_Pin|seg5_Pin, RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 8000c2a:	483e      	ldr	r0, [pc, #248]	; (8000d24 <display7SEG+0x140>)
 8000c2c:	f000 fee7 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg6_GPIO_Port, seg6_Pin, SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c36:	483b      	ldr	r0, [pc, #236]	; (8000d24 <display7SEG+0x140>)
 8000c38:	f000 fee1 	bl	80019fe <HAL_GPIO_WritePin>
			break;
 8000c3c:	e06e      	b.n	8000d1c <display7SEG+0x138>
		case 1:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg3_Pin|seg4_Pin|seg5_Pin|seg6_Pin, SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f44f 41f2 	mov.w	r1, #30976	; 0x7900
 8000c44:	4837      	ldr	r0, [pc, #220]	; (8000d24 <display7SEG+0x140>)
 8000c46:	f000 feda 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, seg1_Pin|seg2_Pin, RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000c50:	4834      	ldr	r0, [pc, #208]	; (8000d24 <display7SEG+0x140>)
 8000c52:	f000 fed4 	bl	80019fe <HAL_GPIO_WritePin>
			break;
 8000c56:	e061      	b.n	8000d1c <display7SEG+0x138>
		case 2:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg3_Pin|seg4_Pin|seg1_Pin|seg6_Pin, RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8000c5e:	4831      	ldr	r0, [pc, #196]	; (8000d24 <display7SEG+0x140>)
 8000c60:	f000 fecd 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, seg5_Pin|seg2_Pin, SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000c6a:	482e      	ldr	r0, [pc, #184]	; (8000d24 <display7SEG+0x140>)
 8000c6c:	f000 fec7 	bl	80019fe <HAL_GPIO_WritePin>
			break;
 8000c70:	e054      	b.n	8000d1c <display7SEG+0x138>
		case 3:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg3_Pin|seg1_Pin|seg2_Pin|seg6_Pin, RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 419e 	mov.w	r1, #20224	; 0x4f00
 8000c78:	482a      	ldr	r0, [pc, #168]	; (8000d24 <display7SEG+0x140>)
 8000c7a:	f000 fec0 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, seg4_Pin|seg5_Pin, SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c84:	4827      	ldr	r0, [pc, #156]	; (8000d24 <display7SEG+0x140>)
 8000c86:	f000 feba 	bl	80019fe <HAL_GPIO_WritePin>
			break;
 8000c8a:	e047      	b.n	8000d1c <display7SEG+0x138>
		case 4:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg3_Pin|seg4_Pin, SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8000c92:	4824      	ldr	r0, [pc, #144]	; (8000d24 <display7SEG+0x140>)
 8000c94:	f000 feb3 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, seg1_Pin|seg2_Pin|seg5_Pin|seg6_Pin, RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 41cc 	mov.w	r1, #26112	; 0x6600
 8000c9e:	4821      	ldr	r0, [pc, #132]	; (8000d24 <display7SEG+0x140>)
 8000ca0:	f000 fead 	bl	80019fe <HAL_GPIO_WritePin>
			break;
 8000ca4:	e03a      	b.n	8000d1c <display7SEG+0x138>
		case 5:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg3_Pin|seg2_Pin|seg5_Pin|seg6_Pin, RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 41da 	mov.w	r1, #27904	; 0x6d00
 8000cac:	481d      	ldr	r0, [pc, #116]	; (8000d24 <display7SEG+0x140>)
 8000cae:	f000 fea6 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, seg1_Pin|seg4_Pin, SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000cb8:	481a      	ldr	r0, [pc, #104]	; (8000d24 <display7SEG+0x140>)
 8000cba:	f000 fea0 	bl	80019fe <HAL_GPIO_WritePin>
			break;
 8000cbe:	e02d      	b.n	8000d1c <display7SEG+0x138>
		case 6:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg2_Pin|seg3_Pin|seg4_Pin|seg5_Pin|seg6_Pin, RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8000cc6:	4817      	ldr	r0, [pc, #92]	; (8000d24 <display7SEG+0x140>)
 8000cc8:	f000 fe99 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd2:	4814      	ldr	r0, [pc, #80]	; (8000d24 <display7SEG+0x140>)
 8000cd4:	f000 fe93 	bl	80019fe <HAL_GPIO_WritePin>
			break;
 8000cd8:	e020      	b.n	8000d1c <display7SEG+0x138>
		case 7:
			HAL_GPIO_WritePin(GPIOA, seg3_Pin|seg4_Pin|seg5_Pin|seg6_Pin, SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8000ce0:	4810      	ldr	r0, [pc, #64]	; (8000d24 <display7SEG+0x140>)
 8000ce2:	f000 fe8c 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg1_Pin|seg2_Pin, RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <display7SEG+0x140>)
 8000cee:	f000 fe86 	bl	80019fe <HAL_GPIO_WritePin>
			break;
 8000cf2:	e013      	b.n	8000d1c <display7SEG+0x138>
		case 8:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg1_Pin|seg2_Pin|seg3_Pin|seg4_Pin|seg5_Pin|seg6_Pin, RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8000cfa:	480a      	ldr	r0, [pc, #40]	; (8000d24 <display7SEG+0x140>)
 8000cfc:	f000 fe7f 	bl	80019fe <HAL_GPIO_WritePin>
			break;
 8000d00:	e00c      	b.n	8000d1c <display7SEG+0x138>
		case 9:
			HAL_GPIO_WritePin(GPIOA, seg0_Pin|seg1_Pin|seg2_Pin|seg3_Pin|seg5_Pin|seg6_Pin, RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 8000d08:	4806      	ldr	r0, [pc, #24]	; (8000d24 <display7SEG+0x140>)
 8000d0a:	f000 fe78 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d14:	4803      	ldr	r0, [pc, #12]	; (8000d24 <display7SEG+0x140>)
 8000d16:	f000 fe72 	bl	80019fe <HAL_GPIO_WritePin>
			break;
 8000d1a:	bf00      	nop
	}
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40010800 	.word	0x40010800

08000d28 <update7SEG>:
			HAL_GPIO_WritePin(aseg4_GPIO_Port, aseg4_Pin, SET);
			break;
	}
}

void update7SEG (int index) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	switch (index) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d872      	bhi.n	8000e1c <update7SEG+0xf4>
 8000d36:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <update7SEG+0x14>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000d4d 	.word	0x08000d4d
 8000d40:	08000d81 	.word	0x08000d81
 8000d44:	08000db5 	.word	0x08000db5
 8000d48:	08000de9 	.word	0x08000de9
		case 0:
			HAL_GPIO_WritePin(q0_GPIO_Port, q0_Pin, RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2140      	movs	r1, #64	; 0x40
 8000d50:	4835      	ldr	r0, [pc, #212]	; (8000e28 <update7SEG+0x100>)
 8000d52:	f000 fe54 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q1_GPIO_Port, q1_Pin, SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	4833      	ldr	r0, [pc, #204]	; (8000e28 <update7SEG+0x100>)
 8000d5c:	f000 fe4f 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q2_GPIO_Port, q2_Pin, SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2108      	movs	r1, #8
 8000d64:	4831      	ldr	r0, [pc, #196]	; (8000e2c <update7SEG+0x104>)
 8000d66:	f000 fe4a 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q3_GPIO_Port, q3_Pin, SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	482f      	ldr	r0, [pc, #188]	; (8000e2c <update7SEG+0x104>)
 8000d70:	f000 fe45 	bl	80019fe <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000d74:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <update7SEG+0x108>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff33 	bl	8000be4 <display7SEG>
			break;
 8000d7e:	e04e      	b.n	8000e1e <update7SEG+0xf6>
		case 1:
			HAL_GPIO_WritePin(q0_GPIO_Port, q0_Pin, SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2140      	movs	r1, #64	; 0x40
 8000d84:	4828      	ldr	r0, [pc, #160]	; (8000e28 <update7SEG+0x100>)
 8000d86:	f000 fe3a 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q1_GPIO_Port, q1_Pin, RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	4826      	ldr	r0, [pc, #152]	; (8000e28 <update7SEG+0x100>)
 8000d90:	f000 fe35 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q2_GPIO_Port, q2_Pin, SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	2108      	movs	r1, #8
 8000d98:	4824      	ldr	r0, [pc, #144]	; (8000e2c <update7SEG+0x104>)
 8000d9a:	f000 fe30 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q3_GPIO_Port, q3_Pin, SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2110      	movs	r1, #16
 8000da2:	4822      	ldr	r0, [pc, #136]	; (8000e2c <update7SEG+0x104>)
 8000da4:	f000 fe2b 	bl	80019fe <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000da8:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <update7SEG+0x108>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff19 	bl	8000be4 <display7SEG>
			break;
 8000db2:	e034      	b.n	8000e1e <update7SEG+0xf6>
		case 2:
			HAL_GPIO_WritePin(q0_GPIO_Port, q0_Pin, SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2140      	movs	r1, #64	; 0x40
 8000db8:	481b      	ldr	r0, [pc, #108]	; (8000e28 <update7SEG+0x100>)
 8000dba:	f000 fe20 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q1_GPIO_Port, q1_Pin, SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	4819      	ldr	r0, [pc, #100]	; (8000e28 <update7SEG+0x100>)
 8000dc4:	f000 fe1b 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q2_GPIO_Port, q2_Pin, RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2108      	movs	r1, #8
 8000dcc:	4817      	ldr	r0, [pc, #92]	; (8000e2c <update7SEG+0x104>)
 8000dce:	f000 fe16 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q3_GPIO_Port, q3_Pin, SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2110      	movs	r1, #16
 8000dd6:	4815      	ldr	r0, [pc, #84]	; (8000e2c <update7SEG+0x104>)
 8000dd8:	f000 fe11 	bl	80019fe <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <update7SEG+0x108>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff feff 	bl	8000be4 <display7SEG>
			break;
 8000de6:	e01a      	b.n	8000e1e <update7SEG+0xf6>
		case 3:
			HAL_GPIO_WritePin(q0_GPIO_Port, q0_Pin, SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2140      	movs	r1, #64	; 0x40
 8000dec:	480e      	ldr	r0, [pc, #56]	; (8000e28 <update7SEG+0x100>)
 8000dee:	f000 fe06 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q1_GPIO_Port, q1_Pin, SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	480c      	ldr	r0, [pc, #48]	; (8000e28 <update7SEG+0x100>)
 8000df8:	f000 fe01 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q2_GPIO_Port, q2_Pin,	SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2108      	movs	r1, #8
 8000e00:	480a      	ldr	r0, [pc, #40]	; (8000e2c <update7SEG+0x104>)
 8000e02:	f000 fdfc 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(q3_GPIO_Port, q3_Pin, RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2110      	movs	r1, #16
 8000e0a:	4808      	ldr	r0, [pc, #32]	; (8000e2c <update7SEG+0x104>)
 8000e0c:	f000 fdf7 	bl	80019fe <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <update7SEG+0x108>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fee5 	bl	8000be4 <display7SEG>
			break;
 8000e1a:	e000      	b.n	8000e1e <update7SEG+0xf6>
		default:
			break;
 8000e1c:	bf00      	nop
	}
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	40010c00 	.word	0x40010c00
 8000e30:	20000050 	.word	0x20000050

08000e34 <updateVal7SEG>:

void updateVal7SEG() {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
	  if (timer5_flag == 1) {
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <updateVal7SEG+0x80>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d134      	bne.n	8000eac <updateVal7SEG+0x78>
		  if (status == MAN_RED || status == MAN_GREEN || status == MAN_YELLOW || status == INIT) {
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <updateVal7SEG+0x84>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b0c      	cmp	r3, #12
 8000e48:	d00b      	beq.n	8000e62 <updateVal7SEG+0x2e>
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <updateVal7SEG+0x84>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b0d      	cmp	r3, #13
 8000e50:	d007      	beq.n	8000e62 <updateVal7SEG+0x2e>
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <updateVal7SEG+0x84>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b0e      	cmp	r3, #14
 8000e58:	d003      	beq.n	8000e62 <updateVal7SEG+0x2e>
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <updateVal7SEG+0x84>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10e      	bne.n	8000e80 <updateVal7SEG+0x4c>
			  led_buffer[0] = led_buffer[2] = led_buffer[3] = 0;
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <updateVal7SEG+0x88>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <updateVal7SEG+0x88>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <updateVal7SEG+0x88>)
 8000e6e:	6093      	str	r3, [r2, #8]
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <updateVal7SEG+0x88>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <updateVal7SEG+0x88>)
 8000e76:	6013      	str	r3, [r2, #0]
			  led_buffer[1] = 2;
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <updateVal7SEG+0x88>)
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	e011      	b.n	8000ea4 <updateVal7SEG+0x70>
		  }
		  else for (int i = 0; i < 4; i++) --led_buffer[i];
 8000e80:	2300      	movs	r3, #0
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	e00b      	b.n	8000e9e <updateVal7SEG+0x6a>
 8000e86:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <updateVal7SEG+0x88>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8e:	1e5a      	subs	r2, r3, #1
 8000e90:	490a      	ldr	r1, [pc, #40]	; (8000ebc <updateVal7SEG+0x88>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	ddf0      	ble.n	8000e86 <updateVal7SEG+0x52>
		  setTimer5(1000);
 8000ea4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea8:	f000 f8f2 	bl	8001090 <setTimer5>
	  }
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000140 	.word	0x20000140
 8000eb8:	200000a8 	.word	0x200000a8
 8000ebc:	20000050 	.word	0x20000050

08000ec0 <scan7SEG>:

void scan7SEG() {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	  if (timer4_flag == 1) {
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <scan7SEG+0x84>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d139      	bne.n	8000f40 <scan7SEG+0x80>
		  if (index_led >= 4) index_led = 0;
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <scan7SEG+0x88>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	dd02      	ble.n	8000eda <scan7SEG+0x1a>
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <scan7SEG+0x88>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
		  remember[index_led] = led_buffer[index_led]%10;
 8000eda:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <scan7SEG+0x88>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <scan7SEG+0x8c>)
 8000ee0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000ee4:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <scan7SEG+0x88>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <scan7SEG+0x90>)
 8000eea:	fb83 2301 	smull	r2, r3, r3, r1
 8000eee:	109a      	asrs	r2, r3, #2
 8000ef0:	17cb      	asrs	r3, r1, #31
 8000ef2:	1ad2      	subs	r2, r2, r3
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	1aca      	subs	r2, r1, r3
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <scan7SEG+0x94>)
 8000f00:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		  led_buffer[index_led] > 9 ? display7SEG(remember[index_led++]): update7SEG(index_led++);
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <scan7SEG+0x88>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <scan7SEG+0x8c>)
 8000f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0e:	2b09      	cmp	r3, #9
 8000f10:	dd0b      	ble.n	8000f2a <scan7SEG+0x6a>
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <scan7SEG+0x88>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	490b      	ldr	r1, [pc, #44]	; (8000f48 <scan7SEG+0x88>)
 8000f1a:	600a      	str	r2, [r1, #0]
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <scan7SEG+0x94>)
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fe5e 	bl	8000be4 <display7SEG>
 8000f28:	e007      	b.n	8000f3a <scan7SEG+0x7a>
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <scan7SEG+0x88>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	4905      	ldr	r1, [pc, #20]	; (8000f48 <scan7SEG+0x88>)
 8000f32:	600a      	str	r2, [r1, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fef7 	bl	8000d28 <update7SEG>
		  setTimer4(200);
 8000f3a:	20c8      	movs	r0, #200	; 0xc8
 8000f3c:	f000 f88e 	bl	800105c <setTimer4>
	  }
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000138 	.word	0x20000138
 8000f48:	20000108 	.word	0x20000108
 8000f4c:	20000050 	.word	0x20000050
 8000f50:	66666667 	.word	0x66666667
 8000f54:	2000010c 	.word	0x2000010c

08000f58 <blinkyLed>:

void blinkyLed(int led) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	if (timer2_flag) {
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <blinkyLed+0x60>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d01b      	beq.n	8000fa0 <blinkyLed+0x48>
		switch (led) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d013      	beq.n	8000f96 <blinkyLed+0x3e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	dc17      	bgt.n	8000fa4 <blinkyLed+0x4c>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <blinkyLed+0x2a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d005      	beq.n	8000f8c <blinkyLed+0x34>
			case LED_YELLOW:
				HAL_GPIO_TogglePin(GPIOA, output1_Pin | output1_Pin);
				break;

			default:
				break;
 8000f80:	e010      	b.n	8000fa4 <blinkyLed+0x4c>
				HAL_GPIO_TogglePin(GPIOA, output0_Pin | output3_Pin);
 8000f82:	2109      	movs	r1, #9
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <blinkyLed+0x64>)
 8000f86:	f000 fd52 	bl	8001a2e <HAL_GPIO_TogglePin>
				break;
 8000f8a:	e00c      	b.n	8000fa6 <blinkyLed+0x4e>
				HAL_GPIO_TogglePin(GPIOA, output2_Pin | output5_Pin);
 8000f8c:	2124      	movs	r1, #36	; 0x24
 8000f8e:	480b      	ldr	r0, [pc, #44]	; (8000fbc <blinkyLed+0x64>)
 8000f90:	f000 fd4d 	bl	8001a2e <HAL_GPIO_TogglePin>
				break;
 8000f94:	e007      	b.n	8000fa6 <blinkyLed+0x4e>
				HAL_GPIO_TogglePin(GPIOA, output1_Pin | output1_Pin);
 8000f96:	2102      	movs	r1, #2
 8000f98:	4808      	ldr	r0, [pc, #32]	; (8000fbc <blinkyLed+0x64>)
 8000f9a:	f000 fd48 	bl	8001a2e <HAL_GPIO_TogglePin>
				break;
 8000f9e:	e002      	b.n	8000fa6 <blinkyLed+0x4e>
		}
	}
 8000fa0:	bf00      	nop
 8000fa2:	e000      	b.n	8000fa6 <blinkyLed+0x4e>
				break;
 8000fa4:	bf00      	nop
	setTimer2(500);
 8000fa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000faa:	f000 f823 	bl	8000ff4 <setTimer2>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000128 	.word	0x20000128
 8000fbc:	40010800 	.word	0x40010800

08000fc0 <setTimer1>:
int timer4_flag = 0;
int timer5_counter = 0;
int timer5_flag = 0;
int TIMER_CYCLE = 10;

void setTimer1(int duration) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <setTimer1+0x28>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fd2:	4a06      	ldr	r2, [pc, #24]	; (8000fec <setTimer1+0x2c>)
 8000fd4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <setTimer1+0x30>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000064 	.word	0x20000064
 8000fec:	2000011c 	.word	0x2000011c
 8000ff0:	20000120 	.word	0x20000120

08000ff4 <setTimer2>:

void setTimer2(int duration) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <setTimer2+0x28>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	fb92 f3f3 	sdiv	r3, r2, r3
 8001006:	4a06      	ldr	r2, [pc, #24]	; (8001020 <setTimer2+0x2c>)
 8001008:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <setTimer2+0x30>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000064 	.word	0x20000064
 8001020:	20000124 	.word	0x20000124
 8001024:	20000128 	.word	0x20000128

08001028 <setTimer3>:

void setTimer3(int duration) {
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <setTimer3+0x28>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	fb92 f3f3 	sdiv	r3, r2, r3
 800103a:	4a06      	ldr	r2, [pc, #24]	; (8001054 <setTimer3+0x2c>)
 800103c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <setTimer3+0x30>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000064 	.word	0x20000064
 8001054:	2000012c 	.word	0x2000012c
 8001058:	20000130 	.word	0x20000130

0800105c <setTimer4>:

void setTimer4(int duration) {
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <setTimer4+0x28>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	fb92 f3f3 	sdiv	r3, r2, r3
 800106e:	4a06      	ldr	r2, [pc, #24]	; (8001088 <setTimer4+0x2c>)
 8001070:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <setTimer4+0x30>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000064 	.word	0x20000064
 8001088:	20000134 	.word	0x20000134
 800108c:	20000138 	.word	0x20000138

08001090 <setTimer5>:

void setTimer5(int duration) {
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TIMER_CYCLE;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <setTimer5+0x28>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	fb92 f3f3 	sdiv	r3, r2, r3
 80010a2:	4a06      	ldr	r2, [pc, #24]	; (80010bc <setTimer5+0x2c>)
 80010a4:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <setTimer5+0x30>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000064 	.word	0x20000064
 80010bc:	2000013c 	.word	0x2000013c
 80010c0:	20000140 	.word	0x20000140

080010c4 <timerRun>:

void timerRun() {
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <timerRun+0xac>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	dd0b      	ble.n	80010e8 <timerRun+0x24>
		timer1_counter--;
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <timerRun+0xac>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	4a26      	ldr	r2, [pc, #152]	; (8001170 <timerRun+0xac>)
 80010d8:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) timer1_flag = 1;
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <timerRun+0xac>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	dc02      	bgt.n	80010e8 <timerRun+0x24>
 80010e2:	4b24      	ldr	r3, [pc, #144]	; (8001174 <timerRun+0xb0>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <timerRun+0xb4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	dd0b      	ble.n	8001108 <timerRun+0x44>
		timer2_counter--;
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <timerRun+0xb4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	4a20      	ldr	r2, [pc, #128]	; (8001178 <timerRun+0xb4>)
 80010f8:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) timer2_flag = 1;
 80010fa:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <timerRun+0xb4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	dc02      	bgt.n	8001108 <timerRun+0x44>
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <timerRun+0xb8>)
 8001104:	2201      	movs	r2, #1
 8001106:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <timerRun+0xbc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	dd0b      	ble.n	8001128 <timerRun+0x64>
		timer3_counter--;
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <timerRun+0xbc>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3b01      	subs	r3, #1
 8001116:	4a1a      	ldr	r2, [pc, #104]	; (8001180 <timerRun+0xbc>)
 8001118:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) timer3_flag = 1;
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <timerRun+0xbc>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	dc02      	bgt.n	8001128 <timerRun+0x64>
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <timerRun+0xc0>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]
	}
	if (timer4_counter > 0) {
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <timerRun+0xc4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	dd0b      	ble.n	8001148 <timerRun+0x84>
		timer4_counter--;
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <timerRun+0xc4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	4a14      	ldr	r2, [pc, #80]	; (8001188 <timerRun+0xc4>)
 8001138:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) timer4_flag = 1;
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <timerRun+0xc4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	dc02      	bgt.n	8001148 <timerRun+0x84>
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <timerRun+0xc8>)
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]
	}
	if (timer5_counter > 0) {
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <timerRun+0xcc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	dd0b      	ble.n	8001168 <timerRun+0xa4>
		timer5_counter--;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <timerRun+0xcc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3b01      	subs	r3, #1
 8001156:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <timerRun+0xcc>)
 8001158:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) timer5_flag = 1;
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <timerRun+0xcc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	dc02      	bgt.n	8001168 <timerRun+0xa4>
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <timerRun+0xd0>)
 8001164:	2201      	movs	r2, #1
 8001166:	601a      	str	r2, [r3, #0]
	}
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	2000011c 	.word	0x2000011c
 8001174:	20000120 	.word	0x20000120
 8001178:	20000124 	.word	0x20000124
 800117c:	20000128 	.word	0x20000128
 8001180:	2000012c 	.word	0x2000012c
 8001184:	20000130 	.word	0x20000130
 8001188:	20000134 	.word	0x20000134
 800118c:	20000138 	.word	0x20000138
 8001190:	2000013c 	.word	0x2000013c
 8001194:	20000140 	.word	0x20000140

08001198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_MspInit+0x40>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <HAL_MspInit+0x40>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6193      	str	r3, [r2, #24]
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_MspInit+0x40>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_MspInit+0x40>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_MspInit+0x40>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_MspInit+0x40>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	40021000 	.word	0x40021000

080011dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011ec:	d113      	bne.n	8001216 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <HAL_TIM_Base_MspInit+0x44>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <HAL_TIM_Base_MspInit+0x44>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	61d3      	str	r3, [r2, #28]
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_TIM_Base_MspInit+0x44>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	201c      	movs	r0, #28
 800120c:	f000 fa2d 	bl	800166a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001210:	201c      	movs	r0, #28
 8001212:	f000 fa46 	bl	80016a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <NMI_Handler+0x4>

0800122a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <MemManage_Handler+0x4>

08001236 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <UsageFault_Handler+0x4>

08001242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126a:	f000 f90b 	bl	8001484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <TIM2_IRQHandler+0x10>)
 800127a:	f001 f875 	bl	8002368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200000b0 	.word	0x200000b0

08001288 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <turnLightOn>:
 *  Created on: Oct 14, 2022
 *      Author: LENOVO
 */
#include "traffic.h"

void turnLightOn(int led){
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	switch(led){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d01f      	beq.n	80012e2 <turnLightOn+0x4e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	dc27      	bgt.n	80012f8 <turnLightOn+0x64>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <turnLightOn+0x22>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d00b      	beq.n	80012cc <turnLightOn+0x38>
		case LED_YELLOW:
			HAL_GPIO_WritePin(output1_GPIO_Port, output1_Pin, RESET);
			HAL_GPIO_WritePin(output2_GPIO_Port, output2_Pin, SET);
			break;
		default:
			break;
 80012b4:	e020      	b.n	80012f8 <turnLightOn+0x64>
			HAL_GPIO_WritePin(output1_GPIO_Port, output1_Pin, SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	2102      	movs	r1, #2
 80012ba:	4812      	ldr	r0, [pc, #72]	; (8001304 <turnLightOn+0x70>)
 80012bc:	f000 fb9f 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(output0_GPIO_Port, output0_Pin, RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2101      	movs	r1, #1
 80012c4:	480f      	ldr	r0, [pc, #60]	; (8001304 <turnLightOn+0x70>)
 80012c6:	f000 fb9a 	bl	80019fe <HAL_GPIO_WritePin>
			break;
 80012ca:	e016      	b.n	80012fa <turnLightOn+0x66>
			HAL_GPIO_WritePin(output2_GPIO_Port, output2_Pin, RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2104      	movs	r1, #4
 80012d0:	480c      	ldr	r0, [pc, #48]	; (8001304 <turnLightOn+0x70>)
 80012d2:	f000 fb94 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(output0_GPIO_Port, output0_Pin, SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	2101      	movs	r1, #1
 80012da:	480a      	ldr	r0, [pc, #40]	; (8001304 <turnLightOn+0x70>)
 80012dc:	f000 fb8f 	bl	80019fe <HAL_GPIO_WritePin>
			break;
 80012e0:	e00b      	b.n	80012fa <turnLightOn+0x66>
			HAL_GPIO_WritePin(output1_GPIO_Port, output1_Pin, RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2102      	movs	r1, #2
 80012e6:	4807      	ldr	r0, [pc, #28]	; (8001304 <turnLightOn+0x70>)
 80012e8:	f000 fb89 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(output2_GPIO_Port, output2_Pin, SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	2104      	movs	r1, #4
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <turnLightOn+0x70>)
 80012f2:	f000 fb84 	bl	80019fe <HAL_GPIO_WritePin>
			break;
 80012f6:	e000      	b.n	80012fa <turnLightOn+0x66>
			break;
 80012f8:	bf00      	nop
	}
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40010800 	.word	0x40010800

08001308 <anotherturnLightOn>:

void anotherturnLightOn(int led) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	switch(led){
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d01f      	beq.n	8001356 <anotherturnLightOn+0x4e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b02      	cmp	r3, #2
 800131a:	dc27      	bgt.n	800136c <anotherturnLightOn+0x64>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <anotherturnLightOn+0x22>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d00b      	beq.n	8001340 <anotherturnLightOn+0x38>
		case LED_YELLOW:
			HAL_GPIO_WritePin(output4_GPIO_Port, output4_Pin, RESET);
			HAL_GPIO_WritePin(output5_GPIO_Port, output5_Pin, SET);
			break;
		default:
			break;
 8001328:	e020      	b.n	800136c <anotherturnLightOn+0x64>
			HAL_GPIO_WritePin(output4_GPIO_Port, output4_Pin, SET);
 800132a:	2201      	movs	r2, #1
 800132c:	2110      	movs	r1, #16
 800132e:	4812      	ldr	r0, [pc, #72]	; (8001378 <anotherturnLightOn+0x70>)
 8001330:	f000 fb65 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(output3_GPIO_Port, output3_Pin, RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	2108      	movs	r1, #8
 8001338:	480f      	ldr	r0, [pc, #60]	; (8001378 <anotherturnLightOn+0x70>)
 800133a:	f000 fb60 	bl	80019fe <HAL_GPIO_WritePin>
			break;
 800133e:	e016      	b.n	800136e <anotherturnLightOn+0x66>
			HAL_GPIO_WritePin(output5_GPIO_Port, output5_Pin, RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	2120      	movs	r1, #32
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <anotherturnLightOn+0x70>)
 8001346:	f000 fb5a 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(output3_GPIO_Port, output3_Pin, SET);
 800134a:	2201      	movs	r2, #1
 800134c:	2108      	movs	r1, #8
 800134e:	480a      	ldr	r0, [pc, #40]	; (8001378 <anotherturnLightOn+0x70>)
 8001350:	f000 fb55 	bl	80019fe <HAL_GPIO_WritePin>
			break;
 8001354:	e00b      	b.n	800136e <anotherturnLightOn+0x66>
			HAL_GPIO_WritePin(output4_GPIO_Port, output4_Pin, RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2110      	movs	r1, #16
 800135a:	4807      	ldr	r0, [pc, #28]	; (8001378 <anotherturnLightOn+0x70>)
 800135c:	f000 fb4f 	bl	80019fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(output5_GPIO_Port, output5_Pin, SET);
 8001360:	2201      	movs	r2, #1
 8001362:	2120      	movs	r1, #32
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <anotherturnLightOn+0x70>)
 8001366:	f000 fb4a 	bl	80019fe <HAL_GPIO_WritePin>
			break;
 800136a:	e000      	b.n	800136e <anotherturnLightOn+0x66>
			break;
 800136c:	bf00      	nop
	}
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40010800 	.word	0x40010800

0800137c <clearLight>:

void clearLight(){
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, output0_Pin|output1_Pin|output2_Pin, SET);
 8001380:	2201      	movs	r2, #1
 8001382:	2107      	movs	r1, #7
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <clearLight+0x14>)
 8001386:	f000 fb3a 	bl	80019fe <HAL_GPIO_WritePin>
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40010800 	.word	0x40010800

08001394 <anotherclearLight>:

void anotherclearLight(){
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, output3_Pin|output4_Pin|output5_Pin, SET);
 8001398:	2201      	movs	r2, #1
 800139a:	2138      	movs	r1, #56	; 0x38
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <anotherclearLight+0x14>)
 800139e:	f000 fb2e 	bl	80019fe <HAL_GPIO_WritePin>
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40010800 	.word	0x40010800

080013ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ac:	480c      	ldr	r0, [pc, #48]	; (80013e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ae:	490d      	ldr	r1, [pc, #52]	; (80013e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c4:	4c0a      	ldr	r4, [pc, #40]	; (80013f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013d2:	f7ff ff59 	bl	8001288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013d6:	f001 fb0f 	bl	80029f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013da:	f7ff f8e7 	bl	80005ac <main>
  bx lr
 80013de:	4770      	bx	lr
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013e8:	08002a90 	.word	0x08002a90
  ldr r2, =_sbss
 80013ec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013f0:	20000148 	.word	0x20000148

080013f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC1_2_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <HAL_Init+0x28>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <HAL_Init+0x28>)
 8001402:	f043 0310 	orr.w	r3, r3, #16
 8001406:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001408:	2003      	movs	r0, #3
 800140a:	f000 f923 	bl	8001654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140e:	200f      	movs	r0, #15
 8001410:	f000 f808 	bl	8001424 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001414:	f7ff fec0 	bl	8001198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40022000 	.word	0x40022000

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_InitTick+0x54>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_InitTick+0x58>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143a:	fbb3 f3f1 	udiv	r3, r3, r1
 800143e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f93b 	bl	80016be <HAL_SYSTICK_Config>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e00e      	b.n	8001470 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b0f      	cmp	r3, #15
 8001456:	d80a      	bhi.n	800146e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001458:	2200      	movs	r2, #0
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f000 f903 	bl	800166a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <HAL_InitTick+0x5c>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000068 	.word	0x20000068
 800147c:	20000070 	.word	0x20000070
 8001480:	2000006c 	.word	0x2000006c

08001484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_IncTick+0x1c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_IncTick+0x20>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4413      	add	r3, r2
 8001494:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <HAL_IncTick+0x20>)
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	20000070 	.word	0x20000070
 80014a4:	20000144 	.word	0x20000144

080014a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return uwTick;
 80014ac:	4b02      	ldr	r3, [pc, #8]	; (80014b8 <HAL_GetTick+0x10>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	20000144 	.word	0x20000144

080014bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60d3      	str	r3, [r2, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <__NVIC_GetPriorityGrouping+0x18>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	f003 0307 	and.w	r3, r3, #7
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	2b00      	cmp	r3, #0
 8001530:	db0b      	blt.n	800154a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	f003 021f 	and.w	r2, r3, #31
 8001538:	4906      	ldr	r1, [pc, #24]	; (8001554 <__NVIC_EnableIRQ+0x34>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	095b      	lsrs	r3, r3, #5
 8001540:	2001      	movs	r0, #1
 8001542:	fa00 f202 	lsl.w	r2, r0, r2
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100

08001558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	db0a      	blt.n	8001582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	490c      	ldr	r1, [pc, #48]	; (80015a4 <__NVIC_SetPriority+0x4c>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	440b      	add	r3, r1
 800157c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001580:	e00a      	b.n	8001598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <__NVIC_SetPriority+0x50>)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	3b04      	subs	r3, #4
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	440b      	add	r3, r1
 8001596:	761a      	strb	r2, [r3, #24]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e100 	.word	0xe000e100
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f1c3 0307 	rsb	r3, r3, #7
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	bf28      	it	cs
 80015ca:	2304      	movcs	r3, #4
 80015cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3304      	adds	r3, #4
 80015d2:	2b06      	cmp	r3, #6
 80015d4:	d902      	bls.n	80015dc <NVIC_EncodePriority+0x30>
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3b03      	subs	r3, #3
 80015da:	e000      	b.n	80015de <NVIC_EncodePriority+0x32>
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43d9      	mvns	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	4313      	orrs	r3, r2
         );
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001620:	d301      	bcc.n	8001626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001622:	2301      	movs	r3, #1
 8001624:	e00f      	b.n	8001646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <SysTick_Config+0x40>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162e:	210f      	movs	r1, #15
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f7ff ff90 	bl	8001558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <SysTick_Config+0x40>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163e:	4b04      	ldr	r3, [pc, #16]	; (8001650 <SysTick_Config+0x40>)
 8001640:	2207      	movs	r2, #7
 8001642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	e000e010 	.word	0xe000e010

08001654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff2d 	bl	80014bc <__NVIC_SetPriorityGrouping>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800167c:	f7ff ff42 	bl	8001504 <__NVIC_GetPriorityGrouping>
 8001680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	6978      	ldr	r0, [r7, #20]
 8001688:	f7ff ff90 	bl	80015ac <NVIC_EncodePriority>
 800168c:	4602      	mov	r2, r0
 800168e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff5f 	bl	8001558 <__NVIC_SetPriority>
}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff35 	bl	8001520 <__NVIC_EnableIRQ>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ffa2 	bl	8001610 <SysTick_Config>
 80016cc:	4603      	mov	r3, r0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d8:	b480      	push	{r7}
 80016da:	b08b      	sub	sp, #44	; 0x2c
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ea:	e161      	b.n	80019b0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016ec:	2201      	movs	r2, #1
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	429a      	cmp	r2, r3
 8001706:	f040 8150 	bne.w	80019aa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	4a97      	ldr	r2, [pc, #604]	; (800196c <HAL_GPIO_Init+0x294>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d05e      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
 8001714:	4a95      	ldr	r2, [pc, #596]	; (800196c <HAL_GPIO_Init+0x294>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d875      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 800171a:	4a95      	ldr	r2, [pc, #596]	; (8001970 <HAL_GPIO_Init+0x298>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d058      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
 8001720:	4a93      	ldr	r2, [pc, #588]	; (8001970 <HAL_GPIO_Init+0x298>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d86f      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 8001726:	4a93      	ldr	r2, [pc, #588]	; (8001974 <HAL_GPIO_Init+0x29c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d052      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
 800172c:	4a91      	ldr	r2, [pc, #580]	; (8001974 <HAL_GPIO_Init+0x29c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d869      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 8001732:	4a91      	ldr	r2, [pc, #580]	; (8001978 <HAL_GPIO_Init+0x2a0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d04c      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
 8001738:	4a8f      	ldr	r2, [pc, #572]	; (8001978 <HAL_GPIO_Init+0x2a0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d863      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 800173e:	4a8f      	ldr	r2, [pc, #572]	; (800197c <HAL_GPIO_Init+0x2a4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d046      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
 8001744:	4a8d      	ldr	r2, [pc, #564]	; (800197c <HAL_GPIO_Init+0x2a4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d85d      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 800174a:	2b12      	cmp	r3, #18
 800174c:	d82a      	bhi.n	80017a4 <HAL_GPIO_Init+0xcc>
 800174e:	2b12      	cmp	r3, #18
 8001750:	d859      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 8001752:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <HAL_GPIO_Init+0x80>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	080017d3 	.word	0x080017d3
 800175c:	080017ad 	.word	0x080017ad
 8001760:	080017bf 	.word	0x080017bf
 8001764:	08001801 	.word	0x08001801
 8001768:	08001807 	.word	0x08001807
 800176c:	08001807 	.word	0x08001807
 8001770:	08001807 	.word	0x08001807
 8001774:	08001807 	.word	0x08001807
 8001778:	08001807 	.word	0x08001807
 800177c:	08001807 	.word	0x08001807
 8001780:	08001807 	.word	0x08001807
 8001784:	08001807 	.word	0x08001807
 8001788:	08001807 	.word	0x08001807
 800178c:	08001807 	.word	0x08001807
 8001790:	08001807 	.word	0x08001807
 8001794:	08001807 	.word	0x08001807
 8001798:	08001807 	.word	0x08001807
 800179c:	080017b5 	.word	0x080017b5
 80017a0:	080017c9 	.word	0x080017c9
 80017a4:	4a76      	ldr	r2, [pc, #472]	; (8001980 <HAL_GPIO_Init+0x2a8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017aa:	e02c      	b.n	8001806 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	623b      	str	r3, [r7, #32]
          break;
 80017b2:	e029      	b.n	8001808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	3304      	adds	r3, #4
 80017ba:	623b      	str	r3, [r7, #32]
          break;
 80017bc:	e024      	b.n	8001808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	3308      	adds	r3, #8
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e01f      	b.n	8001808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	330c      	adds	r3, #12
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	e01a      	b.n	8001808 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017da:	2304      	movs	r3, #4
 80017dc:	623b      	str	r3, [r7, #32]
          break;
 80017de:	e013      	b.n	8001808 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e8:	2308      	movs	r3, #8
 80017ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	611a      	str	r2, [r3, #16]
          break;
 80017f2:	e009      	b.n	8001808 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f4:	2308      	movs	r3, #8
 80017f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	615a      	str	r2, [r3, #20]
          break;
 80017fe:	e003      	b.n	8001808 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
          break;
 8001804:	e000      	b.n	8001808 <HAL_GPIO_Init+0x130>
          break;
 8001806:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2bff      	cmp	r3, #255	; 0xff
 800180c:	d801      	bhi.n	8001812 <HAL_GPIO_Init+0x13a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	e001      	b.n	8001816 <HAL_GPIO_Init+0x13e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3304      	adds	r3, #4
 8001816:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2bff      	cmp	r3, #255	; 0xff
 800181c:	d802      	bhi.n	8001824 <HAL_GPIO_Init+0x14c>
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	e002      	b.n	800182a <HAL_GPIO_Init+0x152>
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	3b08      	subs	r3, #8
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	210f      	movs	r1, #15
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	401a      	ands	r2, r3
 800183c:	6a39      	ldr	r1, [r7, #32]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	431a      	orrs	r2, r3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80a9 	beq.w	80019aa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001858:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <HAL_GPIO_Init+0x2ac>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4a49      	ldr	r2, [pc, #292]	; (8001984 <HAL_GPIO_Init+0x2ac>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6193      	str	r3, [r2, #24]
 8001864:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_GPIO_Init+0x2ac>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001870:	4a45      	ldr	r2, [pc, #276]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	3302      	adds	r3, #2
 8001878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	220f      	movs	r2, #15
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4013      	ands	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a3d      	ldr	r2, [pc, #244]	; (800198c <HAL_GPIO_Init+0x2b4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d00d      	beq.n	80018b8 <HAL_GPIO_Init+0x1e0>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a3c      	ldr	r2, [pc, #240]	; (8001990 <HAL_GPIO_Init+0x2b8>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d007      	beq.n	80018b4 <HAL_GPIO_Init+0x1dc>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a3b      	ldr	r2, [pc, #236]	; (8001994 <HAL_GPIO_Init+0x2bc>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d101      	bne.n	80018b0 <HAL_GPIO_Init+0x1d8>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e004      	b.n	80018ba <HAL_GPIO_Init+0x1e2>
 80018b0:	2303      	movs	r3, #3
 80018b2:	e002      	b.n	80018ba <HAL_GPIO_Init+0x1e2>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_GPIO_Init+0x1e2>
 80018b8:	2300      	movs	r3, #0
 80018ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018bc:	f002 0203 	and.w	r2, r2, #3
 80018c0:	0092      	lsls	r2, r2, #2
 80018c2:	4093      	lsls	r3, r2
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ca:	492f      	ldr	r1, [pc, #188]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018e4:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	492b      	ldr	r1, [pc, #172]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018f2:	4b29      	ldr	r3, [pc, #164]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4927      	ldr	r1, [pc, #156]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	4921      	ldr	r1, [pc, #132]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800191a:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	43db      	mvns	r3, r3
 8001922:	491d      	ldr	r1, [pc, #116]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 8001924:	4013      	ands	r3, r2
 8001926:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	4917      	ldr	r1, [pc, #92]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	608b      	str	r3, [r1, #8]
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	43db      	mvns	r3, r3
 800194a:	4913      	ldr	r1, [pc, #76]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 800194c:	4013      	ands	r3, r2
 800194e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d01f      	beq.n	800199c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800195c:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	490d      	ldr	r1, [pc, #52]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	60cb      	str	r3, [r1, #12]
 8001968:	e01f      	b.n	80019aa <HAL_GPIO_Init+0x2d2>
 800196a:	bf00      	nop
 800196c:	10320000 	.word	0x10320000
 8001970:	10310000 	.word	0x10310000
 8001974:	10220000 	.word	0x10220000
 8001978:	10210000 	.word	0x10210000
 800197c:	10120000 	.word	0x10120000
 8001980:	10110000 	.word	0x10110000
 8001984:	40021000 	.word	0x40021000
 8001988:	40010000 	.word	0x40010000
 800198c:	40010800 	.word	0x40010800
 8001990:	40010c00 	.word	0x40010c00
 8001994:	40011000 	.word	0x40011000
 8001998:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_GPIO_Init+0x2f4>)
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	4909      	ldr	r1, [pc, #36]	; (80019cc <HAL_GPIO_Init+0x2f4>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	3301      	adds	r3, #1
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f47f ae96 	bne.w	80016ec <HAL_GPIO_Init+0x14>
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	372c      	adds	r7, #44	; 0x2c
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	40010400 	.word	0x40010400

080019d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	887b      	ldrh	r3, [r7, #2]
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e001      	b.n	80019f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	460b      	mov	r3, r1
 8001a08:	807b      	strh	r3, [r7, #2]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a0e:	787b      	ldrb	r3, [r7, #1]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a14:	887a      	ldrh	r2, [r7, #2]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a1a:	e003      	b.n	8001a24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a1c:	887b      	ldrh	r3, [r7, #2]
 8001a1e:	041a      	lsls	r2, r3, #16
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	611a      	str	r2, [r3, #16]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b085      	sub	sp, #20
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	460b      	mov	r3, r1
 8001a38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a40:	887a      	ldrh	r2, [r7, #2]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4013      	ands	r3, r2
 8001a46:	041a      	lsls	r2, r3, #16
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	887b      	ldrh	r3, [r7, #2]
 8001a4e:	400b      	ands	r3, r1
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	611a      	str	r2, [r3, #16]
}
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e272      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8087 	beq.w	8001b8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a80:	4b92      	ldr	r3, [pc, #584]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d00c      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a8c:	4b8f      	ldr	r3, [pc, #572]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d112      	bne.n	8001abe <HAL_RCC_OscConfig+0x5e>
 8001a98:	4b8c      	ldr	r3, [pc, #560]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa4:	d10b      	bne.n	8001abe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa6:	4b89      	ldr	r3, [pc, #548]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d06c      	beq.n	8001b8c <HAL_RCC_OscConfig+0x12c>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d168      	bne.n	8001b8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e24c      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x76>
 8001ac8:	4b80      	ldr	r3, [pc, #512]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a7f      	ldr	r2, [pc, #508]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	e02e      	b.n	8001b34 <HAL_RCC_OscConfig+0xd4>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x98>
 8001ade:	4b7b      	ldr	r3, [pc, #492]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a7a      	ldr	r2, [pc, #488]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b78      	ldr	r3, [pc, #480]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a77      	ldr	r2, [pc, #476]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e01d      	b.n	8001b34 <HAL_RCC_OscConfig+0xd4>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0xbc>
 8001b02:	4b72      	ldr	r3, [pc, #456]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a71      	ldr	r2, [pc, #452]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b6f      	ldr	r3, [pc, #444]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a6e      	ldr	r2, [pc, #440]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0xd4>
 8001b1c:	4b6b      	ldr	r3, [pc, #428]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a6a      	ldr	r2, [pc, #424]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	4b68      	ldr	r3, [pc, #416]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a67      	ldr	r2, [pc, #412]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fcb4 	bl	80014a8 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff fcb0 	bl	80014a8 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e200      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b5d      	ldr	r3, [pc, #372]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0xe4>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff fca0 	bl	80014a8 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fc9c 	bl	80014a8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e1ec      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7e:	4b53      	ldr	r3, [pc, #332]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x10c>
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d063      	beq.n	8001c62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9a:	4b4c      	ldr	r3, [pc, #304]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ba6:	4b49      	ldr	r3, [pc, #292]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d11c      	bne.n	8001bec <HAL_RCC_OscConfig+0x18c>
 8001bb2:	4b46      	ldr	r3, [pc, #280]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d116      	bne.n	8001bec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bbe:	4b43      	ldr	r3, [pc, #268]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x176>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e1c0      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4939      	ldr	r1, [pc, #228]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bea:	e03a      	b.n	8001c62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d020      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf4:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fc55 	bl	80014a8 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c02:	f7ff fc51 	bl	80014a8 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e1a1      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c14:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c20:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4927      	ldr	r1, [pc, #156]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]
 8001c34:	e015      	b.n	8001c62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fc34 	bl	80014a8 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c44:	f7ff fc30 	bl	80014a8 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e180      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d03a      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d019      	beq.n	8001caa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7c:	f7ff fc14 	bl	80014a8 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c84:	f7ff fc10 	bl	80014a8 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e160      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f000 faa6 	bl	80021f4 <RCC_Delay>
 8001ca8:	e01c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb0:	f7ff fbfa 	bl	80014a8 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb6:	e00f      	b.n	8001cd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb8:	f7ff fbf6 	bl	80014a8 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d908      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e146      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	42420000 	.word	0x42420000
 8001cd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd8:	4b92      	ldr	r3, [pc, #584]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1e9      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 80a6 	beq.w	8001e3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf6:	4b8b      	ldr	r3, [pc, #556]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10d      	bne.n	8001d1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	4b88      	ldr	r3, [pc, #544]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a87      	ldr	r2, [pc, #540]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	61d3      	str	r3, [r2, #28]
 8001d0e:	4b85      	ldr	r3, [pc, #532]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1e:	4b82      	ldr	r3, [pc, #520]	; (8001f28 <HAL_RCC_OscConfig+0x4c8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d118      	bne.n	8001d5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2a:	4b7f      	ldr	r3, [pc, #508]	; (8001f28 <HAL_RCC_OscConfig+0x4c8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a7e      	ldr	r2, [pc, #504]	; (8001f28 <HAL_RCC_OscConfig+0x4c8>)
 8001d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d36:	f7ff fbb7 	bl	80014a8 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3e:	f7ff fbb3 	bl	80014a8 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b64      	cmp	r3, #100	; 0x64
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e103      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d50:	4b75      	ldr	r3, [pc, #468]	; (8001f28 <HAL_RCC_OscConfig+0x4c8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d106      	bne.n	8001d72 <HAL_RCC_OscConfig+0x312>
 8001d64:	4b6f      	ldr	r3, [pc, #444]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4a6e      	ldr	r2, [pc, #440]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6213      	str	r3, [r2, #32]
 8001d70:	e02d      	b.n	8001dce <HAL_RCC_OscConfig+0x36e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x334>
 8001d7a:	4b6a      	ldr	r3, [pc, #424]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	6213      	str	r3, [r2, #32]
 8001d86:	4b67      	ldr	r3, [pc, #412]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4a66      	ldr	r2, [pc, #408]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	f023 0304 	bic.w	r3, r3, #4
 8001d90:	6213      	str	r3, [r2, #32]
 8001d92:	e01c      	b.n	8001dce <HAL_RCC_OscConfig+0x36e>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b05      	cmp	r3, #5
 8001d9a:	d10c      	bne.n	8001db6 <HAL_RCC_OscConfig+0x356>
 8001d9c:	4b61      	ldr	r3, [pc, #388]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4a60      	ldr	r2, [pc, #384]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	6213      	str	r3, [r2, #32]
 8001da8:	4b5e      	ldr	r3, [pc, #376]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4a5d      	ldr	r2, [pc, #372]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6213      	str	r3, [r2, #32]
 8001db4:	e00b      	b.n	8001dce <HAL_RCC_OscConfig+0x36e>
 8001db6:	4b5b      	ldr	r3, [pc, #364]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	4a5a      	ldr	r2, [pc, #360]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	6213      	str	r3, [r2, #32]
 8001dc2:	4b58      	ldr	r3, [pc, #352]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4a57      	ldr	r2, [pc, #348]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	f023 0304 	bic.w	r3, r3, #4
 8001dcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d015      	beq.n	8001e02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff fb67 	bl	80014a8 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dde:	f7ff fb63 	bl	80014a8 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e0b1      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	4b4b      	ldr	r3, [pc, #300]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ee      	beq.n	8001dde <HAL_RCC_OscConfig+0x37e>
 8001e00:	e014      	b.n	8001e2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e02:	f7ff fb51 	bl	80014a8 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7ff fb4d 	bl	80014a8 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e09b      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e20:	4b40      	ldr	r3, [pc, #256]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1ee      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d105      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e32:	4b3c      	ldr	r3, [pc, #240]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	4a3b      	ldr	r2, [pc, #236]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8087 	beq.w	8001f56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e48:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d061      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d146      	bne.n	8001eea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5c:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <HAL_RCC_OscConfig+0x4cc>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7ff fb21 	bl	80014a8 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7ff fb1d 	bl	80014a8 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e06d      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7c:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f0      	bne.n	8001e6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e90:	d108      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e92:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	4921      	ldr	r1, [pc, #132]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a19      	ldr	r1, [r3, #32]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	491b      	ldr	r1, [pc, #108]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HAL_RCC_OscConfig+0x4cc>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7ff faf1 	bl	80014a8 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eca:	f7ff faed 	bl	80014a8 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e03d      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x46a>
 8001ee8:	e035      	b.n	8001f56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_RCC_OscConfig+0x4cc>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fada 	bl	80014a8 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff fad6 	bl	80014a8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e026      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x498>
 8001f16:	e01e      	b.n	8001f56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e019      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_OscConfig+0x500>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000

08001f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0d0      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d910      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b67      	ldr	r3, [pc, #412]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 0207 	bic.w	r2, r3, #7
 8001f8e:	4965      	ldr	r1, [pc, #404]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b63      	ldr	r3, [pc, #396]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0b8      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc0:	4b59      	ldr	r3, [pc, #356]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a58      	ldr	r2, [pc, #352]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd8:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a52      	ldr	r2, [pc, #328]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fe2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe4:	4b50      	ldr	r3, [pc, #320]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	494d      	ldr	r1, [pc, #308]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d040      	beq.n	8002084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b47      	ldr	r3, [pc, #284]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d115      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e07f      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002022:	4b41      	ldr	r3, [pc, #260]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e073      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002032:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e06b      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002042:	4b39      	ldr	r3, [pc, #228]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f023 0203 	bic.w	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4936      	ldr	r1, [pc, #216]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002054:	f7ff fa28 	bl	80014a8 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	e00a      	b.n	8002072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205c:	f7ff fa24 	bl	80014a8 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e053      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 020c 	and.w	r2, r3, #12
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	429a      	cmp	r2, r3
 8002082:	d1eb      	bne.n	800205c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d210      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0207 	bic.w	r2, r3, #7
 800209a:	4922      	ldr	r1, [pc, #136]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e032      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4916      	ldr	r1, [pc, #88]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	490e      	ldr	r1, [pc, #56]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f2:	f000 f821 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020f6:	4602      	mov	r2, r0
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	490a      	ldr	r1, [pc, #40]	; (800212c <HAL_RCC_ClockConfig+0x1c8>)
 8002104:	5ccb      	ldrb	r3, [r1, r3]
 8002106:	fa22 f303 	lsr.w	r3, r2, r3
 800210a:	4a09      	ldr	r2, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x1cc>)
 800210c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1d0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f986 	bl	8001424 <HAL_InitTick>

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40022000 	.word	0x40022000
 8002128:	40021000 	.word	0x40021000
 800212c:	08002a78 	.word	0x08002a78
 8002130:	20000068 	.word	0x20000068
 8002134:	2000006c 	.word	0x2000006c

08002138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b490      	push	{r4, r7}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800213e:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002140:	1d3c      	adds	r4, r7, #4
 8002142:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002144:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002148:	f240 2301 	movw	r3, #513	; 0x201
 800214c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002162:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b04      	cmp	r3, #4
 8002170:	d002      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x40>
 8002172:	2b08      	cmp	r3, #8
 8002174:	d003      	beq.n	800217e <HAL_RCC_GetSysClockFreq+0x46>
 8002176:	e02b      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002178:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800217a:	623b      	str	r3, [r7, #32]
      break;
 800217c:	e02b      	b.n	80021d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	0c9b      	lsrs	r3, r3, #18
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3328      	adds	r3, #40	; 0x28
 8002188:	443b      	add	r3, r7
 800218a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800218e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d012      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	0c5b      	lsrs	r3, r3, #17
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	3328      	adds	r3, #40	; 0x28
 80021a6:	443b      	add	r3, r7
 80021a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80021b2:	fb03 f202 	mul.w	r2, r3, r2
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
 80021be:	e004      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	623b      	str	r3, [r7, #32]
      break;
 80021ce:	e002      	b.n	80021d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80021d2:	623b      	str	r3, [r7, #32]
      break;
 80021d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021d6:	6a3b      	ldr	r3, [r7, #32]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3728      	adds	r7, #40	; 0x28
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc90      	pop	{r4, r7}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	08002a68 	.word	0x08002a68
 80021e8:	40021000 	.word	0x40021000
 80021ec:	007a1200 	.word	0x007a1200
 80021f0:	003d0900 	.word	0x003d0900

080021f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <RCC_Delay+0x34>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0a      	ldr	r2, [pc, #40]	; (800222c <RCC_Delay+0x38>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0a5b      	lsrs	r3, r3, #9
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002210:	bf00      	nop
  }
  while (Delay --);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1e5a      	subs	r2, r3, #1
 8002216:	60fa      	str	r2, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f9      	bne.n	8002210 <RCC_Delay+0x1c>
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	20000068 	.word	0x20000068
 800222c:	10624dd3 	.word	0x10624dd3

08002230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e041      	b.n	80022c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7fe ffc0 	bl	80011dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3304      	adds	r3, #4
 800226c:	4619      	mov	r1, r3
 800226e:	4610      	mov	r0, r2
 8002270:	f000 fa6a 	bl	8002748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d001      	beq.n	80022e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e035      	b.n	8002354 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a16      	ldr	r2, [pc, #88]	; (8002360 <HAL_TIM_Base_Start_IT+0x90>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d009      	beq.n	800231e <HAL_TIM_Base_Start_IT+0x4e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002312:	d004      	beq.n	800231e <HAL_TIM_Base_Start_IT+0x4e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a12      	ldr	r2, [pc, #72]	; (8002364 <HAL_TIM_Base_Start_IT+0x94>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d111      	bne.n	8002342 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2b06      	cmp	r3, #6
 800232e:	d010      	beq.n	8002352 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002340:	e007      	b.n	8002352 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0201 	orr.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40012c00 	.word	0x40012c00
 8002364:	40000400 	.word	0x40000400

08002368 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b02      	cmp	r3, #2
 800237c:	d122      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b02      	cmp	r3, #2
 800238a:	d11b      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0202 	mvn.w	r2, #2
 8002394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f9b1 	bl	8002712 <HAL_TIM_IC_CaptureCallback>
 80023b0:	e005      	b.n	80023be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f9a4 	bl	8002700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f9b3 	bl	8002724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d122      	bne.n	8002418 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d11b      	bne.n	8002418 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0204 	mvn.w	r2, #4
 80023e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2202      	movs	r2, #2
 80023ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f987 	bl	8002712 <HAL_TIM_IC_CaptureCallback>
 8002404:	e005      	b.n	8002412 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f97a 	bl	8002700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f989 	bl	8002724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b08      	cmp	r3, #8
 8002424:	d122      	bne.n	800246c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b08      	cmp	r3, #8
 8002432:	d11b      	bne.n	800246c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0208 	mvn.w	r2, #8
 800243c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2204      	movs	r2, #4
 8002442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f95d 	bl	8002712 <HAL_TIM_IC_CaptureCallback>
 8002458:	e005      	b.n	8002466 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f950 	bl	8002700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f95f 	bl	8002724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f003 0310 	and.w	r3, r3, #16
 8002476:	2b10      	cmp	r3, #16
 8002478:	d122      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b10      	cmp	r3, #16
 8002486:	d11b      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 0210 	mvn.w	r2, #16
 8002490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2208      	movs	r2, #8
 8002496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f933 	bl	8002712 <HAL_TIM_IC_CaptureCallback>
 80024ac:	e005      	b.n	80024ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f926 	bl	8002700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f935 	bl	8002724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d10e      	bne.n	80024ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d107      	bne.n	80024ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0201 	mvn.w	r2, #1
 80024e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fe f972 	bl	80007d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f6:	2b80      	cmp	r3, #128	; 0x80
 80024f8:	d10e      	bne.n	8002518 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002504:	2b80      	cmp	r3, #128	; 0x80
 8002506:	d107      	bne.n	8002518 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fa67 	bl	80029e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002522:	2b40      	cmp	r3, #64	; 0x40
 8002524:	d10e      	bne.n	8002544 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002530:	2b40      	cmp	r3, #64	; 0x40
 8002532:	d107      	bne.n	8002544 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800253c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f8f9 	bl	8002736 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b20      	cmp	r3, #32
 8002550:	d10e      	bne.n	8002570 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b20      	cmp	r3, #32
 800255e:	d107      	bne.n	8002570 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0220 	mvn.w	r2, #32
 8002568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fa32 	bl	80029d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_TIM_ConfigClockSource+0x18>
 800258c:	2302      	movs	r3, #2
 800258e:	e0b3      	b.n	80026f8 <HAL_TIM_ConfigClockSource+0x180>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c8:	d03e      	beq.n	8002648 <HAL_TIM_ConfigClockSource+0xd0>
 80025ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ce:	f200 8087 	bhi.w	80026e0 <HAL_TIM_ConfigClockSource+0x168>
 80025d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d6:	f000 8085 	beq.w	80026e4 <HAL_TIM_ConfigClockSource+0x16c>
 80025da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025de:	d87f      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x168>
 80025e0:	2b70      	cmp	r3, #112	; 0x70
 80025e2:	d01a      	beq.n	800261a <HAL_TIM_ConfigClockSource+0xa2>
 80025e4:	2b70      	cmp	r3, #112	; 0x70
 80025e6:	d87b      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x168>
 80025e8:	2b60      	cmp	r3, #96	; 0x60
 80025ea:	d050      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x116>
 80025ec:	2b60      	cmp	r3, #96	; 0x60
 80025ee:	d877      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x168>
 80025f0:	2b50      	cmp	r3, #80	; 0x50
 80025f2:	d03c      	beq.n	800266e <HAL_TIM_ConfigClockSource+0xf6>
 80025f4:	2b50      	cmp	r3, #80	; 0x50
 80025f6:	d873      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x168>
 80025f8:	2b40      	cmp	r3, #64	; 0x40
 80025fa:	d058      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0x136>
 80025fc:	2b40      	cmp	r3, #64	; 0x40
 80025fe:	d86f      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x168>
 8002600:	2b30      	cmp	r3, #48	; 0x30
 8002602:	d064      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x156>
 8002604:	2b30      	cmp	r3, #48	; 0x30
 8002606:	d86b      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x168>
 8002608:	2b20      	cmp	r3, #32
 800260a:	d060      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x156>
 800260c:	2b20      	cmp	r3, #32
 800260e:	d867      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x168>
 8002610:	2b00      	cmp	r3, #0
 8002612:	d05c      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x156>
 8002614:	2b10      	cmp	r3, #16
 8002616:	d05a      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002618:	e062      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6899      	ldr	r1, [r3, #8]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f000 f95c 	bl	80028e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800263c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	609a      	str	r2, [r3, #8]
      break;
 8002646:	e04e      	b.n	80026e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	6899      	ldr	r1, [r3, #8]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f000 f945 	bl	80028e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800266a:	609a      	str	r2, [r3, #8]
      break;
 800266c:	e03b      	b.n	80026e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6859      	ldr	r1, [r3, #4]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	461a      	mov	r2, r3
 800267c:	f000 f8bc 	bl	80027f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2150      	movs	r1, #80	; 0x50
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f913 	bl	80028b2 <TIM_ITRx_SetConfig>
      break;
 800268c:	e02b      	b.n	80026e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6859      	ldr	r1, [r3, #4]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	461a      	mov	r2, r3
 800269c:	f000 f8da 	bl	8002854 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2160      	movs	r1, #96	; 0x60
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f903 	bl	80028b2 <TIM_ITRx_SetConfig>
      break;
 80026ac:	e01b      	b.n	80026e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6859      	ldr	r1, [r3, #4]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	461a      	mov	r2, r3
 80026bc:	f000 f89c 	bl	80027f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2140      	movs	r1, #64	; 0x40
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f8f3 	bl	80028b2 <TIM_ITRx_SetConfig>
      break;
 80026cc:	e00b      	b.n	80026e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4619      	mov	r1, r3
 80026d8:	4610      	mov	r0, r2
 80026da:	f000 f8ea 	bl	80028b2 <TIM_ITRx_SetConfig>
        break;
 80026de:	e002      	b.n	80026e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026e0:	bf00      	nop
 80026e2:	e000      	b.n	80026e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a25      	ldr	r2, [pc, #148]	; (80027f0 <TIM_Base_SetConfig+0xa8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d007      	beq.n	8002770 <TIM_Base_SetConfig+0x28>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002766:	d003      	beq.n	8002770 <TIM_Base_SetConfig+0x28>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a22      	ldr	r2, [pc, #136]	; (80027f4 <TIM_Base_SetConfig+0xac>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d108      	bne.n	8002782 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a1a      	ldr	r2, [pc, #104]	; (80027f0 <TIM_Base_SetConfig+0xa8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d007      	beq.n	800279a <TIM_Base_SetConfig+0x52>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002790:	d003      	beq.n	800279a <TIM_Base_SetConfig+0x52>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <TIM_Base_SetConfig+0xac>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d108      	bne.n	80027ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <TIM_Base_SetConfig+0xa8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d103      	bne.n	80027e0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	615a      	str	r2, [r3, #20]
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	40012c00 	.word	0x40012c00
 80027f4:	40000400 	.word	0x40000400

080027f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	f023 0201 	bic.w	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f023 030a 	bic.w	r3, r3, #10
 8002834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	621a      	str	r2, [r3, #32]
}
 800284a:	bf00      	nop
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	f023 0210 	bic.w	r2, r3, #16
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800287e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	031b      	lsls	r3, r3, #12
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	4313      	orrs	r3, r2
 8002888:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002890:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	621a      	str	r2, [r3, #32]
}
 80028a8:	bf00      	nop
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b085      	sub	sp, #20
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f043 0307 	orr.w	r3, r3, #7
 80028d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	609a      	str	r2, [r3, #8]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b087      	sub	sp, #28
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002900:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	021a      	lsls	r2, r3, #8
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	431a      	orrs	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	4313      	orrs	r3, r2
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	609a      	str	r2, [r3, #8]
}
 800291a:	bf00      	nop
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002938:	2302      	movs	r3, #2
 800293a:	e041      	b.n	80029c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a14      	ldr	r2, [pc, #80]	; (80029cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d009      	beq.n	8002994 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002988:	d004      	beq.n	8002994 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d10c      	bne.n	80029ae <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800299a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40012c00 	.word	0x40012c00
 80029d0:	40000400 	.word	0x40000400

080029d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <__libc_init_array>:
 80029f8:	b570      	push	{r4, r5, r6, lr}
 80029fa:	2600      	movs	r6, #0
 80029fc:	4d0c      	ldr	r5, [pc, #48]	; (8002a30 <__libc_init_array+0x38>)
 80029fe:	4c0d      	ldr	r4, [pc, #52]	; (8002a34 <__libc_init_array+0x3c>)
 8002a00:	1b64      	subs	r4, r4, r5
 8002a02:	10a4      	asrs	r4, r4, #2
 8002a04:	42a6      	cmp	r6, r4
 8002a06:	d109      	bne.n	8002a1c <__libc_init_array+0x24>
 8002a08:	f000 f822 	bl	8002a50 <_init>
 8002a0c:	2600      	movs	r6, #0
 8002a0e:	4d0a      	ldr	r5, [pc, #40]	; (8002a38 <__libc_init_array+0x40>)
 8002a10:	4c0a      	ldr	r4, [pc, #40]	; (8002a3c <__libc_init_array+0x44>)
 8002a12:	1b64      	subs	r4, r4, r5
 8002a14:	10a4      	asrs	r4, r4, #2
 8002a16:	42a6      	cmp	r6, r4
 8002a18:	d105      	bne.n	8002a26 <__libc_init_array+0x2e>
 8002a1a:	bd70      	pop	{r4, r5, r6, pc}
 8002a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a20:	4798      	blx	r3
 8002a22:	3601      	adds	r6, #1
 8002a24:	e7ee      	b.n	8002a04 <__libc_init_array+0xc>
 8002a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a2a:	4798      	blx	r3
 8002a2c:	3601      	adds	r6, #1
 8002a2e:	e7f2      	b.n	8002a16 <__libc_init_array+0x1e>
 8002a30:	08002a88 	.word	0x08002a88
 8002a34:	08002a88 	.word	0x08002a88
 8002a38:	08002a88 	.word	0x08002a88
 8002a3c:	08002a8c 	.word	0x08002a8c

08002a40 <memset>:
 8002a40:	4603      	mov	r3, r0
 8002a42:	4402      	add	r2, r0
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d100      	bne.n	8002a4a <memset+0xa>
 8002a48:	4770      	bx	lr
 8002a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a4e:	e7f9      	b.n	8002a44 <memset+0x4>

08002a50 <_init>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	bf00      	nop
 8002a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a56:	bc08      	pop	{r3}
 8002a58:	469e      	mov	lr, r3
 8002a5a:	4770      	bx	lr

08002a5c <_fini>:
 8002a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5e:	bf00      	nop
 8002a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a62:	bc08      	pop	{r3}
 8002a64:	469e      	mov	lr, r3
 8002a66:	4770      	bx	lr
